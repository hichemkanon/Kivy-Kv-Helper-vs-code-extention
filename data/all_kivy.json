{
    "Accordion": {
        "name": "Accordion",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.accordion import Accordion",
        "help": "Accordion class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Accordion:\n    ",
        "prefix_py": "Accordion()"
    },
    "_EventDispatcher__proxy_getter": {
        "name": "_EventDispatcher__proxy_getter",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.__proxy_getter(self, EventDispatcher dstinstance, name, instance)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "_EventDispatcher__proxy_getter",
        "prefix_py": "_EventDispatcher__proxy_getter."
    },
    "_EventDispatcher__proxy_setter": {
        "name": "_EventDispatcher__proxy_setter",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.__proxy_setter(self, EventDispatcher dstinstance, name, instance, value)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "_EventDispatcher__proxy_setter",
        "prefix_py": "_EventDispatcher__proxy_setter."
    },
    "_apply_transform": {
        "name": "_apply_transform",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "m",
            "pos"
        ],
        "prefix_kv": "_apply_transform: ",
        "prefix_py": "_apply_transform=()"
    },
    "_do_layout": {
        "name": "_do_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "TreeView"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_do_layout: ",
        "prefix_py": "_do_layout=()"
    },
    "_find_index_in_motion_filter": {
        "name": "_find_index_in_motion_filter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "type_id",
            "widget"
        ],
        "prefix_kv": "_find_index_in_motion_filter: ",
        "prefix_py": "_find_index_in_motion_filter=()"
    },
    "_kwargs_applied_init": {
        "name": "_kwargs_applied_init",
        "type": "getset_descriptor",
        "help": "_kwargs_applied_init: set",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "_kwargs_applied_init: ",
        "prefix_py": "_kwargs_applied_init="
    },
    "_proxy_ref": {
        "name": "_proxy_ref",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "_proxy_ref: ",
        "prefix_py": "_proxy_ref=()"
    },
    "_update_motion_filter": {
        "name": "_update_motion_filter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "child_widget",
            "child_motion_filter"
        ],
        "prefix_kv": "_update_motion_filter: ",
        "prefix_py": "_update_motion_filter=()"
    },
    "_walk": {
        "name": "_walk",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "restrict",
            "loopback",
            "index"
        ],
        "prefix_kv": "_walk: ",
        "prefix_py": "_walk=()"
    },
    "_walk_reverse": {
        "name": "_walk_reverse",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "loopback",
            "go_up"
        ],
        "prefix_kv": "_walk_reverse: ",
        "prefix_py": "_walk_reverse=()"
    },
    "add_widget": {
        "name": "add_widget",
        "type": "function",
        "help": "Add a new widget as a child of this widget.\n\n    :Parameters:\n        `widget`: :class:`Widget`\n            Widget to add to our list of children.\n        `index`: int, defaults to 0\n            Index to insert the widget in the list. Notice that the default\n            of 0 means the widget is inserted at the beginning of the list\n            and will thus be drawn on top of other sibling widgets. For a\n            full discussion of the index and widget hierarchy, please see\n            the :doc:`Widgets Programming Guide <guide/widgets>`.\n\n            .. versionadded:: 1.0.5\n        `canvas`: str, defaults to None\n            Canvas to add widget's canvas to. Can be 'before', 'after' or\n            None for the default canvas.\n\n            .. versionadded:: 1.9.0\n\n.. code-block:: python\n\n    >>> from kivy.uix.button import Button\n    >>> from kivy.uix.slider import Slider\n    >>> root = Widget()\n    >>> root.add_widget(Button())\n    >>> slider = Slider()\n    >>> root.add_widget(slider)\n\n    ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "widget",
            "args",
            "kwargs"
        ],
        "prefix_kv": "add_widget: ",
        "prefix_py": "add_widget=()"
    },
    "anim_duration": {
        "name": "anim_duration",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion"
        ],
        "prefix_kv": "anim_duration: ",
        "prefix_py": "anim_duration="
    },
    "anim_func": {
        "name": "anim_func",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion"
        ],
        "prefix_kv": "anim_func: ",
        "prefix_py": "anim_func="
    },
    "apply_class_lang_rules": {
        "name": "apply_class_lang_rules",
        "type": "function",
        "help": "Method that is called by kivy to apply the kv rules of this widget's\nclass.\n\n:Parameters:\n    `root`: :class:`Widget`\n        The root widget that instantiated this widget in kv, if the\n        widget was instantiated in kv, otherwise ``None``.\n    `ignored_consts`: set\n        (internal) See :meth:`~kivy.lang.builder.BuilderBase.apply`.\n    `rule_children`: list\n        (internal) See :meth:`~kivy.lang.builder.BuilderBase.apply`.\n\nThis is useful to be able to execute code before/after the class kv\nrules are applied to the widget. E.g. if the kv code requires some\nproperties to be initialized before it is used in a binding rule.\nIf overwriting remember to call ``super``, otherwise the kv rules will\nnot be applied.\n\nIn the following example,\n\n.. code-block:: python\n\n    class MyWidget(Widget):\n        pass\n\n    class OtherWidget(MyWidget):\n        pass\n\n.. code-block:: kv\n\n<MyWidget>:\n    my_prop: some_value\n\n<OtherWidget>:\n    other_prop: some_value\n\nWhen ``OtherWidget`` is instantiated with ``OtherWidget()``, the\nwidget's :meth:`apply_class_lang_rules` is called and it applies the\nkv rules of this class - ``<MyWidget>`` and ``<OtherWidget>``.\n\nSimilarly, when the widget is instantiated from kv, e.g.\n\n.. code-block:: kv\n\n    <MyBox@BoxLayout>:\n        height: 55\n        OtherWidget:\n            width: 124\n\n``OtherWidget``'s :meth:`apply_class_lang_rules` is called and it\napplies the kv rules of this class - ``<MyWidget>`` and\n``<OtherWidget>``.\n\n.. note::\n\n    It applies only the class rules not the instance rules. I.e. in the\n    above kv example in the ``MyBox`` rule when ``OtherWidget`` is\n    instantiated, its :meth:`apply_class_lang_rules` applies the\n    ``<MyWidget>`` and ``<OtherWidget>`` rules to it - it does not\n    apply the ``width: 124`` rule. The ``width: 124`` rule is part of\n    the ``MyBox`` rule and is applied by the ``MyBox``'s instance's\n    :meth:`apply_class_lang_rules`.\n\n.. versionchanged:: 1.11.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "root",
            "ignored_consts",
            "rule_children"
        ],
        "prefix_kv": "apply_class_lang_rules: ",
        "prefix_py": "apply_class_lang_rules=()"
    },
    "apply_property": {
        "name": "apply_property",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.apply_property(self, **kwargs)\nAdds properties at runtime to the class. The function accepts\n        keyword arguments of the form `prop_name=prop`, where `prop` is a\n        :class:`Property` instance and `prop_name` is the name of the attribute\n        of the property.\n\n        .. versionadded:: 1.9.1\n\n        .. warning::\n\n            This method is not recommended for common usage because you should\n            declare the properties in your class instead of using this method.\n\n        For example::\n\n            >>> print(wid.property('sticks', quiet=True))\n            None\n            >>> wid.apply_property(sticks=ObjectProperty(55, max=10))\n            >>> print(wid.property('sticks', quiet=True))\n            <kivy.properties.ObjectProperty object at 0x04303130>\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "apply_property",
        "prefix_py": "apply_property."
    },
    "bind": {
        "name": "bind",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.bind(self, **kwargs)\nBind an event type or a property to a callback.\n\n        Usage::\n\n            # With properties\n            def my_x_callback(obj, value):\n                print('on object', obj, 'x changed to', value)\n            def my_width_callback(obj, value):\n                print('on object', obj, 'width changed to', value)\n            self.bind(x=my_x_callback, width=my_width_callback)\n\n            # With event\n            def my_press_callback(obj):\n                print('event on object', obj)\n            self.bind(on_press=my_press_callback)\n\n        In general, property callbacks are called with 2 arguments (the\n        object and the property's new value) and event callbacks with\n        one argument (the object). The example above illustrates this.\n\n        The following example demonstrates various ways of using the bind\n        function in a complete application::\n\n            from kivy.uix.boxlayout import BoxLayout\n            from kivy.app import App\n            from kivy.uix.button import Button\n            from functools import partial\n\n\n            class DemoBox(BoxLayout):\n                \"\"\"\n                This class demonstrates various techniques that can be used for binding to\n                events. Although parts could me made more optimal, advanced Python concepts\n                are avoided for the sake of readability and clarity.\n                \"\"\"\n                def __init__(self, **kwargs):\n                    super(DemoBox, self).__init__(**kwargs)\n                    self.orientation = \"vertical\"\n\n                    # We start with binding to a normal event. The only argument\n                    # passed to the callback is the object which we have bound to.\n                    btn = Button(text=\"Normal binding to event\")\n                    btn.bind(on_press=self.on_event)\n\n                    # Next, we bind to a standard property change event. This typically\n                    # passes 2 arguments: the object and the value\n                    btn2 = Button(text=\"Normal binding to a property change\")\n                    btn2.bind(state=self.on_property)\n\n                    # Here we use anonymous functions (a.k.a lambdas) to perform binding.\n                    # Their advantage is that you can avoid declaring new functions i.e.\n                    # they offer a concise way to \"redirect\" callbacks.\n                    btn3 = Button(text=\"Using anonymous functions.\")\n                    btn3.bind(on_press=lambda x: self.on_event(None))\n\n                    # You can also declare a function that accepts a variable number of\n                    # positional and keyword arguments and use introspection to determine\n                    # what is being passed in. This is very handy for debugging as well\n                    # as function re-use. Here, we use standard event binding to a function\n                    # that accepts optional positional and keyword arguments.\n                    btn4 = Button(text=\"Use a flexible function\")\n                    btn4.bind(on_press=self.on_anything)\n\n                    # Lastly, we show how to use partial functions. They are sometimes\n                    # difficult to grasp, but provide a very flexible and powerful way to\n                    # reuse functions.\n                    btn5 = Button(text=\"Using partial functions. For hardcores.\")\n                    btn5.bind(on_press=partial(self.on_anything, \"1\", \"2\", monthy=\"python\"))\n\n                    for but in [btn, btn2, btn3, btn4, btn5]:\n                        self.add_widget(but)\n\n                def on_event(self, obj):\n                    print(\"Typical event from\", obj)\n\n                def on_property(self, obj, value):\n                    print(\"Typical property change from\", obj, \"to\", value)\n\n                def on_anything(self, *args, **kwargs):\n                    print('The flexible function has *args of', str(args),\n                        \"and **kwargs of\", str(kwargs))\n\n\n            class DemoApp(App):\n                def build(self):\n                    return DemoBox()\n\n            if __name__ == \"__main__\":\n                DemoApp().run()\n\n        If a callback has already been bound to a given event or property,\n        it won't be added again.\n\n        When binding a method to an event or property, a\n        :class:`kivy.weakmethod.WeakMethod` of the callback is saved. That is,\n        rather than storing a regular reference, it stores both a weak\n        reference to the instance (see Python's :class:`weakref`).\n\n        This has two consequences.\n\n        The first is that the binding will not prevent garbage collection of\n        the method's object. The client must maintain a reference to the instance for\n        the desired lifetime. The callback reference is silently removed if it\n        becomes invalid.\n\n        The second is that when using a decorated method e.g.::\n\n            @my_decorator\n            def callback(self, *args):\n                pass\n\n        the decorator (``my_decorator`` here) must use `wraps <https://docs.python.org/3/library/functools.html#functools.wraps>`_ internally.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectFbo",
            "EffectWidget",
            "FXAAEffect",
            "Fbo",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Texture",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "bind",
        "prefix_py": "bind."
    },
    "canvas": {
        "name": "canvas",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "canvas: ",
        "prefix_py": "canvas=()"
    },
    "center": {
        "name": "center",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "string_types",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "text_type",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "center: ()",
        "prefix_py": "center=()"
    },
    "center_x": {
        "name": "center_x",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "center_x",
        "prefix_py": "center_x."
    },
    "center_y": {
        "name": "center_y",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "center_y",
        "prefix_py": "center_y."
    },
    "children": {
        "name": "children",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CanvasBase",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "InstructionGroup",
            "_ColorArc",
            "ScrollView",
            "EffectFbo",
            "EffectWidget",
            "Fbo",
            "RenderContext",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "Canvas",
            "VKeyboard"
        ],
        "prefix_kv": "children: ()",
        "prefix_py": "children=()"
    },
    "clear_widgets": {
        "name": "clear_widgets",
        "type": "function",
        "help": "Remove all (or the specified) :attr:`~Widget.children` of this widget.\nIf the 'children' argument is specified, it should be a list (or\nfiltered list) of children of the current widget.\n\n.. versionchanged:: 1.8.0\n    The `children` argument can be used to specify the children you\n    want to remove.\n.. versionchanged:: 2.1.0\n\n    Specifying an empty ``children`` list leaves the widgets unchanged.\n    Previously it was treated like ``None`` and all children were\n    removed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "children"
        ],
        "prefix_kv": "clear_widgets: ",
        "prefix_py": "clear_widgets=()"
    },
    "cls": {
        "name": "cls",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "cls: ()",
        "prefix_py": "cls=()"
    },
    "collide_point": {
        "name": "collide_point",
        "type": "function",
        "help": "Check if a point (x, y) is inside the widget's axis aligned bounding\nbox.\n\n:Parameters:\n    `x`: numeric\n        x position of the point (in parent coordinates)\n    `y`: numeric\n        y position of the point (in parent coordinates)\n\n:Returns:\n    A bool. True if the point is inside the bounding box, False\n    otherwise.\n\n.. code-block:: python\n\n    >>> Widget(pos=(10, 10), size=(50, 50)).collide_point(40, 40)\n    True",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "collide_point: ",
        "prefix_py": "collide_point=()"
    },
    "collide_widget": {
        "name": "collide_widget",
        "type": "function",
        "help": "Check if another widget collides with this widget. This function\nperforms an axis-aligned bounding box intersection test by default.\n\n:Parameters:\n    `wid`: :class:`Widget` class\n        Widget to test collision with.\n\n:Returns:\n    bool. True if the other widget collides with this widget, False\n    otherwise.\n\n.. code-block:: python\n\n    >>> wid = Widget(size=(50, 50))\n    >>> wid2 = Widget(size=(50, 50), pos=(25, 25))\n    >>> wid.collide_widget(wid2)\n    True\n    >>> wid2.pos = (55, 55)\n    >>> wid.collide_widget(wid2)\n    False",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "wid"
        ],
        "prefix_kv": "collide_widget: ",
        "prefix_py": "collide_widget=()"
    },
    "create_property": {
        "name": "create_property",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.create_property(self, unicode name, value=None, default_value=True, *largs, **kwargs)\nCreate a new property at runtime.\n\n        .. versionadded:: 1.0.9\n\n        .. versionchanged:: 1.8.0\n            `value` parameter added, can be used to set the default value of the\n            property. Also, the type of the value is used to specialize the\n            created property.\n\n        .. versionchanged:: 1.9.0\n            In the past, if `value` was of type `bool`, a `NumericProperty`\n            would be created, now a `BooleanProperty` is created.\n\n            Also, now and positional and keyword arguments are passed to the\n            property when created.\n\n        .. versionchanged:: 2.0.0\n\n            default_value has been added.\n\n        .. warning::\n\n            This function is designed for the Kivy language, don't use it in\n            your code. You should declare the property in your class instead of\n            using this method.\n\n        :Parameters:\n            `name`: string\n                Name of the property\n            `value`: object, optional\n                Default value of the property. Type is also used for creating\n                more appropriate property types. Defaults to None.\n            `default_value`: bool, True by default\n                If True, `value` will be the default for the property. Otherwise,\n                the property will be initialized with the the property type's\n                normal default value, and subsequently set to ``value``.\n\n        ::\n\n            >>> mywidget = Widget()\n            >>> mywidget.create_property('custom')\n            >>> mywidget.custom = True\n            >>> print(mywidget.custom)\n            True\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "create_property",
        "prefix_py": "create_property."
    },
    "dec_disabled": {
        "name": "dec_disabled",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "count"
        ],
        "prefix_kv": "dec_disabled: ",
        "prefix_py": "dec_disabled=()"
    },
    "disabled": {
        "name": "disabled",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "disabled",
        "prefix_py": "disabled."
    },
    "dispatch": {
        "name": "dispatch",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.dispatch(self, event_type, *largs, **kwargs)\nDispatch an event across all the handlers added in bind/fbind().\n        As soon as a handler returns True, the dispatching stops.\n\n        The function collects all the positional and keyword arguments and\n        passes them on to the handlers.\n\n        .. note::\n            The handlers are called in reverse order than they were registered\n            with :meth:`bind`.\n\n        :Parameters:\n            `event_type`: str\n                the event name to dispatch.\n\n        .. versionchanged:: 1.9.0\n            Keyword arguments collection and forwarding was added. Before, only\n            positional arguments would be collected and forwarded.\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "dispatch",
        "prefix_py": "dispatch."
    },
    "dispatch_children": {
        "name": "dispatch_children",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.dispatch_children(self, event_type, *largs, **kwargs)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "dispatch_children",
        "prefix_py": "dispatch_children."
    },
    "dispatch_generic": {
        "name": "dispatch_generic",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.dispatch_generic(self, event_type, *largs, **kwargs)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "dispatch_generic",
        "prefix_py": "dispatch_generic."
    },
    "events": {
        "name": "events",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.events(self)\nReturn all the events in the class. Can be used for introspection.\n\n        .. versionadded:: 1.8.0\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "events",
        "prefix_py": "events."
    },
    "export_as_image": {
        "name": "export_as_image",
        "type": "function",
        "help": "Return an core :class:`~kivy.core.image.Image` of the actual\nwidget.\n\n.. versionadded:: 1.11.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "args",
            "kwargs"
        ],
        "prefix_kv": "export_as_image: ",
        "prefix_py": "export_as_image=()"
    },
    "export_to_png": {
        "name": "export_to_png",
        "type": "function",
        "help": "Saves an image of the widget and its children in png format at the\nspecified filename. Works by removing the widget canvas from its\nparent, rendering to an :class:`~kivy.graphics.fbo.Fbo`, and calling\n:meth:`~kivy.graphics.texture.Texture.save`.\n\n.. note::\n\n    The image includes only this widget and its children. If you want\n    to include widgets elsewhere in the tree, you must call\n    :meth:`~Widget.export_to_png` from their common parent, or use\n    :meth:`~kivy.core.window.WindowBase.screenshot` to capture the\n    whole window.\n\n.. note::\n\n    The image will be saved in png format, you should include the\n    extension in your filename.\n\n.. versionadded:: 1.9.0\n\n:Parameters:\n    `filename`: str\n        The filename with which to save the png.\n    `scale`: float\n        The amount by which to scale the saved image, defaults to 1.\n\n        .. versionadded:: 1.11.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "filename",
            "args",
            "kwargs"
        ],
        "prefix_kv": "export_to_png: ",
        "prefix_py": "export_to_png=()"
    },
    "fbind": {
        "name": "fbind",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.fbind(self, name, func, *largs, **kwargs)\nA method for advanced, and typically faster binding. This method is\n        different than :meth:`bind` and is meant for more advanced users and\n        internal usage. It can be used as long as the following points are heeded.\n\n        #. As opposed to :meth:`bind`, it does not check that this function and\n           largs/kwargs has not been bound before to this name. So binding\n           the same callback multiple times will just keep adding it.\n        #. Although :meth:`bind` creates a :class:`WeakMethod` of the callback when\n           binding to an event or property, this method stores the callback\n           directly, unless a keyword argument `ref` with value True is provided\n           and then a :class:`WeakMethod` is saved.\n           This is useful when there's no risk of a memory leak by storing the\n           callback directly.\n        #. This method returns a unique positive number if `name` was found and\n           bound, and `0`, otherwise. It does not raise an exception, like\n           :meth:`bind` if the property `name` is not found. If not zero,\n           the uid returned is unique to this `name` and callback and can be\n           used with :meth:`unbind_uid` for unbinding.\n\n\n        When binding a callback with largs and/or kwargs, :meth:`funbind`\n        must be used for unbinding. If no largs and kwargs are provided,\n        :meth:`unbind` may be used as well. :meth:`unbind_uid` can be used in\n        either case.\n\n        This method passes on any caught positional and/or keyword arguments to\n        the callback, removing the need to call partial. When calling the\n        callback the expended largs are passed on followed by instance/value\n        (just instance for kwargs) followed by expended kwargs.\n\n        Following is an example of usage similar to the example in\n        :meth:`bind`::\n\n            class DemoBox(BoxLayout):\n\n                def __init__(self, **kwargs):\n                    super(DemoBox, self).__init__(**kwargs)\n                    self.orientation = \"vertical\"\n\n                    btn = Button(text=\"Normal binding to event\")\n                    btn.fbind('on_press', self.on_event)\n\n                    btn2 = Button(text=\"Normal binding to a property change\")\n                    btn2.fbind('state', self.on_property)\n\n                    btn3 = Button(text=\"A: Using function with args.\")\n                    btn3.fbind('on_press', self.on_event_with_args, 'right',\n                                   tree='birch', food='apple')\n\n                    btn4 = Button(text=\"Unbind A.\")\n                    btn4.fbind('on_press', self.unbind_a, btn3)\n\n                    btn5 = Button(text=\"Use a flexible function\")\n                    btn5.fbind('on_press', self.on_anything)\n\n                    btn6 = Button(text=\"B: Using flexible functions with args. For hardcores.\")\n                    btn6.fbind('on_press', self.on_anything, \"1\", \"2\", monthy=\"python\")\n\n                    btn7 = Button(text=\"Force dispatch B with different params\")\n                    btn7.fbind('on_press', btn6.dispatch, 'on_press', 6, 7, monthy=\"other python\")\n\n                    for but in [btn, btn2, btn3, btn4, btn5, btn6, btn7]:\n                        self.add_widget(but)\n\n                def on_event(self, obj):\n                    print(\"Typical event from\", obj)\n\n                def on_event_with_args(self, side, obj, tree=None, food=None):\n                    print(\"Event with args\", obj, side, tree, food)\n\n                def on_property(self, obj, value):\n                    print(\"Typical property change from\", obj, \"to\", value)\n\n                def on_anything(self, *args, **kwargs):\n                    print('The flexible function has *args of', str(args),\n                        \"and **kwargs of\", str(kwargs))\n                    return True\n\n                def unbind_a(self, btn, event):\n                    btn.funbind('on_press', self.on_event_with_args, 'right',\n                                    tree='birch', food='apple')\n\n        .. note::\n\n            Since the kv lang uses this method to bind, one has to implement\n            this method, instead of :meth:`bind` when creating a non\n            :class:`EventDispatcher` based class used with the kv lang. See\n            :class:`Observable` for an example.\n\n        .. versionadded:: 1.9.0\n\n        .. versionchanged:: 1.9.1\n            The `ref` keyword argument has been added.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "fbind",
        "prefix_py": "fbind."
    },
    "funbind": {
        "name": "funbind",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.funbind(self, name, func, *largs, **kwargs)\nSimilar to :meth:`fbind`.\n\n        When unbinding, :meth:`unbind` will unbind all callbacks that match the\n        callback, while this method will only unbind the first.\n\n        To unbind, the same positional and keyword arguments passed to\n        :meth:`fbind` must be passed on to funbind.\n\n        .. note::\n\n            It is safe to use :meth:`funbind` to unbind a function bound with\n            :meth:`bind` as long as no keyword and positional arguments are\n            provided to :meth:`funbind`.\n\n        .. versionadded:: 1.9.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "funbind",
        "prefix_py": "funbind."
    },
    "get_center_x": {
        "name": "get_center_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_center_x: ",
        "prefix_py": "get_center_x=()"
    },
    "get_center_y": {
        "name": "get_center_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_center_y: ",
        "prefix_py": "get_center_y=()"
    },
    "get_disabled": {
        "name": "get_disabled",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_disabled: ",
        "prefix_py": "get_disabled=()"
    },
    "get_parent_window": {
        "name": "get_parent_window",
        "type": "function",
        "help": "Return the parent window.\n\n:Returns:\n    Instance of the parent window. Can be a\n    :class:`~kivy.core.window.WindowBase` or\n    :class:`Widget`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_parent_window: ",
        "prefix_py": "get_parent_window=()"
    },
    "get_property_observers": {
        "name": "get_property_observers",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.get_property_observers(self, name, args=False)\nReturns a list of methods that are bound to the property/event\n       passed as the *name* argument::\n\n           widget_instance.get_property_observers('on_release')\n\n       :Parameters:\n\n           `name`: str\n               The name of the event or property.\n           `args`: bool\n               Whether to return the bound args. To keep compatibility,\n               only the callback functions and not their provided args will\n               be returned in the list when `args` is False.\n\n               If True, each element in the list is a 5-tuple of\n               `(callback, largs, kwargs, is_ref, uid)`, where `is_ref` indicates\n               whether `callback` is a weakref, and `uid` is the uid given by\n               :meth:`fbind`, or None if :meth:`bind` was used. Defaults to `False`.\n\n       :Returns:\n           The list of bound callbacks. See `args` for details.\n\n       .. versionadded:: 1.8.0\n\n       .. versionchanged:: 1.9.0\n           `args` has been added.\n       ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "get_property_observers",
        "prefix_py": "get_property_observers."
    },
    "get_right": {
        "name": "get_right",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_right: ",
        "prefix_py": "get_right=()"
    },
    "get_root_window": {
        "name": "get_root_window",
        "type": "function",
        "help": "Return the root window.\n\n:Returns:\n    Instance of the root window. Can be a\n    :class:`~kivy.core.window.WindowBase` or\n    :class:`Widget`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_root_window: ",
        "prefix_py": "get_root_window=()"
    },
    "get_top": {
        "name": "get_top",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_top: ",
        "prefix_py": "get_top=()"
    },
    "get_window_matrix": {
        "name": "get_window_matrix",
        "type": "function",
        "help": "Calculate the transformation matrix to convert between window and\nwidget coordinates.\n\n:Parameters:\n    `x`: float, defaults to 0\n        Translates the matrix on the x axis.\n    `y`: float, defaults to 0\n        Translates the matrix on the y axis.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "get_window_matrix: ",
        "prefix_py": "get_window_matrix=()"
    },
    "getter": {
        "name": "getter",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.getter(self, name)\nReturn the getter of a property.\n\n        .. versionadded:: 1.0.9\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "getter",
        "prefix_py": "getter."
    },
    "height": {
        "name": "height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "CoreLabel",
            "CoreMarkupLabel",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Texture",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "height: ",
        "prefix_py": "height="
    },
    "ids": {
        "name": "ids",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "ids: {}",
        "prefix_py": "ids={}"
    },
    "inc_disabled": {
        "name": "inc_disabled",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "count"
        ],
        "prefix_kv": "inc_disabled: ",
        "prefix_py": "inc_disabled=()"
    },
    "is_event_type": {
        "name": "is_event_type",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.is_event_type(self, event_type)\nReturn True if the event_type is already registered.\n\n        .. versionadded:: 1.0.4\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "is_event_type",
        "prefix_py": "is_event_type."
    },
    "min_space": {
        "name": "min_space",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem"
        ],
        "prefix_kv": "min_space: ",
        "prefix_py": "min_space="
    },
    "motion_filter": {
        "name": "motion_filter",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "motion_filter: {}",
        "prefix_py": "motion_filter={}"
    },
    "on_kv_post": {
        "name": "on_kv_post",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "base_widget"
        ],
        "prefix_kv": "on_kv_post: ",
        "prefix_py": "on_kv_post=()"
    },
    "on_motion": {
        "name": "on_motion",
        "type": "function",
        "help": "Called when a motion event is received.\n\n:Parameters:\n    `etype`: `str`\n        Event type, one of \"begin\", \"update\" or \"end\"\n    `me`: :class:`~kivy.input.motionevent.MotionEvent`\n        Received motion event\n:Returns: `bool`\n    `True` to stop event dispatching\n\n.. versionadded:: 2.1.0\n\n.. warning::\n    This is an experimental method and it remains so while this warning\n    is present.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "etype",
            "me"
        ],
        "prefix_kv": "on_motion: ",
        "prefix_py": "on_motion=()"
    },
    "on_opacity": {
        "name": "on_opacity",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_opacity: ",
        "prefix_py": "on_opacity=()"
    },
    "on_touch_down": {
        "name": "on_touch_down",
        "type": "function",
        "help": "Receive a touch down event.\n\n:Parameters:\n    `touch`: :class:`~kivy.input.motionevent.MotionEvent` class\n        Touch received. The touch is in parent coordinates. See\n        :mod:`~kivy.uix.relativelayout` for a discussion on\n        coordinate systems.\n\n:Returns: bool\n    If True, the dispatching of the touch event will stop.\n    If False, the event will continue to be dispatched to the rest\n    of the widget tree.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "ButtonBehavior",
            "DragBehavior",
            "FocusBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_touch_down: ",
        "prefix_py": "on_touch_down=()"
    },
    "on_touch_move": {
        "name": "on_touch_move",
        "type": "function",
        "help": "Receive a touch move event. The touch is in parent coordinates.\n\nSee :meth:`on_touch_down` for more information.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "ButtonBehavior",
            "DragBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_touch_move: ",
        "prefix_py": "on_touch_move=()"
    },
    "on_touch_up": {
        "name": "on_touch_up",
        "type": "function",
        "help": "Receive a touch up event. The touch is in parent coordinates.\n\nSee :meth:`on_touch_down` for more information.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "ButtonBehavior",
            "DragBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_touch_up: ",
        "prefix_py": "on_touch_up=()"
    },
    "opacity": {
        "name": "opacity",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectFbo",
            "EffectWidget",
            "Fbo",
            "RenderContext",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "Canvas",
            "VKeyboard"
        ],
        "prefix_kv": "opacity: ",
        "prefix_py": "opacity="
    },
    "orientation": {
        "name": "orientation",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Slider",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "orientation: ''",
        "prefix_py": "orientation=''"
    },
    "parent": {
        "name": "parent",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "nodeclass",
            "role_doc",
            "role_video",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "parent: ",
        "prefix_py": "parent="
    },
    "pos": {
        "name": "pos",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "Ellipse",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "Rectangle",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage",
            "VKeyboard"
        ],
        "prefix_kv": "pos: ()",
        "prefix_py": "pos=()"
    },
    "pos_hint": {
        "name": "pos_hint",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "pos_hint: ",
        "prefix_py": "pos_hint="
    },
    "properties": {
        "name": "properties",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.properties(self) -> dict\nReturn all the properties in the class in a dictionary of\n        key/property class. Can be used for introspection.\n\n        .. versionadded:: 1.0.9\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "properties",
        "prefix_py": "properties."
    },
    "property": {
        "name": "property",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.property(self, name, quiet=False)\nGet a property instance from the property name. If quiet is True,\n        None is returned instead of raising an exception when `name` is not a\n        property. Defaults to `False`.\n\n        .. versionadded:: 1.0.9\n\n        :return:\n\n            A :class:`~kivy.properties.Property` derived instance\n            corresponding to the name.\n\n        .. versionchanged:: 1.9.0\n            quiet was added.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "property",
        "prefix_py": "property."
    },
    "proxy_ref": {
        "name": "proxy_ref",
        "type": "property",
        "help": "Return a proxy reference to the widget, i.e. without creating a\nreference to the widget. See `weakref.proxy\n<http://docs.python.org/2/library/weakref.html?highlight        =proxy#weakref.proxy>`_ for more information.\n\n.. versionadded:: 1.7.2",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "CanvasBase",
            "Color",
            "Ellipse",
            "RelativeLayout",
            "ScissorPop",
            "ScissorPush",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "ClearBuffers",
            "ClearColor",
            "EffectBase",
            "EffectFbo",
            "EffectWidget",
            "FXAAEffect",
            "Fbo",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "ScanlinesEffect",
            "Translate",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "Line",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "BindTexture",
            "Callback",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "Scale",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Transform",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage",
            "Canvas",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "proxy_ref: ",
        "prefix_py": "proxy_ref="
    },
    "register_event_type": {
        "name": "register_event_type",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.register_event_type(self, event_type)\nRegister an event type with the dispatcher.\n\n        Registering event types allows the dispatcher to validate event handler\n        names as they are attached and to search attached objects for suitable\n        handlers. Each event type declaration must:\n\n            1. start with the prefix `on_`.\n            2. have a default handler in the class.\n\n        Example of creating a custom event::\n\n            class MyWidget(Widget):\n                def __init__(self, **kwargs):\n                    super(MyWidget, self).__init__(**kwargs)\n                    self.register_event_type('on_swipe')\n\n                def on_swipe(self):\n                    pass\n\n            def on_swipe_callback(*largs):\n                print('my swipe is called', largs)\n            w = MyWidget()\n            w.dispatch('on_swipe')\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "register_event_type",
        "prefix_py": "register_event_type."
    },
    "register_for_motion_event": {
        "name": "register_for_motion_event",
        "type": "function",
        "help": "Register to receive motion events of `type_id`.\n\nOverride :meth:`on_motion` or bind to `on_motion` event to handle\nthe incoming motion events.\n\n:Parameters:\n    `type_id`: `str`\n        Motion event type id (eg. \"touch\", \"hover\", etc.)\n    `widget`: `Widget`\n        Child widget or `self` if omitted\n\n.. versionadded:: 2.1.0\n\n.. note::\n    Method can be called multiple times with the same arguments.\n\n.. warning::\n    This is an experimental method and it remains so while this warning\n    is present.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "type_id",
            "widget"
        ],
        "prefix_kv": "register_for_motion_event: ",
        "prefix_py": "register_for_motion_event=()"
    },
    "remove_widget": {
        "name": "remove_widget",
        "type": "function",
        "help": "Remove a widget from the children of this widget.\n\n    :Parameters:\n        `widget`: :class:`Widget`\n            Widget to remove from our children list.\n\n.. code-block:: python\n\n    >>> from kivy.uix.button import Button\n    >>> root = Widget()\n    >>> button = Button()\n    >>> root.add_widget(button)\n    >>> root.remove_widget(button)\n    ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "remove_widget: ",
        "prefix_py": "remove_widget=()"
    },
    "right": {
        "name": "right",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "right",
        "prefix_py": "right."
    },
    "select": {
        "name": "select",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "ActionDropDown",
            "DropDown"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "select: ",
        "prefix_py": "select=()"
    },
    "set_center_x": {
        "name": "set_center_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_center_x: ",
        "prefix_py": "set_center_x=()"
    },
    "set_center_y": {
        "name": "set_center_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_center_y: ",
        "prefix_py": "set_center_y=()"
    },
    "set_disabled": {
        "name": "set_disabled",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_disabled: ",
        "prefix_py": "set_disabled=()"
    },
    "set_right": {
        "name": "set_right",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_right: ",
        "prefix_py": "set_right=()"
    },
    "set_top": {
        "name": "set_top",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_top: ",
        "prefix_py": "set_top=()"
    },
    "setter": {
        "name": "setter",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.setter(self, name)\nReturn the setter of a property. Use: instance.setter('name').\n        The setter is a convenient callback function useful if you want\n        to directly bind one property to another.\n        It returns a partial function that will accept\n        (obj, value) args and results in the property 'name' of instance\n        being set to value.\n\n        .. versionadded:: 1.0.9\n\n        For example, to bind number2 to number1 in python you would do::\n\n            class ExampleWidget(Widget):\n                number1 = NumericProperty(None)\n                number2 = NumericProperty(None)\n\n                def __init__(self, **kwargs):\n                    super(ExampleWidget, self).__init__(**kwargs)\n                    self.bind(number1=self.setter('number2'))\n\n        This is equivalent to kv binding::\n\n            <ExampleWidget>:\n                number2: self.number1\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "setter",
        "prefix_py": "setter."
    },
    "size": {
        "name": "size",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "Ellipse",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectFbo",
            "EffectWidget",
            "Fbo",
            "HorizontalBlurEffect",
            "Rectangle",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "CoreLabel",
            "CoreMarkupLabel",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Texture",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage",
            "VKeyboard"
        ],
        "prefix_kv": "size: ()",
        "prefix_py": "size=()"
    },
    "size_hint": {
        "name": "size_hint",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint: ()",
        "prefix_py": "size_hint=()"
    },
    "size_hint_max": {
        "name": "size_hint_max",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_max: ()",
        "prefix_py": "size_hint_max=()"
    },
    "size_hint_max_x": {
        "name": "size_hint_max_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_max_x: ",
        "prefix_py": "size_hint_max_x="
    },
    "size_hint_max_y": {
        "name": "size_hint_max_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_max_y: ",
        "prefix_py": "size_hint_max_y="
    },
    "size_hint_min": {
        "name": "size_hint_min",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_min: ()",
        "prefix_py": "size_hint_min=()"
    },
    "size_hint_min_x": {
        "name": "size_hint_min_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_min_x: ",
        "prefix_py": "size_hint_min_x="
    },
    "size_hint_min_y": {
        "name": "size_hint_min_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_min_y: ",
        "prefix_py": "size_hint_min_y="
    },
    "size_hint_x": {
        "name": "size_hint_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_x: ",
        "prefix_py": "size_hint_x="
    },
    "size_hint_y": {
        "name": "size_hint_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "size_hint_y: ",
        "prefix_py": "size_hint_y="
    },
    "to_local": {
        "name": "to_local",
        "type": "function",
        "help": "Transform parent coordinates to local (current widget) coordinates.\n\nSee :mod:`~kivy.uix.relativelayout` for details on the coordinate\nsystems.\n\n:Parameters:\n    `relative`: bool, defaults to False\n        Change to True if you want to translate coordinates to\n        relative widget coordinates.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y",
            "relative"
        ],
        "prefix_kv": "to_local: ",
        "prefix_py": "to_local=()"
    },
    "to_parent": {
        "name": "to_parent",
        "type": "function",
        "help": "Transform local (current widget) coordinates to parent coordinates.\n\nSee :mod:`~kivy.uix.relativelayout` for details on the coordinate\nsystems.\n\n:Parameters:\n    `relative`: bool, defaults to False\n        Change to True if you want to translate relative positions from\n        a widget to its parent coordinates.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y",
            "relative"
        ],
        "prefix_kv": "to_parent: ",
        "prefix_py": "to_parent=()"
    },
    "to_widget": {
        "name": "to_widget",
        "type": "function",
        "help": "Convert the coordinate from window to local (current widget)\ncoordinates.\n\nSee :mod:`~kivy.uix.relativelayout` for details on the coordinate\nsystems.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y",
            "relative"
        ],
        "prefix_kv": "to_widget: ",
        "prefix_py": "to_widget=()"
    },
    "to_window": {
        "name": "to_window",
        "type": "function",
        "help": "If ``initial`` is True, the default, it transforms **parent**\ncoordinates to window coordinates. Otherwise, it transforms **local**\n(current widget) coordinates to window coordinates.\n\nSee :mod:`~kivy.uix.relativelayout` for details on the coordinate\nsystems.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y",
            "initial",
            "relative"
        ],
        "prefix_kv": "to_window: ",
        "prefix_py": "to_window=()"
    },
    "top": {
        "name": "top",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "top",
        "prefix_py": "top."
    },
    "uid": {
        "name": "uid",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "CanvasBase",
            "Color",
            "Ellipse",
            "RelativeLayout",
            "ScissorPop",
            "ScissorPush",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "ClearBuffers",
            "ClearColor",
            "EffectBase",
            "EffectFbo",
            "EffectWidget",
            "FXAAEffect",
            "Fbo",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "ScanlinesEffect",
            "Translate",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "Line",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "BindTexture",
            "Callback",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "Scale",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Transform",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage",
            "Canvas",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "uid: ",
        "prefix_py": "uid="
    },
    "unbind": {
        "name": "unbind",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.unbind(self, **kwargs)\nUnbind properties from callback functions with similar usage as\n        :meth:`bind`.\n\n        If a callback has been bound to a given event or property multiple\n        times, only the first occurrence will be unbound.\n\n        .. note::\n\n            It is safe to use :meth:`unbind` on a function bound with :meth:`fbind`\n            as long as that function was originally bound without any keyword and\n            positional arguments. Otherwise, the function will fail to be unbound\n            and you should use :meth:`funbind` instead.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "unbind",
        "prefix_py": "unbind."
    },
    "unbind_uid": {
        "name": "unbind_uid",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.unbind_uid(self, name, uid)\nUses the uid returned by :meth:`fbind` to unbind the callback.\n\n        This method is much more efficient than :meth:`funbind`. If `uid`\n        evaluates to False (e.g. 0) a `ValueError` is raised. Also, only\n        callbacks bound with :meth:`fbind` can be unbound with this method.\n\n        Since each call to :meth:`fbind` will generate a unique `uid`,\n        only one callback will be removed. If `uid` is not found among the\n        callbacks, no error is raised.\n\n        E.g.::\n\n            btn6 = Button(text=\"B: Using flexible functions with args. For hardcores.\")\n            uid = btn6.fbind('on_press', self.on_anything, \"1\", \"2\", monthy=\"python\")\n            if not uid:\n                raise Exception('Binding failed').\n            ...\n            btn6.unbind_uid('on_press', uid)\n\n        .. versionadded:: 1.9.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "BooleanProperty",
            "DictProperty",
            "FloatLayout",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "AliasProperty",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ColorProperty",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "VariableListProperty",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "ReferenceListProperty",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "BoundedNumericProperty",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "unbind_uid",
        "prefix_py": "unbind_uid."
    },
    "unregister_event_type": {
        "name": "unregister_event_type",
        "type": "cython_function_or_method",
        "help": "EventDispatcher.unregister_event_type(self, event_type)\nUnregister an event type in the dispatcher.\n\n        .. versionchanged:: 2.1.0\n            Method renamed from `unregister_event_types` to\n            `unregister_event_type`.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "prefix_kv": "unregister_event_type",
        "prefix_py": "unregister_event_type."
    },
    "unregister_event_types": {
        "name": "unregister_event_types",
        "type": "function",
        "help": "EventDispatcher.unregister_event_types(self, event_type)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "Animation",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "CodeNavigationBehavior",
            "EventDispatcher",
            "RelativeLayout",
            "KNSpace",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "EffectWidget",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard",
            "WidgetBase"
        ],
        "parametters": [
            "self",
            "event_type"
        ],
        "prefix_kv": "unregister_event_types: ",
        "prefix_py": "unregister_event_types=()"
    },
    "unregister_for_motion_event": {
        "name": "unregister_for_motion_event",
        "type": "function",
        "help": "Unregister to receive motion events of `type_id`.\n\n:Parameters:\n    `type_id`: `str`\n        Motion event type id (eg. \"touch\", \"hover\", etc.)\n    `widget`: `Widget`\n        Child widget or `self` if omitted\n\n.. versionadded:: 2.1.0\n\n.. note::\n    Method can be called multiple times with the same arguments.\n\n.. warning::\n    This is an experimental method and it remains so while this warning\n    is present.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "type_id",
            "widget"
        ],
        "prefix_kv": "unregister_for_motion_event: ",
        "prefix_py": "unregister_for_motion_event=()"
    },
    "walk": {
        "name": "walk",
        "type": "function",
        "help": "Iterator that walks the widget tree starting with this widget and\ngoes forward returning widgets in the order in which layouts display\nthem.\n\n:Parameters:\n    `restrict`: bool, defaults to False\n        If True, it will only iterate through the widget and its\n        children (or children of its children etc.). Defaults to False.\n    `loopback`: bool, defaults to False\n        If True, when the last widget in the tree is reached,\n        it'll loop back to the uppermost root and start walking until\n        we hit this widget again. Naturally, it can only loop back when\n        `restrict` is False. Defaults to False.\n\n:return:\n    A generator that walks the tree, returning widgets in the\n    forward layout order.\n\nFor example, given a tree with the following structure:\n\n.. code-block:: kv\n\n    GridLayout:\n        Button\n        BoxLayout:\n            id: box\n            Widget\n            Button\n        Widget\n\nwalking this tree:\n\n.. code-block:: python\n\n    >>> # Call walk on box with loopback True, and restrict False\n    >>> [type(widget) for widget in box.walk(loopback=True)]\n    [<class 'BoxLayout'>, <class 'Widget'>, <class 'Button'>,\n        <class 'Widget'>, <class 'GridLayout'>, <class 'Button'>]\n    >>> # Now with loopback False, and restrict False\n    >>> [type(widget) for widget in box.walk()]\n    [<class 'BoxLayout'>, <class 'Widget'>, <class 'Button'>,\n        <class 'Widget'>]\n    >>> # Now with restrict True\n    >>> [type(widget) for widget in box.walk(restrict=True)]\n    [<class 'BoxLayout'>, <class 'Widget'>, <class 'Button'>]\n\n.. versionadded:: 1.9.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "nodeclass",
            "role_doc",
            "role_video",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "restrict",
            "loopback"
        ],
        "prefix_kv": "walk: ",
        "prefix_py": "walk=()"
    },
    "walk_reverse": {
        "name": "walk_reverse",
        "type": "function",
        "help": "Iterator that walks the widget tree backwards starting with the\nwidget before this, and going backwards returning widgets in the\nreverse order in which layouts display them.\n\nThis walks in the opposite direction of :meth:`walk`, so a list of the\ntree generated with :meth:`walk` will be in reverse order compared\nto the list generated with this, provided `loopback` is True.\n\n:Parameters:\n    `loopback`: bool, defaults to False\n        If True, when the uppermost root in the tree is\n        reached, it'll loop back to the last widget and start walking\n        back until after we hit widget again. Defaults to False.\n\n:return:\n    A generator that walks the tree, returning widgets in the\n    reverse layout order.\n\nFor example, given a tree with the following structure:\n\n.. code-block:: kv\n\n    GridLayout:\n        Button\n        BoxLayout:\n            id: box\n            Widget\n            Button\n        Widget\n\nwalking this tree:\n\n.. code-block:: python\n\n    >>> # Call walk on box with loopback True\n    >>> [type(widget) for widget in box.walk_reverse(loopback=True)]\n    [<class 'Button'>, <class 'GridLayout'>, <class 'Widget'>,\n        <class 'Button'>, <class 'Widget'>, <class 'BoxLayout'>]\n    >>> # Now with loopback False\n    >>> [type(widget) for widget in box.walk_reverse()]\n    [<class 'Button'>, <class 'GridLayout'>]\n    >>> forward = [w for w in box.walk(loopback=True)]\n    >>> backward = [w for w in box.walk_reverse(loopback=True)]\n    >>> forward == backward[::-1]\n    True\n\n.. versionadded:: 1.9.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "loopback"
        ],
        "prefix_kv": "walk_reverse: ",
        "prefix_py": "walk_reverse=()"
    },
    "width": {
        "name": "width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureContainer",
            "GestureSurface",
            "Line",
            "GridLayout",
            "AsyncImage",
            "CoreImage",
            "CoreLabel",
            "CoreMarkupLabel",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "Texture",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "width: ",
        "prefix_py": "width="
    },
    "x": {
        "name": "x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "Translate",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "Vector",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "Scale",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "x: ",
        "prefix_py": "x="
    },
    "y": {
        "name": "y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Accordion",
            "AccordionItem",
            "FloatLayout",
            "Widget",
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "CheckBox",
            "ContextualActionView",
            "DropDown",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "ScissorPush",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "Image",
            "Scatter",
            "Camera",
            "Carousel",
            "StencilView",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "ColorWheel",
            "ScrollView",
            "EffectWidget",
            "Translate",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "Vector",
            "GridLayout",
            "AsyncImage",
            "ModalView",
            "PageLayout",
            "Popup",
            "ProgressBar",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleView",
            "RstAsyncImage",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstDocument",
            "RstEmptySpace",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstImage",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstTransition",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "Scale",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingSidebarLabel",
            "SettingSpacer",
            "SettingString",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "Switch",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "Selector",
            "TextInputCutCopyPaste",
            "TreeView",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "VKeyboard"
        ],
        "prefix_kv": "y: ",
        "prefix_py": "y="
    },
    "AccordionException": {
        "name": "AccordionException",
        "type": "type",
        "import": "from kivy.uix.accordion import AccordionException",
        "help": "AccordionException class.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AccordionException: ",
        "prefix_py": "AccordionException="
    },
    "add_note": {
        "name": "add_note",
        "type": "method_descriptor",
        "help": "Exception.add_note(note) --\nadd a note to the exception",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "AccordionException",
            "ActionBarException",
            "BubbleException",
            "DropDownException",
            "error",
            "GridLayoutException",
            "PopupException",
            "LayoutChangeException",
            "ScreenManagerException",
            "TabbedPanelException",
            "TreeViewException",
            "WidgetException"
        ],
        "prefix_kv": "add_note: ()",
        "prefix_py": "add_note=()"
    },
    "args": {
        "name": "args",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionException",
            "ActionBarException",
            "partial",
            "BubbleException",
            "DropDownException",
            "error",
            "GridLayoutException",
            "PopupException",
            "LayoutChangeException",
            "ScreenManagerException",
            "TabbedPanelException",
            "TreeViewException",
            "WidgetException"
        ],
        "prefix_kv": "args: ",
        "prefix_py": "args="
    },
    "with_traceback": {
        "name": "with_traceback",
        "type": "method_descriptor",
        "help": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "AccordionException",
            "ActionBarException",
            "BubbleException",
            "DropDownException",
            "error",
            "GridLayoutException",
            "PopupException",
            "LayoutChangeException",
            "ScreenManagerException",
            "TabbedPanelException",
            "TreeViewException",
            "WidgetException"
        ],
        "prefix_kv": "with_traceback: ()",
        "prefix_py": "with_traceback=()"
    },
    "AccordionItem": {
        "name": "AccordionItem",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.accordion import AccordionItem",
        "help": "AccordionItem class that must be used in conjunction with the\n:class:`Accordion` class. See the module documentation for more\ninformation.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AccordionItem:\n    ",
        "prefix_py": "AccordionItem()"
    },
    "_trigger_layout": {
        "name": "_trigger_layout",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "FloatLayout",
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleContent",
            "ColorPicker",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "ModalView",
            "PageLayout",
            "Popup",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "VideoPlayerPreview"
        ],
        "prefix_kv": "_trigger_layout: ",
        "prefix_py": "_trigger_layout=()"
    },
    "_update_title": {
        "name": "_update_title",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AccordionItem"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_update_title: ",
        "prefix_py": "_update_title=()"
    },
    "accordion": {
        "name": "accordion",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "accordion: ",
        "prefix_py": "accordion="
    },
    "background_disabled_normal": {
        "name": "background_disabled_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "ActionButton",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem"
        ],
        "prefix_kv": "background_disabled_normal: ''",
        "prefix_py": "background_disabled_normal=''"
    },
    "background_disabled_selected": {
        "name": "background_disabled_selected",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "background_disabled_selected: ''",
        "prefix_py": "background_disabled_selected=''"
    },
    "background_normal": {
        "name": "background_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "Button",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem"
        ],
        "prefix_kv": "background_normal: ''",
        "prefix_py": "background_normal=''"
    },
    "background_selected": {
        "name": "background_selected",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "background_selected: ''",
        "prefix_py": "background_selected=''"
    },
    "collapse": {
        "name": "collapse",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "collapse: True",
        "prefix_py": "collapse=True"
    },
    "collapse_alpha": {
        "name": "collapse_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "collapse_alpha: ",
        "prefix_py": "collapse_alpha="
    },
    "container": {
        "name": "container",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "ActionDropDown",
            "DropDown",
            "RstVideoPlayer",
            "VideoPlayer",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "container: ",
        "prefix_py": "container="
    },
    "container_title": {
        "name": "container_title",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "container_title: ",
        "prefix_py": "container_title="
    },
    "content_size": {
        "name": "content_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "Bubble",
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "content_size: ()",
        "prefix_py": "content_size=()"
    },
    "do_layout": {
        "name": "do_layout",
        "type": "function",
        "help": "This function is called when a layout is called by a trigger.\nIf you are writing a new Layout subclass, don't call this function\ndirectly but use :meth:`_trigger_layout` instead.\n\nThe function is by default called *before* the next frame, therefore\nthe layout isn't updated immediately. Anything depending on the\npositions of e.g. children should be scheduled for the next frame.\n\n.. versionadded:: 1.0.8",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AccordionItem",
            "FloatLayout",
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleContent",
            "ColorPicker",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "ModalView",
            "PageLayout",
            "Popup",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "VideoPlayerPreview"
        ],
        "parametters": [
            "self",
            "largs",
            "kwargs"
        ],
        "prefix_kv": "do_layout: ",
        "prefix_py": "do_layout=()"
    },
    "layout_hint_with_bounds": {
        "name": "layout_hint_with_bounds",
        "type": "function",
        "help": "(internal) Computes the appropriate (size) hint for all the\nwidgets given (potential) min or max bounds on the widgets' size.\nThe ``hint`` list is updated with appropriate sizes.\n\nIt walks through the hints and for any widgets whose hint will result\nin violating min or max constraints, it fixes the hint. Any remaining\nor missing space after all the widgets are fixed get distributed\nto the widgets making them smaller or larger according to their\nsize hint.\n\nThis algorithms knows nothing about the widgets other than what is\npassed through the input params, so it's fairly generic for laying\nthings out according to constraints using size hints.\n\n:Parameters:\n\n    `sh_sum`: float\n        The sum of the size hints (basically ``sum(size_hint)``).\n    `available_space`: float\n        The amount of pixels available for all the widgets\n        whose size hint is not None. Cannot be zero.\n    `min_bounded_size`: float\n        The minimum amount of space required according to the\n        `size_hint_min` of the widgets (basically\n        ``sum(size_hint_min)``).\n    `sh_min_vals`: list or iterable\n        Items in the iterable are the size_hint_min for each widget.\n        Can be None. The length should be the same as ``hint``\n    `sh_max_vals`: list or iterable\n        Items in the iterable are the size_hint_max for each widget.\n        Can be None. The length should be the same as ``hint``\n    `hint`: list\n        A list whose size is the same as the length of ``sh_min_vals``\n        and ``sh_min_vals`` whose each element is the corresponding\n        size hint value of that element. This list is updated in place\n        with correct size hints that ensure the constraints are not\n        violated.\n\n:returns:\n    Nothing. ``hint`` is updated in place.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AccordionItem",
            "FloatLayout",
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "AnchorLayout",
            "Layout",
            "RelativeLayout",
            "Bubble",
            "BubbleContent",
            "ColorPicker",
            "EffectWidget",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "Screen",
            "ScreenManager",
            "GestureSurface",
            "GridLayout",
            "ModalView",
            "PageLayout",
            "Popup",
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "Sandbox",
            "SandboxContent",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelContent",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "VideoPlayerPreview"
        ],
        "parametters": [
            "self",
            "sh_sum",
            "available_space",
            "min_bounded_size",
            "sh_min_vals",
            "sh_max_vals",
            "hint"
        ],
        "prefix_kv": "layout_hint_with_bounds: ",
        "prefix_py": "layout_hint_with_bounds=()"
    },
    "on_collapse": {
        "name": "on_collapse",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AccordionItem"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_collapse: ",
        "prefix_py": "on_collapse=()"
    },
    "on_collapse_alpha": {
        "name": "on_collapse_alpha",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AccordionItem"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_collapse_alpha: ",
        "prefix_py": "on_collapse_alpha=()"
    },
    "title": {
        "name": "title",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem",
            "ActionPrevious",
            "string_types",
            "Popup",
            "RstDocument",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "SettingTitle",
            "SettingsPanel",
            "text_type"
        ],
        "prefix_kv": "title: ''",
        "prefix_py": "title=''"
    },
    "title_args": {
        "name": "title_args",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "title_args: {}",
        "prefix_py": "title_args={}"
    },
    "title_template": {
        "name": "title_template",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AccordionItem"
        ],
        "prefix_kv": "title_template: ''",
        "prefix_py": "title_template=''"
    },
    "Animation": {
        "name": "Animation",
        "type": "type",
        "import": "from kivy.uix.accordion import Animation",
        "help": "Create an animation definition that can be used to animate a Widget.\n\n:Parameters:\n    `duration` or `d`: float, defaults to 1.\n        Duration of the animation, in seconds.\n    `transition` or `t`: str or func\n        Transition function for animate properties. It can be the name of a\n        method from :class:`AnimationTransition`.\n    `step` or `s`: float\n        Step in milliseconds of the animation. Defaults to 0, which means\n        the animation is updated for every frame.\n\n        To update the animation less often, set the step value to a float.\n        For example, if you want to animate at 30 FPS, use s=1/30.\n\n:Events:\n    `on_start`: animation, widget\n        Fired when the animation is started on a widget.\n    `on_complete`: animation, widget\n        Fired when the animation is completed or stopped on a widget.\n    `on_progress`: animation, widget, progression\n        Fired when the progression of the animation is changing.\n\n.. versionchanged:: 1.4.0\n    Added s/step parameter.\n\n.. versionchanged:: 1.10.0\n    The default value of the step parameter was changed from 1/60. to 0.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Animation: ",
        "prefix_py": "Animation="
    },
    "_calculate": {
        "name": "_calculate",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "a",
            "b",
            "t"
        ],
        "prefix_kv": "_calculate: ",
        "prefix_py": "_calculate=()"
    },
    "_clock_install": {
        "name": "_clock_install",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_clock_install: ",
        "prefix_py": "_clock_install=()"
    },
    "_clock_uninstall": {
        "name": "_clock_uninstall",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_clock_uninstall: ",
        "prefix_py": "_clock_uninstall=()"
    },
    "_initialize": {
        "name": "_initialize",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "_initialize: ",
        "prefix_py": "_initialize=()"
    },
    "_instances": {
        "name": "_instances",
        "type": "set",
        "help": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Animation"
        ],
        "prefix_kv": "_instances: {}",
        "prefix_py": "_instances={}"
    },
    "_register": {
        "name": "_register",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_register: ",
        "prefix_py": "_register=()"
    },
    "_unregister": {
        "name": "_unregister",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_unregister: ",
        "prefix_py": "_unregister=()"
    },
    "_update": {
        "name": "_update",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_update: ",
        "prefix_py": "_update=()"
    },
    "_update_ev": {
        "name": "_update_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Animation"
        ],
        "prefix_kv": "_update_ev: ",
        "prefix_py": "_update_ev=()"
    },
    "animated_properties": {
        "name": "animated_properties",
        "type": "property",
        "help": "Return the properties used to animate.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Animation"
        ],
        "prefix_kv": "animated_properties: ",
        "prefix_py": "animated_properties="
    },
    "cancel": {
        "name": "cancel",
        "type": "function",
        "help": "Cancel the animation previously applied to a widget. Same\neffect as :attr:`stop`, except the `on_complete` event will\n*not* be triggered!\n\n.. versionadded:: 1.4.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "DampedScrollEffect"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "cancel: ",
        "prefix_py": "cancel=()"
    },
    "cancel_all": {
        "name": "cancel_all",
        "type": "function",
        "help": "Cancel all animations that concern a specific widget / list of\nproperties. See :attr:`cancel`.\n\nExample::\n\n    anim = Animation(x=50)\n    anim.start(widget)\n\n    # and later\n    Animation.cancel_all(widget, 'x')\n\n.. versionadded:: 1.4.0\n\n.. versionchanged:: 2.1.0\n    If the parameter ``widget`` is None, all animated widgets will be\n    the target and cancelled. If ``largs`` is also given, animation of\n    these properties will be canceled for all animated widgets.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "widget",
            "largs"
        ],
        "prefix_kv": "cancel_all: ",
        "prefix_py": "cancel_all=()"
    },
    "cancel_property": {
        "name": "cancel_property",
        "type": "function",
        "help": "Even if an animation is running, remove a property. It will not be\nanimated further. If it was the only/last property being animated,\nthe animation will be canceled (see :attr:`cancel`)\n\n.. versionadded:: 1.4.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "widget",
            "prop"
        ],
        "prefix_kv": "cancel_property: ",
        "prefix_py": "cancel_property=()"
    },
    "duration": {
        "name": "duration",
        "type": "property",
        "help": "Return the duration of the animation.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Animation",
            "RstVideoPlayer",
            "VideoPlayer",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "duration: ",
        "prefix_py": "duration="
    },
    "have_properties_to_animate": {
        "name": "have_properties_to_animate",
        "type": "function",
        "help": "Return True if a widget still has properties to animate.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "have_properties_to_animate: ",
        "prefix_py": "have_properties_to_animate=()"
    },
    "on_complete": {
        "name": "on_complete",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "on_complete: ",
        "prefix_py": "on_complete=()"
    },
    "on_progress": {
        "name": "on_progress",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "widget",
            "progress"
        ],
        "prefix_kv": "on_progress: ",
        "prefix_py": "on_progress=()"
    },
    "on_start": {
        "name": "on_start",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "on_start: ",
        "prefix_py": "on_start=()"
    },
    "start": {
        "name": "start",
        "type": "function",
        "help": "Start the animation on a widget.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "VideoPlayerAnnotation"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "start: ",
        "prefix_py": "start=()"
    },
    "stop": {
        "name": "stop",
        "type": "function",
        "help": "Stop the animation previously applied to a widget, triggering the\n`on_complete` event.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "DampedScrollEffect",
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "stop: ",
        "prefix_py": "stop=()"
    },
    "stop_all": {
        "name": "stop_all",
        "type": "function",
        "help": "Stop all animations that concern a specific widget / list of\nproperties.\n\nExample::\n\n    anim = Animation(x=50)\n    anim.start(widget)\n\n    # and later\n    Animation.stop_all(widget, 'x')",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "widget",
            "largs"
        ],
        "prefix_kv": "stop_all: ",
        "prefix_py": "stop_all=()"
    },
    "stop_property": {
        "name": "stop_property",
        "type": "function",
        "help": "Even if an animation is running, remove a property. It will not be\nanimated further. If it was the only/last property being animated,\nthe animation will be stopped (see :attr:`stop`).",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Animation"
        ],
        "parametters": [
            "self",
            "widget",
            "prop"
        ],
        "prefix_kv": "stop_property: ",
        "prefix_py": "stop_property=()"
    },
    "transition": {
        "name": "transition",
        "type": "property",
        "help": "Return the transition of the animation.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Animation",
            "ScreenManager"
        ],
        "prefix_kv": "transition: ",
        "prefix_py": "transition="
    },
    "BooleanProperty": {
        "name": "BooleanProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BooleanProperty: ",
        "prefix_py": "BooleanProperty="
    },
    "defaultvalue": {
        "name": "defaultvalue",
        "type": "getset_descriptor",
        "help": "defaultvalue: object",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty"
        ],
        "prefix_kv": "defaultvalue: ",
        "prefix_py": "defaultvalue="
    },
    "get": {
        "name": "get",
        "type": "cython_function_or_method",
        "help": "Property.get(self, EventDispatcher obj)\nReturn the value of the property.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "Cache",
            "BoundedNumericProperty",
            "defaultdict",
            "ObservableDict",
            "nodeclass",
            "role_doc",
            "role_video",
            "Context",
            "Matrix",
            "ConfigParser"
        ],
        "prefix_kv": "get",
        "prefix_py": "get."
    },
    "link": {
        "name": "link",
        "type": "cython_function_or_method",
        "help": "Property.link(self, EventDispatcher obj, unicode name) -> PropertyStorage\nLink the instance with its real name.\n\n        .. warning::\n\n            Internal usage only.\n\n        When a widget is defined and uses a :class:`Property` class, the\n        creation of the property object happens, but the instance doesn't know\n        anything about its name in the widget class::\n\n            class MyWidget(Widget):\n                uid = NumericProperty(0)\n\n        In this example, the uid will be a NumericProperty() instance, but the\n        property instance doesn't know its name. That's why :meth:`link` is\n        used in `Widget.__new__`. The link function is also used to create the\n        storage space of the property for this specific widget instance.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty"
        ],
        "prefix_kv": "link",
        "prefix_py": "link."
    },
    "link_deps": {
        "name": "link_deps",
        "type": "cython_function_or_method",
        "help": "Property.link_deps(self, EventDispatcher obj, unicode name)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty"
        ],
        "prefix_kv": "link_deps",
        "prefix_py": "link_deps."
    },
    "link_eagerly": {
        "name": "link_eagerly",
        "type": "cython_function_or_method",
        "help": "Property.link_eagerly(self, EventDispatcher obj) -> PropertyStorage",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty"
        ],
        "prefix_kv": "link_eagerly",
        "prefix_py": "link_eagerly."
    },
    "name": {
        "name": "name",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BBCodeFormatter",
            "BoundedNumericProperty",
            "Screen",
            "ConfigParser"
        ],
        "prefix_kv": "name: ",
        "prefix_py": "name="
    },
    "set": {
        "name": "set",
        "type": "cython_function_or_method",
        "help": "Property.set(self, EventDispatcher obj, value)\nSet a new value for the property.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty",
            "Matrix",
            "ConfigParser"
        ],
        "prefix_kv": "set",
        "prefix_py": "set."
    },
    "set_name": {
        "name": "set_name",
        "type": "cython_function_or_method",
        "help": "Property.set_name(self, EventDispatcher obj, unicode name)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BooleanProperty",
            "DictProperty",
            "ListProperty",
            "NumericProperty",
            "ObjectProperty",
            "OptionProperty",
            "StringProperty",
            "AliasProperty",
            "ColorProperty",
            "VariableListProperty",
            "ReferenceListProperty",
            "BoundedNumericProperty"
        ],
        "prefix_kv": "set_name",
        "prefix_py": "set_name."
    },
    "DictProperty": {
        "name": "DictProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "DictProperty: ",
        "prefix_py": "DictProperty="
    },
    "rebind": {
        "name": "rebind",
        "type": "getset_descriptor",
        "help": "rebind: 'int'",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DictProperty",
            "ObjectProperty",
            "AliasProperty"
        ],
        "prefix_kv": "rebind: ",
        "prefix_py": "rebind="
    },
    "FloatLayout": {
        "name": "FloatLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.accordion import FloatLayout",
        "help": "Float layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FloatLayout:\n    ",
        "prefix_py": "FloatLayout()"
    },
    "ListProperty": {
        "name": "ListProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ListProperty: ",
        "prefix_py": "ListProperty="
    },
    "NumericProperty": {
        "name": "NumericProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "NumericProperty: ",
        "prefix_py": "NumericProperty="
    },
    "_dpi_callback": {
        "name": "_dpi_callback",
        "type": "cython_function_or_method",
        "help": "NumericProperty._dpi_callback(self, obj, _obj, _value)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "NumericProperty",
            "VariableListProperty"
        ],
        "prefix_kv": "_dpi_callback",
        "prefix_py": "_dpi_callback."
    },
    "get_format": {
        "name": "get_format",
        "type": "cython_function_or_method",
        "help": "NumericProperty.get_format(self, EventDispatcher obj)\n\nReturn the format used for Numeric calculation. Default is px (mean\nthe value have not been changed at all). Otherwise, it can be one of\n'in', 'pt', 'cm', 'mm'.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "NumericProperty"
        ],
        "prefix_kv": "get_format",
        "prefix_py": "get_format."
    },
    "ObjectProperty": {
        "name": "ObjectProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ObjectProperty: ",
        "prefix_py": "ObjectProperty="
    },
    "OptionProperty": {
        "name": "OptionProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "OptionProperty: ",
        "prefix_py": "OptionProperty="
    },
    "options": {
        "name": "options",
        "type": "getset_descriptor",
        "help": "Return the options available.\n\n.. versionadded:: 1.0.9",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "OptionProperty",
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstVideoPlayer",
            "VideoPlayer",
            "ConfigParser",
            "SettingOptions",
            "Video"
        ],
        "prefix_kv": "options: ",
        "prefix_py": "options="
    },
    "StringProperty": {
        "name": "StringProperty",
        "type": "type",
        "import": "from kivy.uix.accordion import StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "StringProperty: ",
        "prefix_py": "StringProperty="
    },
    "Widget": {
        "name": "Widget",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.accordion import Widget",
        "help": "Widget class. See module documentation for more information.\n\n:Events:\n    `on_touch_down`: `(touch, )`\n        Fired when a new touch event occurs. `touch` is the touch object.\n    `on_touch_move`: `(touch, )`\n        Fired when an existing touch moves. `touch` is the touch object.\n    `on_touch_up`: `(touch, )`\n        Fired when an existing touch disappears. `touch` is the touch\n        object.\n    `on_kv_post`: `(base_widget, )`\n        Fired after all the kv rules associated with the widget\n        and all other widgets that are in any of those rules have had\n        all their kv rules applied. `base_widget` is the base-most widget\n        whose instantiation triggered the kv rules (i.e. the widget\n        instantiated from Python, e.g. ``MyWidget()``).\n\n        .. versionchanged:: 1.11.0\n\n.. warning::\n    Adding a `__del__` method to a class derived from Widget with Python\n    prior to 3.4 will disable automatic garbage collection for instances\n    of that class. This is because the Widget class creates reference\n    cycles, thereby `preventing garbage collection\n    <https://docs.python.org/2/library/gc.html#gc.garbage>`_.\n\n.. versionchanged:: 1.0.9\n    Everything related to event properties has been moved to the\n    :class:`~kivy.event.EventDispatcher`. Event properties can now be used\n    when constructing a simple class without subclassing :class:`Widget`.\n\n.. versionchanged:: 1.5.0\n    The constructor now accepts on_* arguments to automatically bind\n    callbacks to properties or events, as in the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Widget:\n    ",
        "prefix_py": "Widget()"
    },
    "ActionBar": {
        "name": "ActionBar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionBar",
        "help": "ActionBar class, which acts as the main container for an\n:class:`ActionView` instance. The ActionBar determines the overall\nstyling aspects of the bar. :class:`ActionItem`\\s are not added to\nthis class directly, but to the contained :class:`ActionView` instance.\n\n:Events:\n    `on_previous`\n        Fired when action_previous of action_view is pressed.\n\nPlease see the module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionBar:\n    ",
        "prefix_py": "ActionBar()"
    },
    "_iterate_layout": {
        "name": "_iterate_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "sizes"
        ],
        "prefix_kv": "_iterate_layout: ",
        "prefix_py": "_iterate_layout=()"
    },
    "_pop_contextual_action_view": {
        "name": "_pop_contextual_action_view",
        "type": "function",
        "help": "Remove the current ContextualActionView and display either the\nprevious one or the ActionView.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionBar"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_pop_contextual_action_view: ",
        "prefix_py": "_pop_contextual_action_view=()"
    },
    "action_view": {
        "name": "action_view",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar"
        ],
        "prefix_kv": "action_view: ",
        "prefix_py": "action_view="
    },
    "background_color": {
        "name": "background_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionButton",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "ActionView",
            "Button",
            "ContextualActionView",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "BubbleContent",
            "CodeInput",
            "TextInput",
            "EffectWidget",
            "ModalView",
            "Popup",
            "RstDocument",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanel",
            "TabbedPanelItem",
            "VKeyboard"
        ],
        "prefix_kv": "background_color: ",
        "prefix_py": "background_color=()"
    },
    "background_image": {
        "name": "background_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionSeparator",
            "ActionView",
            "ContextualActionView",
            "BubbleContent",
            "StripLayout",
            "TabbedPanel"
        ],
        "prefix_kv": "background_image: ''",
        "prefix_py": "background_image=''"
    },
    "border": {
        "name": "border",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionButton",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "BubbleContent",
            "CodeInput",
            "TextInput",
            "ModalView",
            "PageLayout",
            "Popup",
            "TabbedPanelHeader",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelItem",
            "BorderImage"
        ],
        "prefix_kv": "border: ()",
        "prefix_py": "border=()"
    },
    "minimum_height": {
        "name": "minimum_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "CodeInput",
            "TextInput",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "TreeView"
        ],
        "prefix_kv": "minimum_height: ",
        "prefix_py": "minimum_height="
    },
    "minimum_size": {
        "name": "minimum_size",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "TreeView"
        ],
        "prefix_kv": "minimum_size: ()",
        "prefix_py": "minimum_size=()"
    },
    "minimum_width": {
        "name": "minimum_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "TreeView"
        ],
        "prefix_kv": "minimum_width: ",
        "prefix_py": "minimum_width="
    },
    "on_previous": {
        "name": "on_previous",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionBar"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_previous: ",
        "prefix_py": "on_previous=()"
    },
    "padding": {
        "name": "padding",
        "type": "VariableListProperty",
        "help": "VariableListProperty(defaultvalue=None, length=4, **kw)\nA ListProperty that allows you to work with a variable amount of\n    list items and to expand them to the desired list size.\n\n    For example, GridLayout's padding used to just accept one numeric value\n    which was applied equally to the left, top, right and bottom of the\n    GridLayout. Now padding can be given one, two or four values, which are\n    expanded into a length four list [left, top, right, bottom] and stored\n    in the property.\n\n    :Parameters:\n        `default`: a default list of values\n            Specifies the default values for the list.\n        `length`: int, one of 2 or 4.\n            Specifies the length of the final list. The `default` list will\n            be expanded to match a list of this length.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Not currently used.\n\n    Keeping in mind that the `default` list is expanded to a list of length 4,\n    here are some examples of how VariableListProperty is handled.\n\n    - VariableListProperty([1]) represents [1, 1, 1, 1].\n    - VariableListProperty([1, 2]) represents [1, 2, 1, 2].\n    - VariableListProperty(['1px', (2, 'px'), 3, 4.0]) represents [1, 2, 3, 4.0].\n    - VariableListProperty(5) represents [5, 5, 5, 5].\n    - VariableListProperty(3, length=2) represents [3, 3].\n\n    .. versionadded:: 1.7.0\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionToggleButton",
            "ActionView",
            "BoxLayout",
            "Button",
            "ContextualActionView",
            "Label",
            "Spinner",
            "ToggleButton",
            "AnchorLayout",
            "Bubble",
            "BubbleButton",
            "BubbleContent",
            "CodeInput",
            "TextInput",
            "GridLayout",
            "ModalView",
            "Popup",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFieldName",
            "RstFootName",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListBullet",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstParagraph",
            "RstSystemMessage",
            "RstTable",
            "RstTerm",
            "RstTitle",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "SettingSidebarLabel",
            "SettingTitle",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "TabbedPanelHeader",
            "Slider",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelItem",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "padding: ",
        "prefix_py": "padding=()"
    },
    "spacing": {
        "name": "spacing",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionBar",
            "ActionPrevious",
            "ActionView",
            "BoxLayout",
            "ContextualActionView",
            "Bubble",
            "BubbleContent",
            "GridLayout",
            "RecycleBoxLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "MenuSpinner",
            "Settings",
            "SettingsPanel",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel",
            "Splitter",
            "StackLayout",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "spacing: ",
        "prefix_py": "spacing="
    },
    "ActionBarException": {
        "name": "ActionBarException",
        "type": "type",
        "import": "from kivy.uix.actionbar import ActionBarException",
        "help": "ActionBarException class",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionBarException: ",
        "prefix_py": "ActionBarException="
    },
    "ActionButton": {
        "name": "ActionButton",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionButton",
        "help": "ActionButton class, see module documentation for more information.\n\nThe text color, width and size_hint_x are set manually via the Kv language\nfile. It covers a lot of cases: with/without an icon, with/without a group\nand takes care of the padding between elements.\n\nYou don't have much control over these properties, so if you want to\ncustomize its appearance, we suggest you create you own button\nrepresentation. You can do this by creating a class that subclasses an\nexisting widget and an :class:`ActionItem`::\n\n    class MyOwnActionButton(Button, ActionItem):\n        pass\n\nYou can then create your own style using the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionButton:\n    ",
        "prefix_py": "ActionButton()"
    },
    "_create_label": {
        "name": "_create_label",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_create_label: ",
        "prefix_py": "_create_label=()"
    },
    "_do_press": {
        "name": "_do_press",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_do_press: ",
        "prefix_py": "_do_press=()"
    },
    "_do_release": {
        "name": "_do_release",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_do_release: ",
        "prefix_py": "_do_release=()"
    },
    "_font_properties": {
        "name": "_font_properties",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "_font_properties: ",
        "prefix_py": "_font_properties="
    },
    "_trigger_texture_update": {
        "name": "_trigger_texture_update",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "parametters": [
            "self",
            "name",
            "source",
            "value"
        ],
        "prefix_kv": "_trigger_texture_update: ",
        "prefix_py": "_trigger_texture_update=()"
    },
    "always_release": {
        "name": "always_release",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "prefix_kv": "always_release: True",
        "prefix_py": "always_release=True"
    },
    "anchors": {
        "name": "anchors",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CoreMarkupLabel",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "anchors: {}",
        "prefix_py": "anchors={}"
    },
    "background_disabled_down": {
        "name": "background_disabled_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem"
        ],
        "prefix_kv": "background_disabled_down: ''",
        "prefix_py": "background_disabled_down=''"
    },
    "background_down": {
        "name": "background_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "Button",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem"
        ],
        "prefix_kv": "background_down: ''",
        "prefix_py": "background_down=''"
    },
    "base_direction": {
        "name": "base_direction",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "base_direction: ''",
        "prefix_py": "base_direction=''"
    },
    "bold": {
        "name": "bold",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "bold: True",
        "prefix_py": "bold=True"
    },
    "cancel_event": {
        "name": "cancel_event",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "cancel_event: ",
        "prefix_py": "cancel_event=()"
    },
    "color": {
        "name": "color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "Image",
            "Camera",
            "ColorPicker",
            "ColorWheel",
            "GestureSurface",
            "AsyncImage",
            "RstAsyncImage",
            "RstFieldName",
            "RstFootName",
            "RstImage",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "color: ",
        "prefix_py": "color=()"
    },
    "disabled_color": {
        "name": "disabled_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "disabled_color: ",
        "prefix_py": "disabled_color=()"
    },
    "disabled_outline_color": {
        "name": "disabled_outline_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "disabled_outline_color: ",
        "prefix_py": "disabled_outline_color=()"
    },
    "ellipsis_options": {
        "name": "ellipsis_options",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "ellipsis_options: {}",
        "prefix_py": "ellipsis_options={}"
    },
    "font_blended": {
        "name": "font_blended",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_blended: True",
        "prefix_py": "font_blended=True"
    },
    "font_context": {
        "name": "font_context",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_context: ''",
        "prefix_py": "font_context=''"
    },
    "font_direction": {
        "name": "font_direction",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_direction: ''",
        "prefix_py": "font_direction=''"
    },
    "font_family": {
        "name": "font_family",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_family: ''",
        "prefix_py": "font_family=''"
    },
    "font_features": {
        "name": "font_features",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_features: ''",
        "prefix_py": "font_features=''"
    },
    "font_hinting": {
        "name": "font_hinting",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_hinting: ''",
        "prefix_py": "font_hinting=''"
    },
    "font_kerning": {
        "name": "font_kerning",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_kerning: True",
        "prefix_py": "font_kerning=True"
    },
    "font_name": {
        "name": "font_name",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "ColorPicker",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation",
            "VKeyboard"
        ],
        "prefix_kv": "font_name: ''",
        "prefix_py": "font_name=''"
    },
    "font_script_name": {
        "name": "font_script_name",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "font_script_name: ''",
        "prefix_py": "font_script_name=''"
    },
    "font_size": {
        "name": "font_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation",
            "VKeyboard"
        ],
        "prefix_kv": "font_size: ",
        "prefix_py": "font_size="
    },
    "get_pack_width": {
        "name": "get_pack_width",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_pack_width: ",
        "prefix_py": "get_pack_width=()"
    },
    "halign": {
        "name": "halign",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "halign: ''",
        "prefix_py": "halign=''"
    },
    "icon": {
        "name": "icon",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionToggleButton"
        ],
        "prefix_kv": "icon: ''",
        "prefix_py": "icon=''"
    },
    "important": {
        "name": "important",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton"
        ],
        "prefix_kv": "important: True",
        "prefix_py": "important=True"
    },
    "inside_group": {
        "name": "inside_group",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton"
        ],
        "prefix_kv": "inside_group: True",
        "prefix_py": "inside_group=True"
    },
    "is_shortened": {
        "name": "is_shortened",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "is_shortened: True",
        "prefix_py": "is_shortened=True"
    },
    "italic": {
        "name": "italic",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "italic: True",
        "prefix_py": "italic=True"
    },
    "last_touch": {
        "name": "last_touch",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "prefix_kv": "last_touch: ",
        "prefix_py": "last_touch="
    },
    "limit_render_to_text_bbox": {
        "name": "limit_render_to_text_bbox",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "limit_render_to_text_bbox: True",
        "prefix_py": "limit_render_to_text_bbox=True"
    },
    "line_height": {
        "name": "line_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "line_height: ",
        "prefix_py": "line_height="
    },
    "markup": {
        "name": "markup",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CoreMarkupLabel",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "markup: True",
        "prefix_py": "markup=True"
    },
    "max_lines": {
        "name": "max_lines",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "max_lines: ",
        "prefix_py": "max_lines="
    },
    "min_state_time": {
        "name": "min_state_time",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionDropDown",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "DropDown",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "prefix_kv": "min_state_time: ",
        "prefix_py": "min_state_time="
    },
    "mipmap": {
        "name": "mipmap",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstFieldName",
            "RstFootName",
            "RstImage",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "Texture",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "mipmap: True",
        "prefix_py": "mipmap=True"
    },
    "on_press": {
        "name": "on_press",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionPrevious",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_press: ",
        "prefix_py": "on_press=()"
    },
    "on_ref_press": {
        "name": "on_ref_press",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstDocument",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "parametters": [
            "self",
            "ref"
        ],
        "prefix_kv": "on_ref_press: ",
        "prefix_py": "on_ref_press=()"
    },
    "on_release": {
        "name": "on_release",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionPrevious",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "TouchRippleButtonBehavior",
            "BubbleButton",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "TabbedPanelHeader",
            "SpinnerOption",
            "Splitter",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_release: ",
        "prefix_py": "on_release=()"
    },
    "outline_color": {
        "name": "outline_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "outline_color: ",
        "prefix_py": "outline_color=()"
    },
    "outline_width": {
        "name": "outline_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "outline_width: ",
        "prefix_py": "outline_width="
    },
    "pack_width": {
        "name": "pack_width",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionItem",
            "ActionLabel",
            "ActionOverflow",
            "ActionPrevious",
            "ActionSeparator",
            "ActionToggleButton"
        ],
        "prefix_kv": "pack_width",
        "prefix_py": "pack_width."
    },
    "padding_x": {
        "name": "padding_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "padding_x: ",
        "prefix_py": "padding_x="
    },
    "padding_y": {
        "name": "padding_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "padding_y: ",
        "prefix_py": "padding_y="
    },
    "refs": {
        "name": "refs",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CoreMarkupLabel",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "refs: {}",
        "prefix_py": "refs={}"
    },
    "shorten": {
        "name": "shorten",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "shorten: True",
        "prefix_py": "shorten=True"
    },
    "shorten_from": {
        "name": "shorten_from",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "shorten_from: ''",
        "prefix_py": "shorten_from=''"
    },
    "split_str": {
        "name": "split_str",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "split_str: ''",
        "prefix_py": "split_str=''"
    },
    "state": {
        "name": "state",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "RstVideoPlayer",
            "VideoPlayer",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "CoreVideo",
            "Video"
        ],
        "prefix_kv": "state: ''",
        "prefix_py": "state=''"
    },
    "strikethrough": {
        "name": "strikethrough",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "strikethrough: True",
        "prefix_py": "strikethrough=True"
    },
    "strip": {
        "name": "strip",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "string_types",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "text_type",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "strip: True",
        "prefix_py": "strip=True"
    },
    "text": {
        "name": "text",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstDocument",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTerm",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "text: ''",
        "prefix_py": "text=''"
    },
    "text_language": {
        "name": "text_language",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CodeInput",
            "TextInput",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "text_language: ''",
        "prefix_py": "text_language=''"
    },
    "text_size": {
        "name": "text_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "text_size: ()",
        "prefix_py": "text_size=()"
    },
    "texture": {
        "name": "texture",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "Ellipse",
            "BubbleButton",
            "Image",
            "Camera",
            "Mesh",
            "EffectFbo",
            "EffectWidget",
            "Fbo",
            "Rectangle",
            "Line",
            "AsyncImage",
            "CoreImage",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstAsyncImage",
            "RstFieldName",
            "RstFootName",
            "RstImage",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "BindTexture",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "TreeViewLabel",
            "CoreVideo",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage"
        ],
        "prefix_kv": "texture: ",
        "prefix_py": "texture="
    },
    "texture_size": {
        "name": "texture_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstFieldName",
            "RstFootName",
            "RstImage",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "texture_size: ()",
        "prefix_py": "texture_size=()"
    },
    "texture_update": {
        "name": "texture_update",
        "type": "function",
        "help": "Force texture recreation with the current Label properties.\n\nAfter this function call, the :attr:`texture` and :attr:`texture_size`\nwill be updated in this order.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstFieldName",
            "RstFootName",
            "RstImage",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector",
            "TreeViewLabel",
            "Video",
            "VideoPlayerAnnotation",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "texture_update: ",
        "prefix_py": "texture_update=()"
    },
    "trigger_action": {
        "name": "trigger_action",
        "type": "function",
        "help": "Trigger whatever action(s) have been bound to the button by calling\nboth the on_press and on_release callbacks.\n\nThis is similar to a quick button press without using any touch events,\nbut note that like most kivy code, this is not guaranteed to be safe to\ncall from external threads. If needed use\n:class:`Clock <kivy.clock.Clock>` to safely schedule this function and\nthe resulting callbacks to be called from the main thread.\n\nDuration is the length of the press in seconds. Pass 0 if you want\nthe action to happen instantly.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionButton",
            "ActionCheck",
            "ActionGroup",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "CheckBox",
            "Spinner",
            "ToggleButton",
            "ButtonBehavior",
            "ToggleButtonBehavior",
            "BubbleButton",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "Selector"
        ],
        "parametters": [
            "self",
            "duration"
        ],
        "prefix_kv": "trigger_action: ",
        "prefix_py": "trigger_action=()"
    },
    "underline": {
        "name": "underline",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "underline: True",
        "prefix_py": "underline=True"
    },
    "unicode_errors": {
        "name": "unicode_errors",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "unicode_errors: ''",
        "prefix_py": "unicode_errors=''"
    },
    "valign": {
        "name": "valign",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionButton",
            "ActionGroup",
            "ActionLabel",
            "ActionOverflow",
            "ActionToggleButton",
            "Button",
            "Label",
            "Spinner",
            "ToggleButton",
            "BubbleButton",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTitle",
            "SettingSidebarLabel",
            "SettingTitle",
            "TabbedPanelHeader",
            "SpinnerOption",
            "SplitterStrip",
            "TabbedPanelItem",
            "TreeViewLabel",
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "valign: ''",
        "prefix_py": "valign=''"
    },
    "ActionCheck": {
        "name": "ActionCheck",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionCheck",
        "help": "ActionCheck class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionCheck:\n    ",
        "prefix_py": "ActionCheck()"
    },
    "_ToggleButtonBehavior__groups": {
        "name": "_ToggleButtonBehavior__groups",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "prefix_kv": "_ToggleButtonBehavior__groups: {}",
        "prefix_py": "_ToggleButtonBehavior__groups={}"
    },
    "_clear_groups": {
        "name": "_clear_groups",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "parametters": [
            "wk"
        ],
        "prefix_kv": "_clear_groups: ",
        "prefix_py": "_clear_groups=()"
    },
    "_get_active": {
        "name": "_get_active",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_active: ",
        "prefix_py": "_get_active=()"
    },
    "_on_state": {
        "name": "_on_state",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_on_state: ",
        "prefix_py": "_on_state=()"
    },
    "_release_group": {
        "name": "_release_group",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "parametters": [
            "self",
            "current"
        ],
        "prefix_kv": "_release_group: ",
        "prefix_py": "_release_group=()"
    },
    "_set_active": {
        "name": "_set_active",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_active: ",
        "prefix_py": "_set_active=()"
    },
    "active": {
        "name": "active",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox",
            "GestureContainer",
            "Switch"
        ],
        "prefix_kv": "active",
        "prefix_py": "active."
    },
    "allow_no_selection": {
        "name": "allow_no_selection",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "prefix_kv": "allow_no_selection: True",
        "prefix_py": "allow_no_selection=True"
    },
    "background_checkbox_disabled_down": {
        "name": "background_checkbox_disabled_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_checkbox_disabled_down: ''",
        "prefix_py": "background_checkbox_disabled_down=''"
    },
    "background_checkbox_disabled_normal": {
        "name": "background_checkbox_disabled_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_checkbox_disabled_normal: ''",
        "prefix_py": "background_checkbox_disabled_normal=''"
    },
    "background_checkbox_down": {
        "name": "background_checkbox_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_checkbox_down: ''",
        "prefix_py": "background_checkbox_down=''"
    },
    "background_checkbox_normal": {
        "name": "background_checkbox_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_checkbox_normal: ''",
        "prefix_py": "background_checkbox_normal=''"
    },
    "background_radio_disabled_down": {
        "name": "background_radio_disabled_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_radio_disabled_down: ''",
        "prefix_py": "background_radio_disabled_down=''"
    },
    "background_radio_disabled_normal": {
        "name": "background_radio_disabled_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_radio_disabled_normal: ''",
        "prefix_py": "background_radio_disabled_normal=''"
    },
    "background_radio_down": {
        "name": "background_radio_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_radio_down: ''",
        "prefix_py": "background_radio_down=''"
    },
    "background_radio_normal": {
        "name": "background_radio_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "CheckBox"
        ],
        "prefix_kv": "background_radio_normal: ''",
        "prefix_py": "background_radio_normal=''"
    },
    "get_widgets": {
        "name": "get_widgets",
        "type": "function",
        "help": "Return a list of the widgets contained in a specific group. If the\ngroup doesn't exist, an empty list will be returned.\n\n.. note::\n\n    Always release the result of this method! Holding a reference to\n    any of these widgets can prevent them from being garbage collected.\n    If in doubt, do::\n\n        l = ToggleButtonBehavior.get_widgets('mygroup')\n        # do your job\n        del l\n\n.. warning::\n\n    It's possible that some widgets that you have previously\n    deleted are still in the list. The garbage collector might need\n    to release other objects before flushing them.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "parametters": [
            "groupname"
        ],
        "prefix_kv": "get_widgets: ",
        "prefix_py": "get_widgets=()"
    },
    "group": {
        "name": "group",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "CanvasBase",
            "Color",
            "Ellipse",
            "ScissorPop",
            "ScissorPush",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ClearBuffers",
            "ClearColor",
            "EffectFbo",
            "Fbo",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "Translate",
            "Line",
            "BindTexture",
            "Callback",
            "Scale",
            "TabbedPanelHeader",
            "TabbedPanelItem",
            "Transform",
            "BorderImage",
            "Canvas"
        ],
        "prefix_kv": "group: ",
        "prefix_py": "group="
    },
    "on_group": {
        "name": "on_group",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionCheck",
            "ActionToggleButton",
            "CheckBox",
            "ToggleButton",
            "ToggleButtonBehavior",
            "TabbedPanelHeader",
            "TabbedPanelItem"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "on_group: ",
        "prefix_py": "on_group=()"
    },
    "ActionDropDown": {
        "name": "ActionDropDown",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionDropDown",
        "help": "ActionDropDown class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionDropDown:\n    ",
        "prefix_py": "ActionDropDown()"
    },
    "_bar_color": {
        "name": "_bar_color",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_bar_color: ()",
        "prefix_py": "_bar_color=()"
    },
    "_bind_inactive_bar_color": {
        "name": "_bind_inactive_bar_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_bind_inactive_bar_color: ",
        "prefix_py": "_bind_inactive_bar_color=()"
    },
    "_bind_inactive_bar_color_ev": {
        "name": "_bind_inactive_bar_color_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_bind_inactive_bar_color_ev: ",
        "prefix_py": "_bind_inactive_bar_color_ev=()"
    },
    "_change_bar_color": {
        "name": "_change_bar_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "inst",
            "value"
        ],
        "prefix_kv": "_change_bar_color: ",
        "prefix_py": "_change_bar_color=()"
    },
    "_change_touch_mode": {
        "name": "_change_touch_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "DragBehavior",
            "Carousel",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_change_touch_mode: ",
        "prefix_py": "_change_touch_mode=()"
    },
    "_do_touch_up": {
        "name": "_do_touch_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "DragBehavior",
            "Carousel",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "touch",
            "largs"
        ],
        "prefix_kv": "_do_touch_up: ",
        "prefix_py": "_do_touch_up=()"
    },
    "_effect_x_start_width": {
        "name": "_effect_x_start_width",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_effect_x_start_width: ",
        "prefix_py": "_effect_x_start_width=()"
    },
    "_effect_y_start_height": {
        "name": "_effect_y_start_height",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_effect_y_start_height: ",
        "prefix_py": "_effect_y_start_height=()"
    },
    "_get_do_scroll": {
        "name": "_get_do_scroll",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_do_scroll: ",
        "prefix_py": "_get_do_scroll=()"
    },
    "_get_hbar": {
        "name": "_get_hbar",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_hbar: ",
        "prefix_py": "_get_hbar=()"
    },
    "_get_uid": {
        "name": "_get_uid",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "DragBehavior",
            "Carousel",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "prefix"
        ],
        "prefix_kv": "_get_uid: ",
        "prefix_py": "_get_uid=()"
    },
    "_get_vbar": {
        "name": "_get_vbar",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_vbar: ",
        "prefix_py": "_get_vbar=()"
    },
    "_real_dismiss": {
        "name": "_real_dismiss",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_real_dismiss: ",
        "prefix_py": "_real_dismiss=()"
    },
    "_reposition": {
        "name": "_reposition",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_reposition: ",
        "prefix_py": "_reposition=()"
    },
    "_set_do_scroll": {
        "name": "_set_do_scroll",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_do_scroll: ",
        "prefix_py": "_set_do_scroll=()"
    },
    "_set_viewport_size": {
        "name": "_set_viewport_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_set_viewport_size: ",
        "prefix_py": "_set_viewport_size=()"
    },
    "_touch_in_handle": {
        "name": "_touch_in_handle",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "pos",
            "size",
            "touch"
        ],
        "prefix_kv": "_touch_in_handle: ",
        "prefix_py": "_touch_in_handle=()"
    },
    "_touch_started_inside": {
        "name": "_touch_started_inside",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "_touch_started_inside: ",
        "prefix_py": "_touch_started_inside=()"
    },
    "_update_effect_bounds": {
        "name": "_update_effect_bounds",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_bounds: ",
        "prefix_py": "_update_effect_bounds=()"
    },
    "_update_effect_bounds_ev": {
        "name": "_update_effect_bounds_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_update_effect_bounds_ev: ",
        "prefix_py": "_update_effect_bounds_ev=()"
    },
    "_update_effect_widget": {
        "name": "_update_effect_widget",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_widget: ",
        "prefix_py": "_update_effect_widget=()"
    },
    "_update_effect_x": {
        "name": "_update_effect_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_x: ",
        "prefix_py": "_update_effect_x=()"
    },
    "_update_effect_x_bounds": {
        "name": "_update_effect_x_bounds",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_x_bounds: ",
        "prefix_py": "_update_effect_x_bounds=()"
    },
    "_update_effect_y": {
        "name": "_update_effect_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_y: ",
        "prefix_py": "_update_effect_y=()"
    },
    "_update_effect_y_bounds": {
        "name": "_update_effect_y_bounds",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_effect_y_bounds: ",
        "prefix_py": "_update_effect_y_bounds=()"
    },
    "_viewport": {
        "name": "_viewport",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "_viewport: ",
        "prefix_py": "_viewport="
    },
    "always_overscroll": {
        "name": "always_overscroll",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "always_overscroll: True",
        "prefix_py": "always_overscroll=True"
    },
    "attach_to": {
        "name": "attach_to",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "attach_to: ",
        "prefix_py": "attach_to="
    },
    "auto_dismiss": {
        "name": "auto_dismiss",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "auto_dismiss: True",
        "prefix_py": "auto_dismiss=True"
    },
    "auto_width": {
        "name": "auto_width",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "prefix_kv": "auto_width: True",
        "prefix_py": "auto_width=True"
    },
    "bar_color": {
        "name": "bar_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_color: ",
        "prefix_py": "bar_color=()"
    },
    "bar_inactive_color": {
        "name": "bar_inactive_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_inactive_color: ",
        "prefix_py": "bar_inactive_color=()"
    },
    "bar_margin": {
        "name": "bar_margin",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_margin: ",
        "prefix_py": "bar_margin="
    },
    "bar_pos": {
        "name": "bar_pos",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_pos: ()",
        "prefix_py": "bar_pos=()"
    },
    "bar_pos_x": {
        "name": "bar_pos_x",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_pos_x: ''",
        "prefix_py": "bar_pos_x=''"
    },
    "bar_pos_y": {
        "name": "bar_pos_y",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "bar_pos_y: ''",
        "prefix_py": "bar_pos_y=''"
    },
    "bar_width": {
        "name": "bar_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "TabbedPanel"
        ],
        "prefix_kv": "bar_width: ",
        "prefix_py": "bar_width="
    },
    "convert_distance_to_scroll": {
        "name": "convert_distance_to_scroll",
        "type": "function",
        "help": "Convert a distance in pixels to a scroll distance, depending on the\ncontent size and the scrollview size.\n\nThe result will be a tuple of scroll distance that can be added to\n:data:`scroll_x` and :data:`scroll_y`",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "dx",
            "dy"
        ],
        "prefix_kv": "convert_distance_to_scroll: ",
        "prefix_py": "convert_distance_to_scroll=()"
    },
    "dismiss": {
        "name": "dismiss",
        "type": "function",
        "help": "Remove the dropdown widget from the window and detach it from\nthe attached widget.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "dismiss: ",
        "prefix_py": "dismiss=()"
    },
    "dismiss_on_select": {
        "name": "dismiss_on_select",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "prefix_kv": "dismiss_on_select: True",
        "prefix_py": "dismiss_on_select=True"
    },
    "do_scroll": {
        "name": "do_scroll",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "do_scroll",
        "prefix_py": "do_scroll."
    },
    "do_scroll_x": {
        "name": "do_scroll_x",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "do_scroll_x: True",
        "prefix_py": "do_scroll_x=True"
    },
    "do_scroll_y": {
        "name": "do_scroll_y",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "do_scroll_y: True",
        "prefix_py": "do_scroll_y=True"
    },
    "effect_cls": {
        "name": "effect_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "effect_cls: ",
        "prefix_py": "effect_cls="
    },
    "effect_x": {
        "name": "effect_x",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "effect_x: ",
        "prefix_py": "effect_x="
    },
    "effect_y": {
        "name": "effect_y",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "effect_y: ",
        "prefix_py": "effect_y="
    },
    "hbar": {
        "name": "hbar",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "hbar",
        "prefix_py": "hbar."
    },
    "max_height": {
        "name": "max_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "prefix_kv": "max_height: ",
        "prefix_py": "max_height="
    },
    "on__viewport": {
        "name": "on__viewport",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on__viewport: ",
        "prefix_py": "on__viewport=()"
    },
    "on_container": {
        "name": "on_container",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_container: ",
        "prefix_py": "on_container=()"
    },
    "on_dismiss": {
        "name": "on_dismiss",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_dismiss: ",
        "prefix_py": "on_dismiss=()"
    },
    "on_effect_cls": {
        "name": "on_effect_cls",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "instance",
            "cls"
        ],
        "prefix_kv": "on_effect_cls: ",
        "prefix_py": "on_effect_cls=()"
    },
    "on_effect_x": {
        "name": "on_effect_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_effect_x: ",
        "prefix_py": "on_effect_x=()"
    },
    "on_effect_y": {
        "name": "on_effect_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_effect_y: ",
        "prefix_py": "on_effect_y=()"
    },
    "on_key_down": {
        "name": "on_key_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "instance",
            "key",
            "scancode",
            "codepoint",
            "modifiers"
        ],
        "prefix_kv": "on_key_down: ",
        "prefix_py": "on_key_down=()"
    },
    "on_scroll_move": {
        "name": "on_scroll_move",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_scroll_move: ",
        "prefix_py": "on_scroll_move=()"
    },
    "on_scroll_start": {
        "name": "on_scroll_start",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "touch",
            "check_children"
        ],
        "prefix_kv": "on_scroll_start: ",
        "prefix_py": "on_scroll_start=()"
    },
    "on_scroll_stop": {
        "name": "on_scroll_stop",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "touch",
            "check_children"
        ],
        "prefix_kv": "on_scroll_stop: ",
        "prefix_py": "on_scroll_stop=()"
    },
    "on_select": {
        "name": "on_select",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown"
        ],
        "parametters": [
            "self",
            "data"
        ],
        "prefix_kv": "on_select: ",
        "prefix_py": "on_select=()"
    },
    "open": {
        "name": "open",
        "type": "function",
        "help": "Open the dropdown list and attach it to a specific widget.\nDepending on the position of the widget within the window and\nthe height of the dropdown, the dropdown might be above or below\nthat widget.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self",
            "widget"
        ],
        "prefix_kv": "open: ",
        "prefix_py": "open=()"
    },
    "scroll_distance": {
        "name": "scroll_distance",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "Carousel",
            "CodeInput",
            "TextInput",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "scroll_distance: ",
        "prefix_py": "scroll_distance="
    },
    "scroll_timeout": {
        "name": "scroll_timeout",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "Carousel",
            "CodeInput",
            "TextInput",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "scroll_timeout: ",
        "prefix_py": "scroll_timeout="
    },
    "scroll_to": {
        "name": "scroll_to",
        "type": "function",
        "help": "Scrolls the viewport to ensure that the given widget is visible,\noptionally with padding and animation. If animate is True (the\ndefault), then the default animation parameters will be used.\nOtherwise, it should be a dict containing arguments to pass to\n:class:`~kivy.animation.Animation` constructor.\n\n.. versionadded:: 1.9.1",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "widget",
            "padding",
            "animate"
        ],
        "prefix_kv": "scroll_to: ",
        "prefix_py": "scroll_to=()"
    },
    "scroll_type": {
        "name": "scroll_type",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu",
            "TabbedPanel"
        ],
        "prefix_kv": "scroll_type: ''",
        "prefix_py": "scroll_type=''"
    },
    "scroll_wheel_distance": {
        "name": "scroll_wheel_distance",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "scroll_wheel_distance: ",
        "prefix_py": "scroll_wheel_distance="
    },
    "scroll_x": {
        "name": "scroll_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "CodeInput",
            "TextInput",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "scroll_x: ",
        "prefix_py": "scroll_x="
    },
    "scroll_y": {
        "name": "scroll_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "CodeInput",
            "TextInput",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "scroll_y: ",
        "prefix_py": "scroll_y="
    },
    "simulate_touch_down": {
        "name": "simulate_touch_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "simulate_touch_down: ",
        "prefix_py": "simulate_touch_down=()"
    },
    "smooth_scroll_end": {
        "name": "smooth_scroll_end",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "smooth_scroll_end: ",
        "prefix_py": "smooth_scroll_end="
    },
    "update_from_scroll": {
        "name": "update_from_scroll",
        "type": "function",
        "help": "Force the reposition of the content, according to current value of\n:attr:`scroll_x` and :attr:`scroll_y`.\n\nThis method is automatically called when one of the :attr:`scroll_x`,\n:attr:`scroll_y`, :attr:`pos` or :attr:`size` properties change, or\nif the size of the content changes.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "update_from_scroll: ",
        "prefix_py": "update_from_scroll=()"
    },
    "vbar": {
        "name": "vbar",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "vbar",
        "prefix_py": "vbar."
    },
    "viewport_size": {
        "name": "viewport_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionDropDown",
            "DropDown",
            "ScrollView",
            "RecycleView",
            "RstDocument",
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "viewport_size: ()",
        "prefix_py": "viewport_size=()"
    },
    "ActionGroup": {
        "name": "ActionGroup",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionGroup",
        "help": "ActionGroup class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionGroup:\n    ",
        "prefix_py": "ActionGroup()"
    },
    "_toggle_dropdown": {
        "name": "_toggle_dropdown",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionGroup",
            "ActionOverflow",
            "Spinner"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_toggle_dropdown: ",
        "prefix_py": "_toggle_dropdown=()"
    },
    "dropdown_width": {
        "name": "dropdown_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow"
        ],
        "prefix_kv": "dropdown_width: ",
        "prefix_py": "dropdown_width="
    },
    "is_open": {
        "name": "is_open",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow",
            "Spinner",
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "is_open: True",
        "prefix_py": "is_open=True"
    },
    "mode": {
        "name": "mode",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow",
            "Mesh",
            "CardTransition"
        ],
        "prefix_kv": "mode: ''",
        "prefix_py": "mode=''"
    },
    "on_is_open": {
        "name": "on_is_open",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionGroup",
            "ActionOverflow",
            "Spinner"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_is_open: ",
        "prefix_py": "on_is_open=()"
    },
    "separator_image": {
        "name": "separator_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow"
        ],
        "prefix_kv": "separator_image: ''",
        "prefix_py": "separator_image=''"
    },
    "separator_width": {
        "name": "separator_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow"
        ],
        "prefix_kv": "separator_width: ",
        "prefix_py": "separator_width="
    },
    "show_group": {
        "name": "show_group",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionGroup",
            "ActionOverflow"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "show_group: ",
        "prefix_py": "show_group=()"
    },
    "use_separator": {
        "name": "use_separator",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionGroup",
            "ActionOverflow",
            "ActionView",
            "ContextualActionView"
        ],
        "prefix_kv": "use_separator: True",
        "prefix_py": "use_separator=True"
    },
    "ActionItem": {
        "name": "ActionItem",
        "type": "type",
        "import": "from kivy.uix.actionbar import ActionItem",
        "help": "ActionItem class, an abstract class for all ActionBar widgets. To create a\ncustom widget for an ActionBar, inherit from this class. See module\ndocumentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionItem: ",
        "prefix_py": "ActionItem="
    },
    "ActionLabel": {
        "name": "ActionLabel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionLabel",
        "help": "ActionLabel class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionLabel:\n    ",
        "prefix_py": "ActionLabel()"
    },
    "ActionOverflow": {
        "name": "ActionOverflow",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionOverflow",
        "help": "ActionOverflow class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionOverflow:\n    ",
        "prefix_py": "ActionOverflow()"
    },
    "overflow_image": {
        "name": "overflow_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionOverflow"
        ],
        "prefix_kv": "overflow_image: ''",
        "prefix_py": "overflow_image=''"
    },
    "show_default_items": {
        "name": "show_default_items",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionOverflow"
        ],
        "parametters": [
            "self",
            "parent"
        ],
        "prefix_kv": "show_default_items: ",
        "prefix_py": "show_default_items=()"
    },
    "ActionPrevious": {
        "name": "ActionPrevious",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionPrevious",
        "help": "ActionPrevious class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionPrevious:\n    ",
        "prefix_py": "ActionPrevious()"
    },
    "app_icon": {
        "name": "app_icon",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "app_icon: ''",
        "prefix_py": "app_icon=''"
    },
    "app_icon_height": {
        "name": "app_icon_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "app_icon_height: ",
        "prefix_py": "app_icon_height="
    },
    "app_icon_width": {
        "name": "app_icon_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "app_icon_width: ",
        "prefix_py": "app_icon_width="
    },
    "previous_image": {
        "name": "previous_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "previous_image: ''",
        "prefix_py": "previous_image=''"
    },
    "previous_image_height": {
        "name": "previous_image_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "previous_image_height: ",
        "prefix_py": "previous_image_height="
    },
    "previous_image_width": {
        "name": "previous_image_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "previous_image_width: ",
        "prefix_py": "previous_image_width="
    },
    "with_previous": {
        "name": "with_previous",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionPrevious"
        ],
        "prefix_kv": "with_previous: True",
        "prefix_py": "with_previous=True"
    },
    "ActionSeparator": {
        "name": "ActionSeparator",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionSeparator",
        "help": "ActionSeparator class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionSeparator:\n    ",
        "prefix_py": "ActionSeparator()"
    },
    "ActionToggleButton": {
        "name": "ActionToggleButton",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionToggleButton",
        "help": "ActionToggleButton class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionToggleButton:\n    ",
        "prefix_py": "ActionToggleButton()"
    },
    "ActionView": {
        "name": "ActionView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ActionView",
        "help": "ActionView class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ActionView:\n    ",
        "prefix_py": "ActionView()"
    },
    "_clear_all": {
        "name": "_clear_all",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_clear_all: ",
        "prefix_py": "_clear_all=()"
    },
    "_layout_all": {
        "name": "_layout_all",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_layout_all: ",
        "prefix_py": "_layout_all=()"
    },
    "_layout_group": {
        "name": "_layout_group",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_layout_group: ",
        "prefix_py": "_layout_group=()"
    },
    "_layout_random": {
        "name": "_layout_random",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_layout_random: ",
        "prefix_py": "_layout_random=()"
    },
    "action_previous": {
        "name": "action_previous",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "prefix_kv": "action_previous: ",
        "prefix_py": "action_previous="
    },
    "on_action_previous": {
        "name": "on_action_previous",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_action_previous: ",
        "prefix_py": "on_action_previous=()"
    },
    "on_use_separator": {
        "name": "on_use_separator",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_use_separator: ",
        "prefix_py": "on_use_separator=()"
    },
    "on_width": {
        "name": "on_width",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "parametters": [
            "self",
            "width",
            "args"
        ],
        "prefix_kv": "on_width: ",
        "prefix_py": "on_width=()"
    },
    "overflow_group": {
        "name": "overflow_group",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ActionView",
            "ContextualActionView"
        ],
        "prefix_kv": "overflow_group: ",
        "prefix_py": "overflow_group="
    },
    "AliasProperty": {
        "name": "AliasProperty",
        "type": "type",
        "import": "from kivy.uix.actionbar import AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AliasProperty: ",
        "prefix_py": "AliasProperty="
    },
    "_AliasProperty__read_only": {
        "name": "_AliasProperty__read_only",
        "type": "cython_function_or_method",
        "help": "AliasProperty.__read_only(self, _obj, _value)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "AliasProperty"
        ],
        "prefix_kv": "_AliasProperty__read_only",
        "prefix_py": "_AliasProperty__read_only."
    },
    "trigger_change": {
        "name": "trigger_change",
        "type": "cython_function_or_method",
        "help": "AliasProperty.trigger_change(self, EventDispatcher obj, value)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "AliasProperty",
            "ReferenceListProperty"
        ],
        "prefix_kv": "trigger_change",
        "prefix_py": "trigger_change."
    },
    "BoxLayout": {
        "name": "BoxLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import BoxLayout",
        "help": "Box layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BoxLayout:\n    ",
        "prefix_py": "BoxLayout()"
    },
    "Button": {
        "name": "Button",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import Button",
        "help": "Button class, see module documentation for more information.\n\n.. versionchanged:: 1.8.0\n    The behavior / logic of the button has been moved to\n    :class:`~kivy.uix.behaviors.ButtonBehaviors`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Button:\n    ",
        "prefix_py": "Button()"
    },
    "CheckBox": {
        "name": "CheckBox",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import CheckBox",
        "help": "CheckBox class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CheckBox:\n    ",
        "prefix_py": "CheckBox()"
    },
    "ColorProperty": {
        "name": "ColorProperty",
        "type": "type",
        "import": "from kivy.uix.actionbar import ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ColorProperty: ",
        "prefix_py": "ColorProperty="
    },
    "ContextualActionView": {
        "name": "ContextualActionView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ContextualActionView",
        "help": "ContextualActionView class, see the module documentation for more\ninformation.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ContextualActionView:\n    ",
        "prefix_py": "ContextualActionView()"
    },
    "DropDown": {
        "name": "DropDown",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import DropDown",
        "help": "DropDown class. See module documentation for more information.\n\n:Events:\n    `on_select`: data\n        Fired when a selection is done. The data of the selection is passed\n        in as the first argument and is what you pass in the :meth:`select`\n        method as the first argument.\n    `on_dismiss`:\n        .. versionadded:: 1.8.0\n\n        Fired when the DropDown is dismissed, either on selection or on\n        touching outside the widget.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "DropDown:\n    ",
        "prefix_py": "DropDown()"
    },
    "Label": {
        "name": "Label",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import Label",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Label:\n    ",
        "prefix_py": "Label()"
    },
    "Spinner": {
        "name": "Spinner",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import Spinner",
        "help": "Spinner class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Spinner:\n    ",
        "prefix_py": "Spinner()"
    },
    "_build_dropdown": {
        "name": "_build_dropdown",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Spinner"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_build_dropdown: ",
        "prefix_py": "_build_dropdown=()"
    },
    "_close_dropdown": {
        "name": "_close_dropdown",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Spinner"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_close_dropdown: ",
        "prefix_py": "_close_dropdown=()"
    },
    "_on_dropdown_select": {
        "name": "_on_dropdown_select",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Spinner"
        ],
        "parametters": [
            "self",
            "instance",
            "data",
            "largs"
        ],
        "prefix_kv": "_on_dropdown_select: ",
        "prefix_py": "_on_dropdown_select=()"
    },
    "_update_dropdown": {
        "name": "_update_dropdown",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Spinner"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_dropdown: ",
        "prefix_py": "_update_dropdown=()"
    },
    "_update_dropdown_size": {
        "name": "_update_dropdown_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Spinner"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_dropdown_size: ",
        "prefix_py": "_update_dropdown_size=()"
    },
    "dropdown_cls": {
        "name": "dropdown_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Spinner"
        ],
        "prefix_kv": "dropdown_cls: ",
        "prefix_py": "dropdown_cls="
    },
    "option_cls": {
        "name": "option_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Spinner"
        ],
        "prefix_kv": "option_cls: ",
        "prefix_py": "option_cls="
    },
    "sync_height": {
        "name": "sync_height",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Spinner"
        ],
        "prefix_kv": "sync_height: True",
        "prefix_py": "sync_height=True"
    },
    "text_autoupdate": {
        "name": "text_autoupdate",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Spinner"
        ],
        "prefix_kv": "text_autoupdate: True",
        "prefix_py": "text_autoupdate=True"
    },
    "values": {
        "name": "values",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Spinner",
            "defaultdict",
            "ObservableDict",
            "Context",
            "ConfigParser",
            "SettingBoolean"
        ],
        "prefix_kv": "values: ()",
        "prefix_py": "values=()"
    },
    "ToggleButton": {
        "name": "ToggleButton",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.actionbar import ToggleButton",
        "help": "Toggle button class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ToggleButton:\n    ",
        "prefix_py": "ToggleButton()"
    },
    "partial": {
        "name": "partial",
        "type": "type",
        "import": "from kivy.uix.actionbar import partial",
        "help": "partial(func, *args, **keywords) - new function with partial application\nof the given arguments and keywords.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "partial: ",
        "prefix_py": "partial="
    },
    "func": {
        "name": "func",
        "type": "member_descriptor",
        "help": "function object to use in future partial calls",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "partial"
        ],
        "prefix_kv": "func: ",
        "prefix_py": "func="
    },
    "keywords": {
        "name": "keywords",
        "type": "member_descriptor",
        "help": "dictionary of keyword arguments to future partial calls",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "partial"
        ],
        "prefix_kv": "keywords: ",
        "prefix_py": "keywords="
    },
    "AnchorLayout": {
        "name": "AnchorLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.anchorlayout import AnchorLayout",
        "help": "Anchor layout class. See the module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AnchorLayout:\n    ",
        "prefix_py": "AnchorLayout()"
    },
    "anchor_x": {
        "name": "anchor_x",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AnchorLayout",
            "ModalView",
            "Popup",
            "RstTerm"
        ],
        "prefix_kv": "anchor_x: ''",
        "prefix_py": "anchor_x=''"
    },
    "anchor_y": {
        "name": "anchor_y",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AnchorLayout",
            "ModalView",
            "Popup",
            "RstTerm"
        ],
        "prefix_kv": "anchor_y: ''",
        "prefix_py": "anchor_y=''"
    },
    "Layout": {
        "name": "Layout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.anchorlayout import Layout",
        "help": "Layout interface class, used to implement every layout. See module\ndocumentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Layout:\n    ",
        "prefix_py": "Layout()"
    },
    "VariableListProperty": {
        "name": "VariableListProperty",
        "type": "type",
        "import": "from kivy.uix.anchorlayout import VariableListProperty",
        "help": "VariableListProperty(defaultvalue=None, length=4, **kw)\nA ListProperty that allows you to work with a variable amount of\n    list items and to expand them to the desired list size.\n\n    For example, GridLayout's padding used to just accept one numeric value\n    which was applied equally to the left, top, right and bottom of the\n    GridLayout. Now padding can be given one, two or four values, which are\n    expanded into a length four list [left, top, right, bottom] and stored\n    in the property.\n\n    :Parameters:\n        `default`: a default list of values\n            Specifies the default values for the list.\n        `length`: int, one of 2 or 4.\n            Specifies the length of the final list. The `default` list will\n            be expanded to match a list of this length.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Not currently used.\n\n    Keeping in mind that the `default` list is expanded to a list of length 4,\n    here are some examples of how VariableListProperty is handled.\n\n    - VariableListProperty([1]) represents [1, 1, 1, 1].\n    - VariableListProperty([1, 2]) represents [1, 2, 1, 2].\n    - VariableListProperty(['1px', (2, 'px'), 3, 4.0]) represents [1, 2, 3, 4.0].\n    - VariableListProperty(5) represents [5, 5, 5, 5].\n    - VariableListProperty(3, length=2) represents [3, 3].\n\n    .. versionadded:: 1.7.0\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VariableListProperty: ",
        "prefix_py": "VariableListProperty="
    },
    "length": {
        "name": "length",
        "type": "getset_descriptor",
        "help": "length: 'int'",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VariableListProperty",
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Vector",
            "Canvas"
        ],
        "prefix_kv": "length: ",
        "prefix_py": "length="
    },
    "ButtonBehavior": {
        "name": "ButtonBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import ButtonBehavior",
        "help": "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides\n:class:`~kivy.uix.button.Button` behavior. Please see the\n:mod:`button behaviors module <kivy.uix.behaviors.button>` documentation\nfor more information.\n\n:Events:\n    `on_press`\n        Fired when the button is pressed.\n    `on_release`\n        Fired when the button is released (i.e. the touch/click that\n        pressed the button goes away).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ButtonBehavior: ",
        "prefix_py": "ButtonBehavior="
    },
    "CodeNavigationBehavior": {
        "name": "CodeNavigationBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import CodeNavigationBehavior",
        "help": "Code navigation behavior. Modifies the navigation behavior in TextInput\nto work like an IDE instead of a word processor. Please see the\n:mod:`code navigation behaviors module <kivy.uix.behaviors.codenavigation>`\ndocumentation for more information.\n\n.. versionadded:: 1.9.1",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CodeNavigationBehavior: ",
        "prefix_py": "CodeNavigationBehavior="
    },
    "_move_cursor_word_left": {
        "name": "_move_cursor_word_left",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeNavigationBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "index"
        ],
        "prefix_kv": "_move_cursor_word_left: ",
        "prefix_py": "_move_cursor_word_left=()"
    },
    "_move_cursor_word_right": {
        "name": "_move_cursor_word_right",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeNavigationBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "index"
        ],
        "prefix_kv": "_move_cursor_word_right: ",
        "prefix_py": "_move_cursor_word_right=()"
    },
    "CompoundSelectionBehavior": {
        "name": "CompoundSelectionBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import CompoundSelectionBehavior",
        "help": "The Selection behavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_\nimplements the logic behind keyboard and touch\nselection of selectable widgets managed by the derived widget. Please see\nthe :mod:`compound selection behaviors module\n<kivy.uix.behaviors.compoundselection>` documentation\nfor more information.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CompoundSelectionBehavior: ",
        "prefix_py": "CompoundSelectionBehavior="
    },
    "_anchor": {
        "name": "_anchor",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_anchor: ",
        "prefix_py": "_anchor=()"
    },
    "_anchor_idx": {
        "name": "_anchor_idx",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_anchor_idx: ",
        "prefix_py": "_anchor_idx="
    },
    "_ctrl_down": {
        "name": "_ctrl_down",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_ctrl_down: True",
        "prefix_py": "_ctrl_down=True"
    },
    "_key_list": {
        "name": "_key_list",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_key_list: ()",
        "prefix_py": "_key_list=()"
    },
    "_last_key_time": {
        "name": "_last_key_time",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_last_key_time: ",
        "prefix_py": "_last_key_time="
    },
    "_last_node_idx": {
        "name": "_last_node_idx",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_last_node_idx: ",
        "prefix_py": "_last_node_idx="
    },
    "_last_selected_node": {
        "name": "_last_selected_node",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_last_selected_node: ",
        "prefix_py": "_last_selected_node=()"
    },
    "_offset_counts": {
        "name": "_offset_counts",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_offset_counts: {}",
        "prefix_py": "_offset_counts={}"
    },
    "_resolve_last_node": {
        "name": "_resolve_last_node",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_resolve_last_node: ",
        "prefix_py": "_resolve_last_node=()"
    },
    "_select_range": {
        "name": "_select_range",
        "type": "function",
        "help": "Selects a range between self._anchor and node or idx.\nIf multiselect is True, it will be added to the selection, otherwise\nit will unselect everything before selecting the range. This is only\ncalled if self.multiselect is True.\nIf keep anchor is False, the anchor is moved to node. This should\nalways be True for keyboard selection.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "multiselect",
            "keep_anchor",
            "node",
            "idx"
        ],
        "prefix_kv": "_select_range: ",
        "prefix_py": "_select_range=()"
    },
    "_shift_down": {
        "name": "_shift_down",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_shift_down: True",
        "prefix_py": "_shift_down=True"
    },
    "_update_counts": {
        "name": "_update_counts",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_counts: ",
        "prefix_py": "_update_counts=()"
    },
    "_word_filter": {
        "name": "_word_filter",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_word_filter: ''",
        "prefix_py": "_word_filter=''"
    },
    "clear_selection": {
        "name": "clear_selection",
        "type": "function",
        "help": "Deselects all the currently selected nodes.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "clear_selection: ",
        "prefix_py": "clear_selection=()"
    },
    "deselect_node": {
        "name": "deselect_node",
        "type": "function",
        "help": "Deselects a possibly selected node.\n\nIt is called by the controller when it deselects a node and can also\nbe called from the outside to deselect a node directly. The derived\nwidget should overwrite this method and change the node to its\nunselected state when this is called\n\n:Parameters:\n    `node`\n        The node to be deselected.\n\n.. warning::\n\n    This method must be called by the derived widget using super if it\n    is overwritten.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior",
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "deselect_node: ",
        "prefix_py": "deselect_node=()"
    },
    "get_index_of_node": {
        "name": "get_index_of_node",
        "type": "function",
        "help": "(internal) Returns the index of the `node` within the\n`selectable_nodes` returned by :meth:`get_selectable_nodes`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "node",
            "selectable_nodes"
        ],
        "prefix_kv": "get_index_of_node: ",
        "prefix_py": "get_index_of_node=()"
    },
    "get_selectable_nodes": {
        "name": "get_selectable_nodes",
        "type": "function",
        "help": "(internal) Returns a list of the nodes that can be selected. It can\nbe overwritten by the derived widget to return the correct list.\n\nThis list is used to determine which nodes to select with group\nselection. E.g. the last element in the list will be selected when\nhome is pressed, pagedown will move (or add to, if shift is held) the\nselection from the current position by negative :attr:`page_count`\nnodes starting from the position of the currently selected node in\nthis list and so on. Still, nodes can be selected even if they are not\nin this list.\n\n.. note::\n\n    It is safe to dynamically change this list including removing,\n    adding, or re-arranging its elements. Nodes can be selected even\n    if they are not on this list. And selected nodes removed from the\n    list will remain selected until :meth:`deselect_node` is called.\n\n.. warning::\n\n    Layouts display their children in the reverse order. That is, the\n    contents of :attr:`~kivy.uix.widget.Widget.children` is displayed\n    form right to left, bottom to top. Therefore, internally, the\n    indices of the elements returned by this function are reversed to\n    make it work by default for most layouts so that the final result\n    is consistent e.g. home, although it will select the last element\n    in this list visually, will select the first element when\n    counting from top to bottom and left to right. If this behavior is\n    not desired, a reversed list should be returned instead.\n\nDefaults to returning :attr:`~kivy.uix.widget.Widget.children`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_selectable_nodes: ",
        "prefix_py": "get_selectable_nodes=()"
    },
    "goto_node": {
        "name": "goto_node",
        "type": "function",
        "help": "(internal) Used by the controller to get the node at the position\nindicated by key. The key can be keyboard inputs, e.g. pageup,\nor scroll inputs from the mouse scroll wheel, e.g. scrollup.\n'last_node' is the last node selected and is used to find the resulting\nnode. For example, if the key is up, the returned node is one node\nup from the last node.\n\nIt can be overwritten by the derived widget.\n\n:Parameters:\n    `key`\n        str, the string used to find the desired node. It can be any\n        of the keyboard keys, as well as the mouse scrollup,\n        scrolldown, scrollright, and scrollleft strings. If letters\n        are typed in quick succession, the letters will be combined\n        before it's passed in as key and can be used to find nodes that\n        have an associated string that starts with those letters.\n    `last_node`\n        The last node that was selected.\n    `last_node_idx`\n        The cached index of the last node selected in the\n        :meth:`get_selectable_nodes` list. If the list hasn't changed\n        it saves having to look up the index of `last_node` in that\n        list.\n\n:Returns:\n    tuple, the node targeted by key and its index in the\n    :meth:`get_selectable_nodes` list. Returning\n    `(last_node, last_node_idx)` indicates a node wasn't found.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "key",
            "last_node",
            "last_node_idx"
        ],
        "prefix_kv": "goto_node: ",
        "prefix_py": "goto_node=()"
    },
    "keyboard_select": {
        "name": "keyboard_select",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "keyboard_select: True",
        "prefix_py": "keyboard_select=True"
    },
    "multiselect": {
        "name": "multiselect",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "multiselect: True",
        "prefix_py": "multiselect=True"
    },
    "nodes_order_reversed": {
        "name": "nodes_order_reversed",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "nodes_order_reversed: True",
        "prefix_py": "nodes_order_reversed=True"
    },
    "page_count": {
        "name": "page_count",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "page_count: ",
        "prefix_py": "page_count="
    },
    "right_count": {
        "name": "right_count",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "right_count: ",
        "prefix_py": "right_count="
    },
    "scroll_count": {
        "name": "scroll_count",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "scroll_count: ",
        "prefix_py": "scroll_count="
    },
    "select_node": {
        "name": "select_node",
        "type": "function",
        "help": "Selects a node.\n\nIt is called by the controller when it selects a node and can be\ncalled from the outside to select a node directly. The derived widget\nshould overwrite this method and change the node state to selected\nwhen called.\n\n:Parameters:\n    `node`\n        The node to be selected.\n\n:Returns:\n    bool, True if the node was selected, False otherwise.\n\n.. warning::\n\n    This method must be called by the derived widget using super if it\n    is overwritten.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior",
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "select_node: ",
        "prefix_py": "select_node=()"
    },
    "select_with_key_down": {
        "name": "select_with_key_down",
        "type": "function",
        "help": "Processes a key press. This is called when a key press is to be used\nfor selection. Depending on the keyboard keys pressed and the\nconfiguration, it could select or deselect nodes or node ranges\nfrom the selectable nodes list, :meth:`get_selectable_nodes`.\n\nThe parameters are such that it could be bound directly to the\non_key_down event of a keyboard. Therefore, it is safe to be called\nrepeatedly when the key is held down as is done by the keyboard.\n\n:Returns:\n    bool, True if the keypress was used, False otherwise.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "keyboard",
            "scancode",
            "codepoint",
            "modifiers",
            "kwargs"
        ],
        "prefix_kv": "select_with_key_down: ",
        "prefix_py": "select_with_key_down=()"
    },
    "select_with_key_up": {
        "name": "select_with_key_up",
        "type": "function",
        "help": "(internal) Processes a key release. This must be called by the\nderived widget when a key that :meth:`select_with_key_down` returned\nTrue is released.\n\nThe parameters are such that it could be bound directly to the\non_key_up event of a keyboard.\n\n:Returns:\n    bool, True if the key release was used, False otherwise.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "keyboard",
            "scancode",
            "kwargs"
        ],
        "prefix_kv": "select_with_key_up: ",
        "prefix_py": "select_with_key_up=()"
    },
    "select_with_touch": {
        "name": "select_with_touch",
        "type": "function",
        "help": "(internal) Processes a touch on the node. This should be called by\nthe derived widget when a node is touched and is to be used for\nselection. Depending on the keyboard keys pressed and the\nconfiguration, it could select or deslect this and other nodes in the\nselectable nodes list, :meth:`get_selectable_nodes`.\n\n:Parameters:\n    `node`\n        The node that received the touch. Can be None for a scroll\n        type touch.\n    `touch`\n        Optionally, the touch. Defaults to None.\n\n:Returns:\n    bool, True if the touch was used, False otherwise.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "node",
            "touch"
        ],
        "prefix_kv": "select_with_touch: ",
        "prefix_py": "select_with_touch=()"
    },
    "selected_nodes": {
        "name": "selected_nodes",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "selected_nodes: ()",
        "prefix_py": "selected_nodes=()"
    },
    "text_entry_timeout": {
        "name": "text_entry_timeout",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "text_entry_timeout: ",
        "prefix_py": "text_entry_timeout="
    },
    "touch_deselect_last": {
        "name": "touch_deselect_last",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "touch_deselect_last: True",
        "prefix_py": "touch_deselect_last=True"
    },
    "touch_multiselect": {
        "name": "touch_multiselect",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "touch_multiselect: True",
        "prefix_py": "touch_multiselect=True"
    },
    "up_count": {
        "name": "up_count",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CompoundSelectionBehavior",
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "up_count: ",
        "prefix_py": "up_count="
    },
    "CoverBehavior": {
        "name": "CoverBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import CoverBehavior",
        "help": "The CoverBehavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_\nprovides rendering a texture covering full widget size keeping aspect ratio\nof the original texture.\n\n.. versionadded:: 1.10.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CoverBehavior: ",
        "prefix_py": "CoverBehavior="
    },
    "_aspect_ratio_approximate": {
        "name": "_aspect_ratio_approximate",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoverBehavior"
        ],
        "parametters": [
            "self",
            "size"
        ],
        "prefix_kv": "_aspect_ratio_approximate: ",
        "prefix_py": "_aspect_ratio_approximate=()"
    },
    "_scale_size": {
        "name": "_scale_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoverBehavior"
        ],
        "parametters": [
            "self",
            "size",
            "sizer"
        ],
        "prefix_kv": "_scale_size: ",
        "prefix_py": "_scale_size=()"
    },
    "calculate_cover": {
        "name": "calculate_cover",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoverBehavior"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "calculate_cover: ",
        "prefix_py": "calculate_cover=()"
    },
    "cover_pos": {
        "name": "cover_pos",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoverBehavior"
        ],
        "prefix_kv": "cover_pos: ()",
        "prefix_py": "cover_pos=()"
    },
    "cover_size": {
        "name": "cover_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoverBehavior"
        ],
        "prefix_kv": "cover_size: ()",
        "prefix_py": "cover_size=()"
    },
    "reference_size": {
        "name": "reference_size",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoverBehavior"
        ],
        "prefix_kv": "reference_size: ()",
        "prefix_py": "reference_size=()"
    },
    "DragBehavior": {
        "name": "DragBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import DragBehavior",
        "help": "The DragBehavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_ provides\nDrag behavior. When combined with a widget, dragging in the rectangle\ndefined by :attr:`drag_rectangle` will drag the widget. Please see\nthe :mod:`drag behaviors module <kivy.uix.behaviors.drag>` documentation\nfor more information.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "DragBehavior: ",
        "prefix_py": "DragBehavior="
    },
    "drag_distance": {
        "name": "drag_distance",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_distance: ",
        "prefix_py": "drag_distance="
    },
    "drag_rect_height": {
        "name": "drag_rect_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_rect_height: ",
        "prefix_py": "drag_rect_height="
    },
    "drag_rect_width": {
        "name": "drag_rect_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_rect_width: ",
        "prefix_py": "drag_rect_width="
    },
    "drag_rect_x": {
        "name": "drag_rect_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_rect_x: ",
        "prefix_py": "drag_rect_x="
    },
    "drag_rect_y": {
        "name": "drag_rect_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_rect_y: ",
        "prefix_py": "drag_rect_y="
    },
    "drag_rectangle": {
        "name": "drag_rectangle",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_rectangle: ()",
        "prefix_py": "drag_rectangle=()"
    },
    "drag_timeout": {
        "name": "drag_timeout",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DragBehavior"
        ],
        "prefix_kv": "drag_timeout: ",
        "prefix_py": "drag_timeout="
    },
    "EmacsBehavior": {
        "name": "EmacsBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import EmacsBehavior",
        "help": "A `mixin <https://en.wikipedia.org/wiki/Mixin>`_ that enables Emacs-style\nkeyboard shortcuts for the :class:`~kivy.uix.textinput.TextInput` widget.\nPlease see the :mod:`Emacs behaviors module <kivy.uix.behaviors.emacs>`\ndocumentation for more information.\n\n.. versionadded:: 1.9.1",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "EmacsBehavior: ",
        "prefix_py": "EmacsBehavior="
    },
    "delete_word_left": {
        "name": "delete_word_left",
        "type": "function",
        "help": "Delete text left of the cursor to the beginning of word",
        "callable": true,
        "mtype": "function",
        "parent": [
            "EmacsBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "delete_word_left: ",
        "prefix_py": "delete_word_left=()"
    },
    "delete_word_right": {
        "name": "delete_word_right",
        "type": "function",
        "help": "Delete text right of the cursor to the end of the word",
        "callable": true,
        "mtype": "function",
        "parent": [
            "EmacsBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "delete_word_right: ",
        "prefix_py": "delete_word_right=()"
    },
    "key_bindings": {
        "name": "key_bindings",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EmacsBehavior"
        ],
        "prefix_kv": "key_bindings: ''",
        "prefix_py": "key_bindings=''"
    },
    "keyboard_on_key_down": {
        "name": "keyboard_on_key_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "EmacsBehavior",
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "window",
            "keycode",
            "text",
            "modifiers"
        ],
        "prefix_kv": "keyboard_on_key_down: ",
        "prefix_py": "keyboard_on_key_down=()"
    },
    "FocusBehavior": {
        "name": "FocusBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import FocusBehavior",
        "help": "Provides keyboard focus behavior. When combined with other\nFocusBehavior widgets it allows one to cycle focus among them by pressing\ntab. Please see the\n:mod:`focus behavior module documentation <kivy.uix.behaviors.focus>`\nfor more information.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FocusBehavior: ",
        "prefix_py": "FocusBehavior="
    },
    "_bind_keyboard": {
        "name": "_bind_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_bind_keyboard: ",
        "prefix_py": "_bind_keyboard=()"
    },
    "_ensure_keyboard": {
        "name": "_ensure_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_ensure_keyboard: ",
        "prefix_py": "_ensure_keyboard=()"
    },
    "_get_focus_next": {
        "name": "_get_focus_next",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "focus_dir"
        ],
        "prefix_kv": "_get_focus_next: ",
        "prefix_py": "_get_focus_next=()"
    },
    "_get_keyboard": {
        "name": "_get_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_keyboard: ",
        "prefix_py": "_get_keyboard=()"
    },
    "_handle_post_on_touch_up": {
        "name": "_handle_post_on_touch_up",
        "type": "function",
        "help": "Called by window after each touch has finished.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "touch"
        ],
        "prefix_kv": "_handle_post_on_touch_up: ",
        "prefix_py": "_handle_post_on_touch_up=()"
    },
    "_keyboard": {
        "name": "_keyboard",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_keyboard: ",
        "prefix_py": "_keyboard="
    },
    "_keyboard_released": {
        "name": "_keyboard_released",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_keyboard_released: ",
        "prefix_py": "_keyboard_released=()"
    },
    "_keyboards": {
        "name": "_keyboards",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_keyboards: {}",
        "prefix_py": "_keyboards={}"
    },
    "_on_focus": {
        "name": "_on_focus",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value",
            "largs"
        ],
        "prefix_kv": "_on_focus: ",
        "prefix_py": "_on_focus=()"
    },
    "_on_focusable": {
        "name": "_on_focusable",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_on_focusable: ",
        "prefix_py": "_on_focusable=()"
    },
    "_requested_keyboard": {
        "name": "_requested_keyboard",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_requested_keyboard: True",
        "prefix_py": "_requested_keyboard=True"
    },
    "_set_keyboard": {
        "name": "_set_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_keyboard: ",
        "prefix_py": "_set_keyboard=()"
    },
    "_set_on_focus_next": {
        "name": "_set_on_focus_next",
        "type": "function",
        "help": "If changing focus, ensure your code does not create an infinite loop.\neg:\n```python\nwidget.focus_next = widget\nwidget.focus_previous = widget\n```",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_set_on_focus_next: ",
        "prefix_py": "_set_on_focus_next=()"
    },
    "_set_on_focus_previous": {
        "name": "_set_on_focus_previous",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_set_on_focus_previous: ",
        "prefix_py": "_set_on_focus_previous=()"
    },
    "_unbind_keyboard": {
        "name": "_unbind_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_unbind_keyboard: ",
        "prefix_py": "_unbind_keyboard=()"
    },
    "focus": {
        "name": "focus",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "focus: True",
        "prefix_py": "focus=True"
    },
    "focus_next": {
        "name": "focus_next",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "focus_next: ",
        "prefix_py": "focus_next="
    },
    "focus_previous": {
        "name": "focus_previous",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "focus_previous: ",
        "prefix_py": "focus_previous="
    },
    "focused": {
        "name": "focused",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "focused: True",
        "prefix_py": "focused=True"
    },
    "get_focus_next": {
        "name": "get_focus_next",
        "type": "function",
        "help": "Returns the next focusable widget using either :attr:`focus_next`\nor the :attr:`children` similar to the order when tabbing forwards\nwith the ``tab`` key.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_focus_next: ",
        "prefix_py": "get_focus_next=()"
    },
    "get_focus_previous": {
        "name": "get_focus_previous",
        "type": "function",
        "help": "Returns the previous focusable widget using either\n:attr:`focus_previous` or the :attr:`children` similar to the\norder when the ``tab`` + ``shift`` keys are triggered together.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_focus_previous: ",
        "prefix_py": "get_focus_previous=()"
    },
    "hide_keyboard": {
        "name": "hide_keyboard",
        "type": "function",
        "help": "Convenience function to hide the keyboard in managed mode.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "hide_keyboard: ",
        "prefix_py": "hide_keyboard=()"
    },
    "ignored_touch": {
        "name": "ignored_touch",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "ignored_touch: ()",
        "prefix_py": "ignored_touch=()"
    },
    "input_type": {
        "name": "input_type",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "input_type: ''",
        "prefix_py": "input_type=''"
    },
    "is_focusable": {
        "name": "is_focusable",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "is_focusable: True",
        "prefix_py": "is_focusable=True"
    },
    "keyboard": {
        "name": "keyboard",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "keyboard",
        "prefix_py": "keyboard."
    },
    "keyboard_mode": {
        "name": "keyboard_mode",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "keyboard_mode: ''",
        "prefix_py": "keyboard_mode=''"
    },
    "keyboard_on_key_up": {
        "name": "keyboard_on_key_up",
        "type": "function",
        "help": "The method bound to the keyboard when the instance has focus.\n\nWhen the instance becomes focused, this method is bound to the\nkeyboard and will be called for every input release. The parameters are\nthe same as :meth:`kivy.core.window.WindowBase.on_key_up`.\n\nWhen overwriting the method in the derived widget, super should be\ncalled to enable de-focusing on escape. If the derived widget wishes\nto use escape for its own purposes, it can call super after it has\nprocessed the character (if it does not wish to consume the escape).\n\nSee :meth:`keyboard_on_key_down`",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "window",
            "keycode"
        ],
        "prefix_kv": "keyboard_on_key_up: ",
        "prefix_py": "keyboard_on_key_up=()"
    },
    "keyboard_on_textinput": {
        "name": "keyboard_on_textinput",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "window",
            "text"
        ],
        "prefix_kv": "keyboard_on_textinput: ",
        "prefix_py": "keyboard_on_textinput=()"
    },
    "keyboard_suggestions": {
        "name": "keyboard_suggestions",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "keyboard_suggestions: True",
        "prefix_py": "keyboard_suggestions=True"
    },
    "show_keyboard": {
        "name": "show_keyboard",
        "type": "function",
        "help": "Convenience function to show the keyboard in managed mode.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "show_keyboard: ",
        "prefix_py": "show_keyboard=()"
    },
    "unfocus_on_touch": {
        "name": "unfocus_on_touch",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FocusBehavior",
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "unfocus_on_touch: True",
        "prefix_py": "unfocus_on_touch=True"
    },
    "ToggleButtonBehavior": {
        "name": "ToggleButtonBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import ToggleButtonBehavior",
        "help": "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides\n:mod:`~kivy.uix.togglebutton` behavior. Please see the\n:mod:`togglebutton behaviors module <kivy.uix.behaviors.togglebutton>`\ndocumentation for more information.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ToggleButtonBehavior: ",
        "prefix_py": "ToggleButtonBehavior="
    },
    "TouchRippleBehavior": {
        "name": "TouchRippleBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import TouchRippleBehavior",
        "help": "Touch ripple behavior.\n\nSupposed to be used as mixin on widget classes.\n\nRipple behavior does not trigger automatically, concrete implementation\nneeds to call :func:`ripple_show` respective :func:`ripple_fade` manually.\n\nExample\n-------\n\nHere we create a Label which renders the touch ripple animation on\ninteraction::\n\n    class RippleLabel(TouchRippleBehavior, Label):\n\n        def __init__(self, **kwargs):\n            super(RippleLabel, self).__init__(**kwargs)\n\n        def on_touch_down(self, touch):\n            collide_point = self.collide_point(touch.x, touch.y)\n            if collide_point:\n                touch.grab(self)\n                self.ripple_show(touch)\n                return True\n            return False\n\n        def on_touch_up(self, touch):\n            if touch.grab_current is self:\n                touch.ungrab(self)\n                self.ripple_fade()\n                return True\n            return False",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TouchRippleBehavior: ",
        "prefix_py": "TouchRippleBehavior="
    },
    "_ripple_anim_complete": {
        "name": "_ripple_anim_complete",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self",
            "anim",
            "instance"
        ],
        "prefix_kv": "_ripple_anim_complete: ",
        "prefix_py": "_ripple_anim_complete=()"
    },
    "_ripple_reset_pane": {
        "name": "_ripple_reset_pane",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_ripple_reset_pane: ",
        "prefix_py": "_ripple_reset_pane=()"
    },
    "_ripple_set_color": {
        "name": "_ripple_set_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_ripple_set_color: ",
        "prefix_py": "_ripple_set_color=()"
    },
    "_ripple_set_ellipse": {
        "name": "_ripple_set_ellipse",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_ripple_set_ellipse: ",
        "prefix_py": "_ripple_set_ellipse=()"
    },
    "ripple_color": {
        "name": "ripple_color",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_color: ()",
        "prefix_py": "ripple_color=()"
    },
    "ripple_duration_in": {
        "name": "ripple_duration_in",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_duration_in: ",
        "prefix_py": "ripple_duration_in="
    },
    "ripple_duration_out": {
        "name": "ripple_duration_out",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_duration_out: ",
        "prefix_py": "ripple_duration_out="
    },
    "ripple_fade": {
        "name": "ripple_fade",
        "type": "function",
        "help": "Finish ripple animation on current widget.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "ripple_fade: ",
        "prefix_py": "ripple_fade=()"
    },
    "ripple_fade_from_alpha": {
        "name": "ripple_fade_from_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_fade_from_alpha: ",
        "prefix_py": "ripple_fade_from_alpha="
    },
    "ripple_fade_to_alpha": {
        "name": "ripple_fade_to_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_fade_to_alpha: ",
        "prefix_py": "ripple_fade_to_alpha="
    },
    "ripple_func_in": {
        "name": "ripple_func_in",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_func_in: ''",
        "prefix_py": "ripple_func_in=''"
    },
    "ripple_func_out": {
        "name": "ripple_func_out",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_func_out: ''",
        "prefix_py": "ripple_func_out=''"
    },
    "ripple_pos": {
        "name": "ripple_pos",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_pos: ()",
        "prefix_py": "ripple_pos=()"
    },
    "ripple_rad": {
        "name": "ripple_rad",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_rad: ",
        "prefix_py": "ripple_rad="
    },
    "ripple_rad_default": {
        "name": "ripple_rad_default",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_rad_default: ",
        "prefix_py": "ripple_rad_default="
    },
    "ripple_scale": {
        "name": "ripple_scale",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "prefix_kv": "ripple_scale: ",
        "prefix_py": "ripple_scale="
    },
    "ripple_show": {
        "name": "ripple_show",
        "type": "function",
        "help": "Begin ripple animation on current widget.\n\nExpects touch event as argument.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleBehavior",
            "TouchRippleButtonBehavior"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "ripple_show: ",
        "prefix_py": "ripple_show=()"
    },
    "TouchRippleButtonBehavior": {
        "name": "TouchRippleButtonBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors import TouchRippleButtonBehavior",
        "help": "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides\na similar behavior to :class:`~kivy.uix.behaviors.button.ButtonBehavior`\nbut provides touch ripple animation instead of button pressed/released as\nvisual effect.\n\n:Events:\n    `on_press`\n        Fired when the button is pressed.\n    `on_release`\n        Fired when the button is released (i.e. the touch/click that\n        pressed the button goes away).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TouchRippleButtonBehavior: ",
        "prefix_py": "TouchRippleButtonBehavior="
    },
    "on_disabled": {
        "name": "on_disabled",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TouchRippleButtonBehavior",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_disabled: ",
        "prefix_py": "on_disabled=()"
    },
    "EventDispatcher": {
        "name": "EventDispatcher",
        "type": "type",
        "import": "from kivy.uix.behaviors.codenavigation import EventDispatcher",
        "help": "EventDispatcher(**kwargs)\nGeneric event dispatcher interface.\n\n    See the module docstring for usage.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "EventDispatcher: ",
        "prefix_py": "EventDispatcher="
    },
    "Decimal": {
        "name": "Decimal",
        "type": "type",
        "import": "from kivy.uix.behaviors.cover import Decimal",
        "help": "Construct a new Decimal object. 'value' can be an integer, string, tuple,\nor another Decimal object. If no value is given, return Decimal('0'). The\ncontext does not affect the conversion and is only passed to determine if\nthe InvalidOperation trap is active.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Decimal: ",
        "prefix_py": "Decimal="
    },
    "adjusted": {
        "name": "adjusted",
        "type": "method_descriptor",
        "help": "Return the adjusted exponent of the number.  Defined as exp + digits - 1.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "adjusted: ()",
        "prefix_py": "adjusted=()"
    },
    "as_integer_ratio": {
        "name": "as_integer_ratio",
        "type": "method_descriptor",
        "help": "Decimal.as_integer_ratio() -> (int, int)\n\nReturn a pair of integers, whose ratio is exactly equal to the original\nDecimal and with a positive denominator. The ratio is in lowest terms.\nRaise OverflowError on infinities and a ValueError on NaNs.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "as_integer_ratio: ()",
        "prefix_py": "as_integer_ratio=()"
    },
    "as_tuple": {
        "name": "as_tuple",
        "type": "method_descriptor",
        "help": "Return a tuple representation of the number.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "as_tuple: ()",
        "prefix_py": "as_tuple=()"
    },
    "canonical": {
        "name": "canonical",
        "type": "method_descriptor",
        "help": "Return the canonical encoding of the argument.  Currently, the encoding\nof a Decimal instance is always canonical, so this operation returns its\nargument unchanged.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "canonical: ()",
        "prefix_py": "canonical=()"
    },
    "compare": {
        "name": "compare",
        "type": "method_descriptor",
        "help": "Compare self to other.  Return a decimal value:\n\na or b is a NaN ==> Decimal('NaN')\na < b           ==> Decimal('-1')\na == b          ==> Decimal('0')\na > b           ==> Decimal('1')",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "compare: ()",
        "prefix_py": "compare=()"
    },
    "compare_signal": {
        "name": "compare_signal",
        "type": "method_descriptor",
        "help": "Identical to compare, except that all NaNs signal.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "compare_signal: ()",
        "prefix_py": "compare_signal=()"
    },
    "compare_total": {
        "name": "compare_total",
        "type": "method_descriptor",
        "help": "Compare two operands using their abstract representation rather than\ntheir numerical value.  Similar to the compare() method, but the result\ngives a total ordering on Decimal instances.  Two Decimal instances with\nthe same numeric value but different representations compare unequal\nin this ordering:\n\n    >>> Decimal('12.0').compare_total(Decimal('12'))\n    Decimal('-1')\n\nQuiet and signaling NaNs are also included in the total ordering. The result\nof this function is Decimal('0') if both operands have the same representation,\nDecimal('-1') if the first operand is lower in the total order than the second,\nand Decimal('1') if the first operand is higher in the total order than the\nsecond operand. See the specification for details of the total order.\n\nThis operation is unaffected by context and is quiet: no flags are changed\nand no rounding is performed. As an exception, the C version may raise\nInvalidOperation if the second operand cannot be converted exactly.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "compare_total: ()",
        "prefix_py": "compare_total=()"
    },
    "compare_total_mag": {
        "name": "compare_total_mag",
        "type": "method_descriptor",
        "help": "Compare two operands using their abstract representation rather than their\nvalue as in compare_total(), but ignoring the sign of each operand.\n\nx.compare_total_mag(y) is equivalent to x.copy_abs().compare_total(y.copy_abs()).\n\nThis operation is unaffected by context and is quiet: no flags are changed\nand no rounding is performed. As an exception, the C version may raise\nInvalidOperation if the second operand cannot be converted exactly.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "compare_total_mag: ()",
        "prefix_py": "compare_total_mag=()"
    },
    "conjugate": {
        "name": "conjugate",
        "type": "method_descriptor",
        "help": "Return self.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "conjugate: ()",
        "prefix_py": "conjugate=()"
    },
    "copy_abs": {
        "name": "copy_abs",
        "type": "method_descriptor",
        "help": "Return the absolute value of the argument.  This operation is unaffected by\ncontext and is quiet: no flags are changed and no rounding is performed.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "copy_abs: ()",
        "prefix_py": "copy_abs=()"
    },
    "copy_negate": {
        "name": "copy_negate",
        "type": "method_descriptor",
        "help": "Return the negation of the argument.  This operation is unaffected by context\nand is quiet: no flags are changed and no rounding is performed.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "copy_negate: ()",
        "prefix_py": "copy_negate=()"
    },
    "copy_sign": {
        "name": "copy_sign",
        "type": "method_descriptor",
        "help": "Return a copy of the first operand with the sign set to be the same as the\nsign of the second operand. For example:\n\n    >>> Decimal('2.3').copy_sign(Decimal('-1.5'))\n    Decimal('-2.3')\n\nThis operation is unaffected by context and is quiet: no flags are changed\nand no rounding is performed. As an exception, the C version may raise\nInvalidOperation if the second operand cannot be converted exactly.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "copy_sign: ()",
        "prefix_py": "copy_sign=()"
    },
    "exp": {
        "name": "exp",
        "type": "method_descriptor",
        "help": "Return the value of the (natural) exponential function e**x at the given\nnumber.  The function always uses the ROUND_HALF_EVEN mode and the result\nis correctly rounded.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "exp: ()",
        "prefix_py": "exp=()"
    },
    "fma": {
        "name": "fma",
        "type": "method_descriptor",
        "help": "Fused multiply-add.  Return self*other+third with no rounding of the\nintermediate product self*other.\n\n    >>> Decimal(2).fma(3, 5)\n    Decimal('11')",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "fma: ()",
        "prefix_py": "fma=()"
    },
    "from_float": {
        "name": "from_float",
        "type": "builtin_function_or_method",
        "help": "Class method that converts a float to a decimal number, exactly.\nSince 0.1 is not exactly representable in binary floating point,\nDecimal.from_float(0.1) is not the same as Decimal('0.1').\n\n    >>> Decimal.from_float(0.1)\n    Decimal('0.1000000000000000055511151231257827021181583404541015625')\n    >>> Decimal.from_float(float('nan'))\n    Decimal('NaN')\n    >>> Decimal.from_float(float('inf'))\n    Decimal('Infinity')\n    >>> Decimal.from_float(float('-inf'))\n    Decimal('-Infinity')",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "from_float",
        "prefix_py": "from_float."
    },
    "imag": {
        "name": "imag",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "imag: ",
        "prefix_py": "imag="
    },
    "is_canonical": {
        "name": "is_canonical",
        "type": "method_descriptor",
        "help": "Return True if the argument is canonical and False otherwise.  Currently,\na Decimal instance is always canonical, so this operation always returns\nTrue.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_canonical: ()",
        "prefix_py": "is_canonical=()"
    },
    "is_finite": {
        "name": "is_finite",
        "type": "method_descriptor",
        "help": "Return True if the argument is a finite number, and False if the argument\nis infinite or a NaN.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_finite: ()",
        "prefix_py": "is_finite=()"
    },
    "is_infinite": {
        "name": "is_infinite",
        "type": "method_descriptor",
        "help": "Return True if the argument is either positive or negative infinity and\nFalse otherwise.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_infinite: ()",
        "prefix_py": "is_infinite=()"
    },
    "is_nan": {
        "name": "is_nan",
        "type": "method_descriptor",
        "help": "Return True if the argument is a (quiet or signaling) NaN and False\notherwise.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_nan: ()",
        "prefix_py": "is_nan=()"
    },
    "is_normal": {
        "name": "is_normal",
        "type": "method_descriptor",
        "help": "Return True if the argument is a normal finite non-zero number with an\nadjusted exponent greater than or equal to Emin. Return False if the\nargument is zero, subnormal, infinite or a NaN.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_normal: ()",
        "prefix_py": "is_normal=()"
    },
    "is_qnan": {
        "name": "is_qnan",
        "type": "method_descriptor",
        "help": "Return True if the argument is a quiet NaN, and False otherwise.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_qnan: ()",
        "prefix_py": "is_qnan=()"
    },
    "is_signed": {
        "name": "is_signed",
        "type": "method_descriptor",
        "help": "Return True if the argument has a negative sign and False otherwise.\nNote that both zeros and NaNs can carry signs.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_signed: ()",
        "prefix_py": "is_signed=()"
    },
    "is_snan": {
        "name": "is_snan",
        "type": "method_descriptor",
        "help": "Return True if the argument is a signaling NaN and False otherwise.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_snan: ()",
        "prefix_py": "is_snan=()"
    },
    "is_subnormal": {
        "name": "is_subnormal",
        "type": "method_descriptor",
        "help": "Return True if the argument is subnormal, and False otherwise. A number is\nsubnormal if it is non-zero, finite, and has an adjusted exponent less\nthan Emin.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_subnormal: ()",
        "prefix_py": "is_subnormal=()"
    },
    "is_zero": {
        "name": "is_zero",
        "type": "method_descriptor",
        "help": "Return True if the argument is a (positive or negative) zero and False\notherwise.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "is_zero: ()",
        "prefix_py": "is_zero=()"
    },
    "ln": {
        "name": "ln",
        "type": "method_descriptor",
        "help": "Return the natural (base e) logarithm of the operand. The function always\nuses the ROUND_HALF_EVEN mode and the result is correctly rounded.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "ln: ()",
        "prefix_py": "ln=()"
    },
    "log10": {
        "name": "log10",
        "type": "method_descriptor",
        "help": "Return the base ten logarithm of the operand. The function always uses the\nROUND_HALF_EVEN mode and the result is correctly rounded.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "log10: ()",
        "prefix_py": "log10=()"
    },
    "logb": {
        "name": "logb",
        "type": "method_descriptor",
        "help": "For a non-zero number, return the adjusted exponent of the operand as a\nDecimal instance.  If the operand is a zero, then Decimal('-Infinity') is\nreturned and the DivisionByZero condition is raised. If the operand is\nan infinity then Decimal('Infinity') is returned.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "logb: ()",
        "prefix_py": "logb=()"
    },
    "logical_and": {
        "name": "logical_and",
        "type": "method_descriptor",
        "help": "Return the digit-wise 'and' of the two (logical) operands.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "logical_and: ()",
        "prefix_py": "logical_and=()"
    },
    "logical_invert": {
        "name": "logical_invert",
        "type": "method_descriptor",
        "help": "Return the digit-wise inversion of the (logical) operand.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "logical_invert: ()",
        "prefix_py": "logical_invert=()"
    },
    "logical_or": {
        "name": "logical_or",
        "type": "method_descriptor",
        "help": "Return the digit-wise 'or' of the two (logical) operands.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "logical_or: ()",
        "prefix_py": "logical_or=()"
    },
    "logical_xor": {
        "name": "logical_xor",
        "type": "method_descriptor",
        "help": "Return the digit-wise 'exclusive or' of the two (logical) operands.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "logical_xor: ()",
        "prefix_py": "logical_xor=()"
    },
    "max": {
        "name": "max",
        "type": "method_descriptor",
        "help": "Maximum of self and other.  If one operand is a quiet NaN and the other is\nnumeric, the numeric operand is returned.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal",
            "ProgressBar",
            "DampedScrollEffect",
            "Slider",
            "VideoPlayerProgressBar"
        ],
        "prefix_kv": "max: ()",
        "prefix_py": "max=()"
    },
    "max_mag": {
        "name": "max_mag",
        "type": "method_descriptor",
        "help": "Similar to the max() method, but the comparison is done using the absolute\nvalues of the operands.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "max_mag: ()",
        "prefix_py": "max_mag=()"
    },
    "min": {
        "name": "min",
        "type": "method_descriptor",
        "help": "Minimum of self and other. If one operand is a quiet NaN and the other is\nnumeric, the numeric operand is returned.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal",
            "DampedScrollEffect",
            "Slider"
        ],
        "prefix_kv": "min: ()",
        "prefix_py": "min=()"
    },
    "min_mag": {
        "name": "min_mag",
        "type": "method_descriptor",
        "help": "Similar to the min() method, but the comparison is done using the absolute\nvalues of the operands.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "min_mag: ()",
        "prefix_py": "min_mag=()"
    },
    "next_minus": {
        "name": "next_minus",
        "type": "method_descriptor",
        "help": "Return the largest number representable in the given context (or in the\ncurrent default context if no context is given) that is smaller than the\ngiven operand.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "next_minus: ()",
        "prefix_py": "next_minus=()"
    },
    "next_plus": {
        "name": "next_plus",
        "type": "method_descriptor",
        "help": "Return the smallest number representable in the given context (or in the\ncurrent default context if no context is given) that is larger than the\ngiven operand.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "next_plus: ()",
        "prefix_py": "next_plus=()"
    },
    "next_toward": {
        "name": "next_toward",
        "type": "method_descriptor",
        "help": "If the two operands are unequal, return the number closest to the first\noperand in the direction of the second operand.  If both operands are\nnumerically equal, return a copy of the first operand with the sign set\nto be the same as the sign of the second operand.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "next_toward: ()",
        "prefix_py": "next_toward=()"
    },
    "normalize": {
        "name": "normalize",
        "type": "method_descriptor",
        "help": "Normalize the number by stripping the rightmost trailing zeros and\nconverting any result equal to Decimal('0') to Decimal('0e0').  Used\nfor producing canonical values for members of an equivalence class.\nFor example, Decimal('32.100') and Decimal('0.321000e+2') both normalize\nto the equivalent value Decimal('32.1').",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal",
            "Vector"
        ],
        "prefix_kv": "normalize: ()",
        "prefix_py": "normalize=()"
    },
    "number_class": {
        "name": "number_class",
        "type": "method_descriptor",
        "help": "Return a string describing the class of the operand.  The returned value\nis one of the following ten strings:\n\n    * '-Infinity', indicating that the operand is negative infinity.\n    * '-Normal', indicating that the operand is a negative normal number.\n    * '-Subnormal', indicating that the operand is negative and subnormal.\n    * '-Zero', indicating that the operand is a negative zero.\n    * '+Zero', indicating that the operand is a positive zero.\n    * '+Subnormal', indicating that the operand is positive and subnormal.\n    * '+Normal', indicating that the operand is a positive normal number.\n    * '+Infinity', indicating that the operand is positive infinity.\n    * 'NaN', indicating that the operand is a quiet NaN (Not a Number).\n    * 'sNaN', indicating that the operand is a signaling NaN.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "number_class: ()",
        "prefix_py": "number_class=()"
    },
    "quantize": {
        "name": "quantize",
        "type": "method_descriptor",
        "help": "Return a value equal to the first operand after rounding and having the\nexponent of the second operand.\n\n    >>> Decimal('1.41421356').quantize(Decimal('1.000'))\n    Decimal('1.414')\n\nUnlike other operations, if the length of the coefficient after the quantize\noperation would be greater than precision, then an InvalidOperation is signaled.\nThis guarantees that, unless there is an error condition, the quantized exponent\nis always equal to that of the right-hand operand.\n\nAlso unlike other operations, quantize never signals Underflow, even if the\nresult is subnormal and inexact.\n\nIf the exponent of the second operand is larger than that of the first, then\nrounding may be necessary. In this case, the rounding mode is determined by the\nrounding argument if given, else by the given context argument; if neither\nargument is given, the rounding mode of the current thread's context is used.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "quantize: ()",
        "prefix_py": "quantize=()"
    },
    "radix": {
        "name": "radix",
        "type": "method_descriptor",
        "help": "Return Decimal(10), the radix (base) in which the Decimal class does\nall its arithmetic. Included for compatibility with the specification.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "radix: ()",
        "prefix_py": "radix=()"
    },
    "real": {
        "name": "real",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "real: ",
        "prefix_py": "real="
    },
    "remainder_near": {
        "name": "remainder_near",
        "type": "method_descriptor",
        "help": "Return the remainder from dividing self by other.  This differs from\nself % other in that the sign of the remainder is chosen so as to minimize\nits absolute value. More precisely, the return value is self - n * other\nwhere n is the integer nearest to the exact value of self / other, and\nif two integers are equally near then the even one is chosen.\n\nIf the result is zero then its sign will be the sign of self.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "remainder_near: ()",
        "prefix_py": "remainder_near=()"
    },
    "rotate": {
        "name": "rotate",
        "type": "method_descriptor",
        "help": "Return the result of rotating the digits of the first operand by an amount\nspecified by the second operand.  The second operand must be an integer in\nthe range -precision through precision. The absolute value of the second\noperand gives the number of places to rotate. If the second operand is\npositive then rotation is to the left; otherwise rotation is to the right.\nThe coefficient of the first operand is padded on the left with zeros to\nlength precision if necessary. The sign and exponent of the first operand are\nunchanged.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal",
            "Translate",
            "Vector",
            "Matrix",
            "Scale",
            "Transform"
        ],
        "prefix_kv": "rotate: ()",
        "prefix_py": "rotate=()"
    },
    "same_quantum": {
        "name": "same_quantum",
        "type": "method_descriptor",
        "help": "Test whether self and other have the same exponent or whether both are NaN.\n\nThis operation is unaffected by context and is quiet: no flags are changed\nand no rounding is performed. As an exception, the C version may raise\nInvalidOperation if the second operand cannot be converted exactly.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "same_quantum: ()",
        "prefix_py": "same_quantum=()"
    },
    "scaleb": {
        "name": "scaleb",
        "type": "method_descriptor",
        "help": "Return the first operand with the exponent adjusted the second.  Equivalently,\nreturn the first operand multiplied by 10**other. The second operand must be\nan integer.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "scaleb: ()",
        "prefix_py": "scaleb=()"
    },
    "shift": {
        "name": "shift",
        "type": "method_descriptor",
        "help": "Return the result of shifting the digits of the first operand by an amount\nspecified by the second operand.  The second operand must be an integer in\nthe range -precision through precision. The absolute value of the second\noperand gives the number of places to shift. If the second operand is\npositive, then the shift is to the left; otherwise the shift is to the\nright. Digits shifted into the coefficient are zeros. The sign and exponent\nof the first operand are unchanged.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "shift: ()",
        "prefix_py": "shift=()"
    },
    "sqrt": {
        "name": "sqrt",
        "type": "method_descriptor",
        "help": "Return the square root of the argument to full precision. The result is\ncorrectly rounded using the ROUND_HALF_EVEN rounding mode.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "sqrt: ()",
        "prefix_py": "sqrt=()"
    },
    "to_eng_string": {
        "name": "to_eng_string",
        "type": "method_descriptor",
        "help": "Convert to an engineering-type string.  Engineering notation has an exponent\nwhich is a multiple of 3, so there are up to 3 digits left of the decimal\nplace. For example, Decimal('123E+1') is converted to Decimal('1.23E+3').\n\nThe value of context.capitals determines whether the exponent sign is lower\nor upper case. Otherwise, the context does not affect the operation.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "to_eng_string: ()",
        "prefix_py": "to_eng_string=()"
    },
    "to_integral": {
        "name": "to_integral",
        "type": "method_descriptor",
        "help": "Identical to the to_integral_value() method.  The to_integral() name has been\nkept for compatibility with older versions.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "to_integral: ()",
        "prefix_py": "to_integral=()"
    },
    "to_integral_exact": {
        "name": "to_integral_exact",
        "type": "method_descriptor",
        "help": "Round to the nearest integer, signaling Inexact or Rounded as appropriate if\nrounding occurs.  The rounding mode is determined by the rounding parameter\nif given, else by the given context. If neither parameter is given, then the\nrounding mode of the current default context is used.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "to_integral_exact: ()",
        "prefix_py": "to_integral_exact=()"
    },
    "to_integral_value": {
        "name": "to_integral_value",
        "type": "method_descriptor",
        "help": "Round to the nearest integer without signaling Inexact or Rounded.  The\nrounding mode is determined by the rounding parameter if given, else by\nthe given context. If neither parameter is given, then the rounding mode\nof the current default context is used.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Decimal"
        ],
        "prefix_kv": "to_integral_value: ()",
        "prefix_py": "to_integral_value=()"
    },
    "ReferenceListProperty": {
        "name": "ReferenceListProperty",
        "type": "type",
        "import": "from kivy.uix.behaviors.drag import ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ReferenceListProperty: ",
        "prefix_py": "ReferenceListProperty="
    },
    "setitem": {
        "name": "setitem",
        "type": "cython_function_or_method",
        "help": "ReferenceListProperty.setitem(self, EventDispatcher obj, key, value)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "ReferenceListProperty"
        ],
        "prefix_kv": "setitem",
        "prefix_py": "setitem."
    },
    "ref": {
        "name": "ref",
        "type": "type",
        "import": "from kivy.uix.behaviors.togglebutton import ref",
        "help": null,
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ref: ",
        "prefix_py": "ref="
    },
    "CanvasBase": {
        "name": "CanvasBase",
        "type": "type",
        "import": "from kivy.uix.behaviors.touchripple import CanvasBase",
        "help": "CanvasBase provides the context manager methods for the\n:class:`Canvas`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CanvasBase: ",
        "prefix_py": "CanvasBase="
    },
    "add": {
        "name": "add",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.add(self, Instruction c)\nAdd a new :class:`Instruction` to our list.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "add",
        "prefix_py": "add."
    },
    "clear": {
        "name": "clear",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.clear(self)\nRemove all the :class:`Instructions <Instruction>`.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Vector",
            "defaultdict",
            "ObservableDict",
            "nodeclass",
            "role_doc",
            "role_video",
            "Context",
            "ConfigParser",
            "Canvas"
        ],
        "prefix_kv": "clear",
        "prefix_py": "clear."
    },
    "flag_data_update": {
        "name": "flag_data_update",
        "type": "cython_function_or_method",
        "help": "Instruction.flag_data_update(self)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "Color",
            "Ellipse",
            "ScissorPop",
            "ScissorPush",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ClearBuffers",
            "ClearColor",
            "EffectFbo",
            "Fbo",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "Translate",
            "Line",
            "BindTexture",
            "Callback",
            "Scale",
            "Transform",
            "BorderImage",
            "Canvas"
        ],
        "prefix_kv": "flag_data_update",
        "prefix_py": "flag_data_update."
    },
    "flag_update": {
        "name": "flag_update",
        "type": "cython_function_or_method",
        "help": "Instruction.flag_update(self, int do_parent=1)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "Color",
            "Ellipse",
            "ScissorPop",
            "ScissorPush",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ClearBuffers",
            "ClearColor",
            "EffectFbo",
            "Fbo",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "Translate",
            "Line",
            "BindTexture",
            "Callback",
            "Scale",
            "Transform",
            "BorderImage",
            "Canvas"
        ],
        "prefix_kv": "flag_update",
        "prefix_py": "flag_update."
    },
    "get_group": {
        "name": "get_group",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.get_group(self, unicode groupname)\nReturn an iterable for all the :class:`Instructions <Instruction>`\n        with a specific group name.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "get_group",
        "prefix_py": "get_group."
    },
    "indexof": {
        "name": "indexof",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.indexof(self, Instruction c)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "indexof",
        "prefix_py": "indexof."
    },
    "insert": {
        "name": "insert",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.insert(self, int index, Instruction c)\nInsert a new :class:`Instruction` into our list at index.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Vector",
            "nodeclass",
            "role_doc",
            "role_video",
            "Canvas"
        ],
        "prefix_kv": "insert",
        "prefix_py": "insert."
    },
    "needs_redraw": {
        "name": "needs_redraw",
        "type": "getset_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "Color",
            "Ellipse",
            "ScissorPop",
            "ScissorPush",
            "InstructionGroup",
            "Mesh",
            "_ColorArc",
            "ClearBuffers",
            "ClearColor",
            "EffectFbo",
            "Fbo",
            "PopMatrix",
            "PushMatrix",
            "Rectangle",
            "RenderContext",
            "Translate",
            "Line",
            "BindTexture",
            "Callback",
            "Scale",
            "Transform",
            "BorderImage",
            "Canvas"
        ],
        "prefix_kv": "needs_redraw: ",
        "prefix_py": "needs_redraw="
    },
    "remove": {
        "name": "remove",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.remove(self, Instruction c)\nRemove an existing :class:`Instruction` from our list.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "Cache",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Vector",
            "ObservableDict",
            "nodeclass",
            "role_doc",
            "role_video",
            "Canvas"
        ],
        "prefix_kv": "remove",
        "prefix_py": "remove."
    },
    "remove_group": {
        "name": "remove_group",
        "type": "cython_function_or_method",
        "help": "InstructionGroup.remove_group(self, unicode groupname)\nRemove all :class:`Instructions <Instruction>` with a specific group\n        name.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "CanvasBase",
            "InstructionGroup",
            "_ColorArc",
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "remove_group",
        "prefix_py": "remove_group."
    },
    "Color": {
        "name": "Color",
        "type": "type",
        "import": "from kivy.uix.behaviors.touchripple import Color",
        "help": "Color(*args, **kwargs)\n\nInstruction to set the color state for any vertices being\ndrawn after it.\n\nThis represents a color between 0 and 1, but is applied as a\n*multiplier* to the texture of any vertex instructions following\nit in a canvas. If no texture is set, the vertex instruction\ntakes the precise color of the Color instruction.\n\nFor instance, if a Rectangle has a texture with uniform color\n``(0.5, 0.5, 0.5, 1.0)`` and the preceding Color has\n``rgba=(1, 0.5, 2, 1)``, the actual visible color will be\n``(0.5, 0.25, 1.0, 1.0)`` since the Color instruction is applied as\na multiplier to every rgba component. In this case, a Color\ncomponent outside the 0-1 range gives a visible result as the\nintensity of the blue component is doubled.\n\nTo declare a Color in Python, you can do::\n\n    from kivy.graphics import Color\n\n    # create red v\n    c = Color(1, 0, 0)\n    # create blue color\n    c = Color(0, 1, 0)\n    # create blue color with 50% alpha\n    c = Color(0, 1, 0, .5)\n\n    # using hsv mode\n    c = Color(0, 1, 1, mode='hsv')\n    # using hsv mode + alpha\n    c = Color(0, 1, 1, .2, mode='hsv')\n\nYou can also set color components that are available as properties\nby passing them as keyword arguments::\n\n    c = Color(b=0.5)  # sets the blue component only\n\nIn kv lang you can set the color properties directly:\n\n.. code-block:: kv\n\n    <Rule>:\n        canvas:\n            # red color\n            Color:\n                rgb: 1, 0, 0\n            # blue color\n            Color:\n                rgb: 0, 1, 0\n            # blue color with 50% alpha\n            Color:\n                rgba: 0, 1, 0, .5\n\n            # using hsv mode\n            Color:\n                hsv: 0, 1, 1\n            # using hsv mode + alpha\n            Color:\n                hsv: 0, 1, 1\n                a: .5",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Color: ",
        "prefix_py": "Color="
    },
    "a": {
        "name": "a",
        "type": "getset_descriptor",
        "help": "Alpha component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ColorWheel",
            "ClearColor"
        ],
        "prefix_kv": "a: ",
        "prefix_py": "a="
    },
    "b": {
        "name": "b",
        "type": "getset_descriptor",
        "help": "Blue component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ColorWheel",
            "ClearColor"
        ],
        "prefix_kv": "b: ",
        "prefix_py": "b="
    },
    "g": {
        "name": "g",
        "type": "getset_descriptor",
        "help": "Green component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ColorWheel",
            "ClearColor"
        ],
        "prefix_kv": "g: ",
        "prefix_py": "g="
    },
    "h": {
        "name": "h",
        "type": "getset_descriptor",
        "help": "Hue component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color"
        ],
        "prefix_kv": "h: ",
        "prefix_py": "h="
    },
    "hsv": {
        "name": "hsv",
        "type": "getset_descriptor",
        "help": "HSV color, list of 3 values in 0-1 range, alpha will be 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ColorPicker"
        ],
        "prefix_kv": "hsv: ",
        "prefix_py": "hsv="
    },
    "r": {
        "name": "r",
        "type": "getset_descriptor",
        "help": "Red component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ColorWheel",
            "ClearColor"
        ],
        "prefix_kv": "r: ",
        "prefix_py": "r="
    },
    "rgb": {
        "name": "rgb",
        "type": "getset_descriptor",
        "help": "RGB color, list of 3 values in 0-1 range. The alpha will be 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ClearColor"
        ],
        "prefix_kv": "rgb: ",
        "prefix_py": "rgb="
    },
    "rgba": {
        "name": "rgba",
        "type": "getset_descriptor",
        "help": "RGBA color, list of 4 values in 0-1 range.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color",
            "ClearColor"
        ],
        "prefix_kv": "rgba: ",
        "prefix_py": "rgba="
    },
    "s": {
        "name": "s",
        "type": "getset_descriptor",
        "help": "Saturation component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color"
        ],
        "prefix_kv": "s: ",
        "prefix_py": "s="
    },
    "v": {
        "name": "v",
        "type": "getset_descriptor",
        "help": "Value component, between 0 and 1.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Color"
        ],
        "prefix_kv": "v: ",
        "prefix_py": "v="
    },
    "Ellipse": {
        "name": "Ellipse",
        "type": "type",
        "import": "from kivy.uix.behaviors.touchripple import Ellipse",
        "help": "Ellipse(*args, **kwargs)\nA 2D ellipse.\n\n    :Parameters:\n        `segments`: int, the default value is calculated from the range between angle.\n            Define how many segments are needed for drawing the ellipse.\n            The ellipse drawing will be smoother if you have many segments,\n            however you can also use this property to create polygons with 3 or more sides.\n        `angle_start`: float, defaults to 0.0\n            Specifies the starting angle, in degrees, of the disk portion.\n        `angle_end`: float, defaults to 360.0\n            Specifies the ending angle, in degrees, of the disk portion.\n\n    .. versionchanged:: 1.0.7\n        Added angle_start and angle_end.\n    \n    .. versionchanged:: 2.2.0\n        The default number of segments is no longer 180, it is now calculated\n        according to the angle range, as this is a more efficient approach.\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Ellipse: ",
        "prefix_py": "Ellipse="
    },
    "angle_end": {
        "name": "angle_end",
        "type": "getset_descriptor",
        "help": "End angle of the ellipse in degrees, defaults to 360.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse"
        ],
        "prefix_kv": "angle_end: ",
        "prefix_py": "angle_end="
    },
    "angle_start": {
        "name": "angle_start",
        "type": "getset_descriptor",
        "help": "Start angle of the ellipse in degrees, defaults to 0.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse"
        ],
        "prefix_kv": "angle_start: ",
        "prefix_py": "angle_start="
    },
    "points": {
        "name": "points",
        "type": "getset_descriptor",
        "help": "Property for getting the points used to draw the vertices.\n\n.. versionadded:: 2.3.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse",
            "Rectangle",
            "Line",
            "BorderImage"
        ],
        "prefix_kv": "points: ",
        "prefix_py": "points="
    },
    "segments": {
        "name": "segments",
        "type": "getset_descriptor",
        "help": "Property for getting/setting the number of segments of the ellipse.\nThe ellipse drawing will be smoother if you have many segments, however\nyou can also use this property to create polygons with 3 or more sides.\nValues smaller than 3 will not be represented and the number of\nsegments will be automatically calculated.\n\n.. versionchanged:: 2.2.0\n    The minimum number of segments allowed is 3. Smaller values will be\n    ignored and the number of segments will be automatically calculated.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse"
        ],
        "prefix_kv": "segments: ",
        "prefix_py": "segments="
    },
    "source": {
        "name": "source",
        "type": "getset_descriptor",
        "help": "This property represents the filename to load the texture from.\nIf you want to use an image as source, do it like this::\n\n    with self.canvas:\n        Rectangle(source='mylogo.png', pos=self.pos, size=self.size)\n\nHere's the equivalent in Kivy language:\n\n.. code-block:: kv\n\n    <MyWidget>:\n        canvas:\n            Rectangle:\n                source: 'mylogo.png'\n                pos: self.pos\n                size: self.size\n\n.. note::\n\n    The filename will be searched for using the\n    :func:`kivy.resources.resource_find` function.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse",
            "Image",
            "Camera",
            "Mesh",
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "Rectangle",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "Line",
            "AsyncImage",
            "RstAsyncImage",
            "RstDocument",
            "RstImage",
            "RstVideoPlayer",
            "VideoPlayer",
            "nodeclass",
            "role_doc",
            "role_video",
            "BindTexture",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerStop",
            "VideoPlayerVolume",
            "BorderImage"
        ],
        "prefix_kv": "source: ",
        "prefix_py": "source="
    },
    "tex_coords": {
        "name": "tex_coords",
        "type": "getset_descriptor",
        "help": "This property represents the texture coordinates used for drawing the\nvertex instruction. The value must be a list of 8 values.\n\nA texture coordinate has a position (u, v), and a size (w, h). The size\ncan be negative, and would represent the 'flipped' texture. By default,\nthe tex_coords are::\n\n    [u, v, u + w, v, u + w, v + h, u, v + h]\n\nYou can pass your own texture coordinates if you want to achieve fancy\neffects.\n\n.. warning::\n\n    The default values just mentioned can be negative. Depending\n    on the image and label providers, the coordinates are flipped\n    vertically because of the order in which the image is internally\n    stored. Instead of flipping the image data, we are just flipping\n    the texture coordinates to be faster.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Ellipse",
            "Mesh",
            "Rectangle",
            "Line",
            "Texture",
            "BorderImage"
        ],
        "prefix_kv": "tex_coords: ",
        "prefix_py": "tex_coords="
    },
    "RelativeLayout": {
        "name": "RelativeLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.behaviors.touchripple import RelativeLayout",
        "help": "RelativeLayout class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RelativeLayout:\n    ",
        "prefix_py": "RelativeLayout()"
    },
    "ScissorPop": {
        "name": "ScissorPop",
        "type": "type",
        "import": "from kivy.uix.behaviors.touchripple import ScissorPop",
        "help": "Pop the scissor stack. Call after ScissorPush, once you have completed\nthe drawing you wish to be clipped.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScissorPop: ",
        "prefix_py": "ScissorPop="
    },
    "ScissorPush": {
        "name": "ScissorPush",
        "type": "type",
        "import": "from kivy.uix.behaviors.touchripple import ScissorPush",
        "help": "ScissorPush(**kwargs)\nPush the scissor stack. Provide kwargs of 'x', 'y', 'width', 'height'\n    to control the area and position of the scissoring region. Defaults to\n    0, 0, 100, 100\n\n    Scissor works by clipping all drawing outside of a rectangle starting at\n    int x, int y position and having sides of int width by int height in Window\n    space coordinates\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScissorPush: ",
        "prefix_py": "ScissorPush="
    },
    "KNSpace": {
        "name": "KNSpace",
        "type": "type",
        "import": "from kivy.uix.behaviors.knspace import KNSpace",
        "help": "Each :class:`KNSpace` instance is a namespace that stores the named Kivy\nobjects associated with this namespace. Each named object is\nstored as the value of a Kivy :class:`~kivy.properties.ObjectProperty` of\nthis instance whose property name is the object's given name. Both `rebind`\nand `allownone` are set to `True` for the property.\n\nSee :attr:`KNSpaceBehavior.knspace` for details on how a namespace is\nassociated with a named object.\n\nWhen storing an object in the namespace, the object's `proxy_ref` is\nstored if the object has such an attribute.\n\n:Parameters:\n\n    `parent`: (internal) A :class:`KNSpace` instance or None.\n        If specified, it's a parent namespace, in which case, the current\n        namespace will have in its namespace all its named objects\n        as well as the named objects of its parent and parent's parent\n        etc. See :meth:`fork` for more details.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "KNSpace: ",
        "prefix_py": "KNSpace="
    },
    "_KNSpace__has_applied": {
        "name": "_KNSpace__has_applied",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpace"
        ],
        "prefix_kv": "_KNSpace__has_applied: ",
        "prefix_py": "_KNSpace__has_applied=()"
    },
    "fork": {
        "name": "fork",
        "type": "function",
        "help": "Returns a new :class:`KNSpace` instance which will have access to\nall the named objects in the current namespace but will also have a\nnamespace of its own that is unique to it.\n\nFor example:\n\n.. code-block:: python\n\n    forked_knspace1 = knspace.fork()\n    forked_knspace2 = knspace.fork()\n\nNow, any names added to `knspace` will be accessible by the\n`forked_knspace1` and `forked_knspace2` namespaces by the normal means.\nHowever, any names added to `forked_knspace1` will not be accessible\nfrom `knspace` or `forked_knspace2`. Similar for `forked_knspace2`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpace"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "fork: ",
        "prefix_py": "fork=()"
    },
    "keep_ref": {
        "name": "keep_ref",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpace"
        ],
        "prefix_kv": "keep_ref: True",
        "prefix_py": "keep_ref=True"
    },
    "KNSpaceBehavior": {
        "name": "KNSpaceBehavior",
        "type": "type",
        "import": "from kivy.uix.behaviors.knspace import KNSpaceBehavior",
        "help": "Inheriting from this class allows naming of the inherited objects, which\nare then added to the associated namespace :attr:`knspace` and accessible\nthrough it.\n\nPlease see the :mod:`knspace behaviors module <kivy.uix.behaviors.knspace>`\ndocumentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "KNSpaceBehavior: ",
        "prefix_py": "KNSpaceBehavior="
    },
    "_KNSpaceBehavior__callbacks": {
        "name": "_KNSpaceBehavior__callbacks",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "_KNSpaceBehavior__callbacks: ",
        "prefix_py": "_KNSpaceBehavior__callbacks=()"
    },
    "_KNSpaceBehavior__knspace_clear_callbacks": {
        "name": "_KNSpaceBehavior__knspace_clear_callbacks",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_KNSpaceBehavior__knspace_clear_callbacks: ",
        "prefix_py": "_KNSpaceBehavior__knspace_clear_callbacks=()"
    },
    "_KNSpaceBehavior__last_knspace": {
        "name": "_KNSpaceBehavior__last_knspace",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "_KNSpaceBehavior__last_knspace: ",
        "prefix_py": "_KNSpaceBehavior__last_knspace=()"
    },
    "_KNSpaceBehavior__set_parent_knspace": {
        "name": "_KNSpaceBehavior__set_parent_knspace",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_KNSpaceBehavior__set_parent_knspace: ",
        "prefix_py": "_KNSpaceBehavior__set_parent_knspace=()"
    },
    "_get_knsname": {
        "name": "_get_knsname",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_knsname: ",
        "prefix_py": "_get_knsname=()"
    },
    "_get_knspace": {
        "name": "_get_knspace",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_knspace: ",
        "prefix_py": "_get_knspace=()"
    },
    "_knsname": {
        "name": "_knsname",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "_knsname: ''",
        "prefix_py": "_knsname=''"
    },
    "_knspace": {
        "name": "_knspace",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "_knspace: ",
        "prefix_py": "_knspace="
    },
    "_set_knsname": {
        "name": "_set_knsname",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_knsname: ",
        "prefix_py": "_set_knsname=()"
    },
    "_set_knspace": {
        "name": "_set_knspace",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "KNSpaceBehavior"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_knspace: ",
        "prefix_py": "_set_knspace=()"
    },
    "knsname": {
        "name": "knsname",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "knsname",
        "prefix_py": "knsname."
    },
    "knspace": {
        "name": "knspace",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "knspace",
        "prefix_py": "knspace."
    },
    "knspace_key": {
        "name": "knspace_key",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "KNSpaceBehavior"
        ],
        "prefix_kv": "knspace_key: ''",
        "prefix_py": "knspace_key=''"
    },
    "Bubble": {
        "name": "Bubble",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.bubble import Bubble",
        "help": "Bubble class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Bubble:\n    ",
        "prefix_py": "Bubble()"
    },
    "ARROW_LAYOUTS": {
        "name": "ARROW_LAYOUTS",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "ARROW_LAYOUTS: {}",
        "prefix_py": "ARROW_LAYOUTS={}"
    },
    "adjust_position": {
        "name": "adjust_position",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "adjust_position: ",
        "prefix_py": "adjust_position=()"
    },
    "arrow_color": {
        "name": "arrow_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_color: ",
        "prefix_py": "arrow_color=()"
    },
    "arrow_image": {
        "name": "arrow_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_image: ''",
        "prefix_py": "arrow_image=''"
    },
    "arrow_margin": {
        "name": "arrow_margin",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_margin: ()",
        "prefix_py": "arrow_margin=()"
    },
    "arrow_margin_x": {
        "name": "arrow_margin_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_margin_x: ",
        "prefix_py": "arrow_margin_x="
    },
    "arrow_margin_y": {
        "name": "arrow_margin_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_margin_y: ",
        "prefix_py": "arrow_margin_y="
    },
    "arrow_pos": {
        "name": "arrow_pos",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "arrow_pos: ''",
        "prefix_py": "arrow_pos=''"
    },
    "content": {
        "name": "content",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "Popup",
            "RstBlockQuote",
            "RstDocument",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstWarning",
            "ScatterLayout",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "TabbedPanelHeader",
            "TabbedPanel",
            "TabbedPanelItem",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "content: ",
        "prefix_py": "content="
    },
    "content_height": {
        "name": "content_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "content_height: ",
        "prefix_py": "content_height="
    },
    "content_width": {
        "name": "content_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "content_width: ",
        "prefix_py": "content_width="
    },
    "flex_arrow_pos": {
        "name": "flex_arrow_pos",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "flex_arrow_pos: ()",
        "prefix_py": "flex_arrow_pos=()"
    },
    "get_flex_arrow_layout_params": {
        "name": "get_flex_arrow_layout_params",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_flex_arrow_layout_params: ",
        "prefix_py": "get_flex_arrow_layout_params=()"
    },
    "limit_to": {
        "name": "limit_to",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "limit_to: ",
        "prefix_py": "limit_to="
    },
    "on_arrow_color": {
        "name": "on_arrow_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_arrow_color: ",
        "prefix_py": "on_arrow_color=()"
    },
    "on_arrow_image": {
        "name": "on_arrow_image",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_arrow_image: ",
        "prefix_py": "on_arrow_image=()"
    },
    "on_arrow_pos": {
        "name": "on_arrow_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_arrow_pos: ",
        "prefix_py": "on_arrow_pos=()"
    },
    "on_content_size": {
        "name": "on_content_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_content_size: ",
        "prefix_py": "on_content_size=()"
    },
    "on_flex_arrow_pos": {
        "name": "on_flex_arrow_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_flex_arrow_pos: ",
        "prefix_py": "on_flex_arrow_pos=()"
    },
    "on_limit_to": {
        "name": "on_limit_to",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_limit_to: ",
        "prefix_py": "on_limit_to=()"
    },
    "on_pos": {
        "name": "on_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "Carousel",
            "Sandbox",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_pos: ",
        "prefix_py": "on_pos=()"
    },
    "on_size": {
        "name": "on_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "Carousel",
            "CodeInput",
            "TextInput",
            "HorizontalBlurEffect",
            "VerticalBlurEffect",
            "Sandbox",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_size: ",
        "prefix_py": "on_size=()"
    },
    "reposition_inner_widgets": {
        "name": "reposition_inner_widgets",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "reposition_inner_widgets: ",
        "prefix_py": "reposition_inner_widgets=()"
    },
    "show_arrow": {
        "name": "show_arrow",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "show_arrow: True",
        "prefix_py": "show_arrow=True"
    },
    "update_content_size": {
        "name": "update_content_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Bubble",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "update_content_size: ",
        "prefix_py": "update_content_size=()"
    },
    "BubbleButton": {
        "name": "BubbleButton",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.bubble import BubbleButton",
        "help": "A button intended for use in a BubbleContent widget.\nYou can use a \"normal\" button class, but it will not look good unless the\nbackground is changed.\n\nRather use this BubbleButton widget that is already defined and provides a\nsuitable background for you.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BubbleButton:\n    ",
        "prefix_py": "BubbleButton()"
    },
    "BubbleContent": {
        "name": "BubbleContent",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.bubble import BubbleContent",
        "help": "A styled BoxLayout that can be used as the content widget of a Bubble.\n\n.. versionchanged:: 2.2.0\nThe graphical appearance of :class:`BubbleContent` is now based on it's\nown properties :attr:`background_image`, :attr:`background_color`,\n:attr:`border` and :attr:`border_auto_scale`. The parent widget properties\nare no longer considered. This makes the BubbleContent a standalone themed\nBoxLayout.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BubbleContent:\n    ",
        "prefix_py": "BubbleContent()"
    },
    "border_auto_scale": {
        "name": "border_auto_scale",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BubbleContent"
        ],
        "prefix_kv": "border_auto_scale: ''",
        "prefix_py": "border_auto_scale=''"
    },
    "BubbleException": {
        "name": "BubbleException",
        "type": "type",
        "import": "from kivy.uix.bubble import BubbleException",
        "help": "Common base class for all non-exit exceptions.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BubbleException: ",
        "prefix_py": "BubbleException="
    },
    "Image": {
        "name": "Image",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.bubble import Image",
        "help": "Image class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Image:\n    ",
        "prefix_py": "Image()"
    },
    "_clear_core_image": {
        "name": "_clear_core_image",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_clear_core_image: ",
        "prefix_py": "_clear_core_image=()"
    },
    "_on_tex_change": {
        "name": "_on_tex_change",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_on_tex_change: ",
        "prefix_py": "_on_tex_change=()"
    },
    "_update_fit_mode": {
        "name": "_update_fit_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_fit_mode: ",
        "prefix_py": "_update_fit_mode=()"
    },
    "allow_stretch": {
        "name": "allow_stretch",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "allow_stretch: True",
        "prefix_py": "allow_stretch=True"
    },
    "anim_delay": {
        "name": "anim_delay",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "CoreImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "anim_delay: ",
        "prefix_py": "anim_delay="
    },
    "anim_loop": {
        "name": "anim_loop",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "anim_loop: ",
        "prefix_py": "anim_loop="
    },
    "fit_mode": {
        "name": "fit_mode",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "fit_mode: ''",
        "prefix_py": "fit_mode=''"
    },
    "get_image_ratio": {
        "name": "get_image_ratio",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_image_ratio: ",
        "prefix_py": "get_image_ratio=()"
    },
    "get_norm_image_size": {
        "name": "get_norm_image_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_norm_image_size: ",
        "prefix_py": "get_norm_image_size=()"
    },
    "image_ratio": {
        "name": "image_ratio",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "image_ratio",
        "prefix_py": "image_ratio."
    },
    "keep_data": {
        "name": "keep_data",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "keep_data: True",
        "prefix_py": "keep_data=True"
    },
    "keep_ratio": {
        "name": "keep_ratio",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "keep_ratio: True",
        "prefix_py": "keep_ratio=True"
    },
    "nocache": {
        "name": "nocache",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "CoreImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "nocache: True",
        "prefix_py": "nocache=True"
    },
    "norm_image_size": {
        "name": "norm_image_size",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "norm_image_size",
        "prefix_py": "norm_image_size."
    },
    "on_anim_delay": {
        "name": "on_anim_delay",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_anim_delay: ",
        "prefix_py": "on_anim_delay=()"
    },
    "on_nocache": {
        "name": "on_nocache",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_nocache: ",
        "prefix_py": "on_nocache=()"
    },
    "on_texture": {
        "name": "on_texture",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "CoreImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_texture: ",
        "prefix_py": "on_texture=()"
    },
    "reload": {
        "name": "reload",
        "type": "function",
        "help": "Reload image from disk. This facilitates re-loading of\nimages from disk in case the image content changes.\n\n.. versionadded:: 1.3.0\n\nUsage::\n\n    im = Image(source = '1.jpg')\n    # -- do something --\n    im.reload()\n    # image will be re-loaded from disk",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "reload: ",
        "prefix_py": "reload=()"
    },
    "remove_from_cache": {
        "name": "remove_from_cache",
        "type": "function",
        "help": "Remove image from cache.\n\n.. versionadded:: 2.0.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "CoreImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "remove_from_cache: ",
        "prefix_py": "remove_from_cache=()"
    },
    "set_texture_from_resource": {
        "name": "set_texture_from_resource",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Image",
            "Camera",
            "AsyncImage",
            "RstAsyncImage",
            "RstImage",
            "Selector",
            "Video",
            "VideoPlayerPlayPause",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "parametters": [
            "self",
            "resource"
        ],
        "prefix_kv": "set_texture_from_resource: ",
        "prefix_py": "set_texture_from_resource=()"
    },
    "Scatter": {
        "name": "Scatter",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.bubble import Scatter",
        "help": "Scatter class. See module documentation for more information.\n\n:Events:\n    `on_transform_with_touch`:\n        Fired when the scatter has been transformed by user touch\n        or multitouch, such as panning or zooming.\n    `on_bring_to_front`:\n        Fired when the scatter is brought to the front.\n\n.. versionchanged:: 1.9.0\n    Event `on_bring_to_front` added.\n\n.. versionchanged:: 1.8.0\n    Event `on_transform_with_touch` added.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Scatter:\n    ",
        "prefix_py": "Scatter()"
    },
    "_bring_to_front": {
        "name": "_bring_to_front",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "_bring_to_front: ",
        "prefix_py": "_bring_to_front=()"
    },
    "_get_bbox": {
        "name": "_get_bbox",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_bbox: ",
        "prefix_py": "_get_bbox=()"
    },
    "_get_center": {
        "name": "_get_center",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_center: ",
        "prefix_py": "_get_center=()"
    },
    "_get_do_translation": {
        "name": "_get_do_translation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_do_translation: ",
        "prefix_py": "_get_do_translation=()"
    },
    "_get_pos": {
        "name": "_get_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_pos: ",
        "prefix_py": "_get_pos=()"
    },
    "_get_rotation": {
        "name": "_get_rotation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_rotation: ",
        "prefix_py": "_get_rotation=()"
    },
    "_get_scale": {
        "name": "_get_scale",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_scale: ",
        "prefix_py": "_get_scale=()"
    },
    "_get_x": {
        "name": "_get_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "Vector",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_x: ",
        "prefix_py": "_get_x=()"
    },
    "_get_y": {
        "name": "_get_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "Vector",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_y: ",
        "prefix_py": "_get_y=()"
    },
    "_set_center": {
        "name": "_set_center",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "center"
        ],
        "prefix_kv": "_set_center: ",
        "prefix_py": "_set_center=()"
    },
    "_set_do_translation": {
        "name": "_set_do_translation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_do_translation: ",
        "prefix_py": "_set_do_translation=()"
    },
    "_set_pos": {
        "name": "_set_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "_set_pos: ",
        "prefix_py": "_set_pos=()"
    },
    "_set_rotation": {
        "name": "_set_rotation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "rotation"
        ],
        "prefix_kv": "_set_rotation: ",
        "prefix_py": "_set_rotation=()"
    },
    "_set_scale": {
        "name": "_set_scale",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "scale"
        ],
        "prefix_kv": "_set_scale: ",
        "prefix_py": "_set_scale=()"
    },
    "_set_x": {
        "name": "_set_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "Vector",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x"
        ],
        "prefix_kv": "_set_x: ",
        "prefix_py": "_set_x=()"
    },
    "_set_y": {
        "name": "_set_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "Vector",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "y"
        ],
        "prefix_kv": "_set_y: ",
        "prefix_py": "_set_y=()"
    },
    "apply_transform": {
        "name": "apply_transform",
        "type": "function",
        "help": "Transforms the scatter by applying the \"trans\" transformation\nmatrix (on top of its current transformation state). The resultant\nmatrix can be found in the :attr:`~Scatter.transform` property.\n\n:Parameters:\n    `trans`: :class:`~kivy.graphics.transformation.Matrix`.\n        Transformation matrix to be applied to the scatter widget.\n    `anchor`: tuple, defaults to (0, 0).\n        The point to use as the origin of the transformation\n        (uses local widget space).\n    `post_multiply`: bool, defaults to False.\n        If True, the transform matrix is post multiplied\n        (as if applied before the current transform).\n\nUsage example::\n\n    from kivy.graphics.transformation import Matrix\n    mat = Matrix().scale(3, 3, 3)\n    scatter_instance.apply_transform(mat)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "trans",
            "post_multiply",
            "anchor"
        ],
        "prefix_kv": "apply_transform: ",
        "prefix_py": "apply_transform=()"
    },
    "auto_bring_to_front": {
        "name": "auto_bring_to_front",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "auto_bring_to_front: True",
        "prefix_py": "auto_bring_to_front=True"
    },
    "bbox": {
        "name": "bbox",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "GestureContainer",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "bbox",
        "prefix_py": "bbox."
    },
    "do_collide_after_children": {
        "name": "do_collide_after_children",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_collide_after_children: True",
        "prefix_py": "do_collide_after_children=True"
    },
    "do_rotation": {
        "name": "do_rotation",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_rotation: True",
        "prefix_py": "do_rotation=True"
    },
    "do_scale": {
        "name": "do_scale",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_scale: True",
        "prefix_py": "do_scale=True"
    },
    "do_translation": {
        "name": "do_translation",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_translation",
        "prefix_py": "do_translation."
    },
    "do_translation_x": {
        "name": "do_translation_x",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_translation_x: True",
        "prefix_py": "do_translation_x=True"
    },
    "do_translation_y": {
        "name": "do_translation_y",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "do_translation_y: True",
        "prefix_py": "do_translation_y=True"
    },
    "on_bring_to_front": {
        "name": "on_bring_to_front",
        "type": "function",
        "help": "Called when a touch event causes the scatter to be brought to the\nfront of the parent (only if :attr:`auto_bring_to_front` is True)\n\n:Parameters:\n    `touch`:\n        The touch object which brought the scatter to front.\n\n.. versionadded:: 1.9.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_bring_to_front: ",
        "prefix_py": "on_bring_to_front=()"
    },
    "on_transform": {
        "name": "on_transform",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_transform: ",
        "prefix_py": "on_transform=()"
    },
    "on_transform_with_touch": {
        "name": "on_transform_with_touch",
        "type": "function",
        "help": "Called when a touch event has transformed the scatter widget.\nBy default this does nothing, but can be overridden by derived\nclasses that need to react to transformations caused by user\ninput.\n\n:Parameters:\n    `touch`:\n        The touch object which triggered the transformation.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "on_transform_with_touch: ",
        "prefix_py": "on_transform_with_touch=()"
    },
    "rotation": {
        "name": "rotation",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "rotation",
        "prefix_py": "rotation."
    },
    "scale": {
        "name": "scale",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "Translate",
            "Matrix",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "Scale",
            "Transform",
            "VKeyboard"
        ],
        "prefix_kv": "scale",
        "prefix_py": "scale."
    },
    "scale_max": {
        "name": "scale_max",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "scale_max: ",
        "prefix_py": "scale_max="
    },
    "scale_min": {
        "name": "scale_min",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "scale_min: ",
        "prefix_py": "scale_min="
    },
    "transform": {
        "name": "transform",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "Translate",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "Scale",
            "Transform",
            "VKeyboard"
        ],
        "prefix_kv": "transform: ",
        "prefix_py": "transform="
    },
    "transform_inv": {
        "name": "transform_inv",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "transform_inv: ",
        "prefix_py": "transform_inv="
    },
    "transform_with_touch": {
        "name": "transform_with_touch",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "transform_with_touch: ",
        "prefix_py": "transform_with_touch=()"
    },
    "translation_touches": {
        "name": "translation_touches",
        "type": "BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scatter",
            "ScatterPlane",
            "ScatterLayout",
            "ScatterPlaneLayout",
            "VKeyboard"
        ],
        "prefix_kv": "translation_touches: ",
        "prefix_py": "translation_touches="
    },
    "Camera": {
        "name": "Camera",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.camera import Camera",
        "help": "Camera class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Camera:\n    ",
        "prefix_py": "Camera()"
    },
    "_on_index": {
        "name": "_on_index",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Camera"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_on_index: ",
        "prefix_py": "_on_index=()"
    },
    "index": {
        "name": "index",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Camera",
            "Carousel",
            "FileChooserProgress",
            "FileChooserProgressBase",
            "string_types",
            "Vector",
            "nodeclass",
            "role_doc",
            "role_video",
            "BindTexture",
            "text_type"
        ],
        "prefix_kv": "index: ",
        "prefix_py": "index="
    },
    "on_play": {
        "name": "on_play",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Camera",
            "RstVideoPlayer",
            "VideoPlayer",
            "Video"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_play: ",
        "prefix_py": "on_play=()"
    },
    "on_tex": {
        "name": "on_tex",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Camera"
        ],
        "parametters": [
            "self",
            "camera"
        ],
        "prefix_kv": "on_tex: ",
        "prefix_py": "on_tex=()"
    },
    "play": {
        "name": "play",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Camera",
            "RstVideoPlayer",
            "VideoPlayer",
            "CoreVideo",
            "Video"
        ],
        "prefix_kv": "play: True",
        "prefix_py": "play=True"
    },
    "resolution": {
        "name": "resolution",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Camera"
        ],
        "prefix_kv": "resolution: ()",
        "prefix_py": "resolution=()"
    },
    "Carousel": {
        "name": "Carousel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.carousel import Carousel",
        "help": "Carousel class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Carousel:\n    ",
        "prefix_py": "Carousel()"
    },
    "_change_touch_mode_ev": {
        "name": "_change_touch_mode_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_change_touch_mode_ev: ",
        "prefix_py": "_change_touch_mode_ev=()"
    },
    "_curr_slide": {
        "name": "_curr_slide",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_curr_slide: ",
        "prefix_py": "_curr_slide=()"
    },
    "_current": {
        "name": "_current",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_current: ",
        "prefix_py": "_current="
    },
    "_get_index": {
        "name": "_get_index",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_index: ",
        "prefix_py": "_get_index=()"
    },
    "_get_slides_container": {
        "name": "_get_slides_container",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_slides_container: ",
        "prefix_py": "_get_slides_container=()"
    },
    "_index": {
        "name": "_index",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_index: ",
        "prefix_py": "_index="
    },
    "_insert_visible_slides": {
        "name": "_insert_visible_slides",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "_next_slide",
            "_prev_slide"
        ],
        "prefix_kv": "_insert_visible_slides: ",
        "prefix_py": "_insert_visible_slides=()"
    },
    "_next": {
        "name": "_next",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_next: ",
        "prefix_py": "_next="
    },
    "_next_slide": {
        "name": "_next_slide",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_next_slide: ",
        "prefix_py": "_next_slide=()"
    },
    "_offset": {
        "name": "_offset",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_offset: ",
        "prefix_py": "_offset="
    },
    "_position_visible_slides": {
        "name": "_position_visible_slides",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_position_visible_slides: ",
        "prefix_py": "_position_visible_slides=()"
    },
    "_prev": {
        "name": "_prev",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_prev: ",
        "prefix_py": "_prev="
    },
    "_prev_equals_next": {
        "name": "_prev_equals_next",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_prev_equals_next: ",
        "prefix_py": "_prev_equals_next="
    },
    "_prev_slide": {
        "name": "_prev_slide",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_prev_slide: ",
        "prefix_py": "_prev_slide=()"
    },
    "_set_index": {
        "name": "_set_index",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_index: ",
        "prefix_py": "_set_index=()"
    },
    "_start_animation": {
        "name": "_start_animation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "args",
            "kwargs"
        ],
        "prefix_kv": "_start_animation: ",
        "prefix_py": "_start_animation=()"
    },
    "_touch": {
        "name": "_touch",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "_touch: ",
        "prefix_py": "_touch="
    },
    "anim_cancel_duration": {
        "name": "anim_cancel_duration",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "anim_cancel_duration: ",
        "prefix_py": "anim_cancel_duration="
    },
    "anim_move_duration": {
        "name": "anim_move_duration",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "anim_move_duration: ",
        "prefix_py": "anim_move_duration="
    },
    "anim_type": {
        "name": "anim_type",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "anim_type: ''",
        "prefix_py": "anim_type=''"
    },
    "current_slide": {
        "name": "current_slide",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "current_slide",
        "prefix_py": "current_slide."
    },
    "direction": {
        "name": "direction",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel",
            "CardTransition",
            "SlideTransition"
        ],
        "prefix_kv": "direction: ''",
        "prefix_py": "direction=''"
    },
    "get_slide_container": {
        "name": "get_slide_container",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "slide"
        ],
        "prefix_kv": "get_slide_container: ",
        "prefix_py": "get_slide_container=()"
    },
    "ignore_perpendicular_swipes": {
        "name": "ignore_perpendicular_swipes",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "ignore_perpendicular_swipes: True",
        "prefix_py": "ignore_perpendicular_swipes=True"
    },
    "load_next": {
        "name": "load_next",
        "type": "function",
        "help": "Animate to the next slide.\n\n.. versionadded:: 1.7.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "mode"
        ],
        "prefix_kv": "load_next: ",
        "prefix_py": "load_next=()"
    },
    "load_previous": {
        "name": "load_previous",
        "type": "function",
        "help": "Animate to the previous slide.\n\n.. versionadded:: 1.7.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "load_previous: ",
        "prefix_py": "load_previous=()"
    },
    "load_slide": {
        "name": "load_slide",
        "type": "function",
        "help": "Animate to the slide that is passed as the argument.\n\n.. versionchanged:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "slide"
        ],
        "prefix_kv": "load_slide: ",
        "prefix_py": "load_slide=()"
    },
    "loop": {
        "name": "loop",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "loop: True",
        "prefix_py": "loop=True"
    },
    "min_move": {
        "name": "min_move",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "min_move: ",
        "prefix_py": "min_move="
    },
    "next_slide": {
        "name": "next_slide",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "next_slide",
        "prefix_py": "next_slide."
    },
    "on__offset": {
        "name": "on__offset",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on__offset: ",
        "prefix_py": "on__offset=()"
    },
    "on_index": {
        "name": "on_index",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_index: ",
        "prefix_py": "on_index=()"
    },
    "on_slides": {
        "name": "on_slides",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Carousel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_slides: ",
        "prefix_py": "on_slides=()"
    },
    "previous_slide": {
        "name": "previous_slide",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "previous_slide",
        "prefix_py": "previous_slide."
    },
    "slides": {
        "name": "slides",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "slides: ()",
        "prefix_py": "slides=()"
    },
    "slides_container": {
        "name": "slides_container",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Carousel"
        ],
        "prefix_kv": "slides_container",
        "prefix_py": "slides_container."
    },
    "StencilView": {
        "name": "StencilView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.carousel import StencilView",
        "help": "StencilView class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "StencilView:\n    ",
        "prefix_py": "StencilView()"
    },
    "BBCodeFormatter": {
        "name": "BBCodeFormatter",
        "type": "type",
        "import": "from kivy.uix.codeinput import BBCodeFormatter",
        "help": "Format tokens with BBcodes. These formatting codes are used by many\nbulletin boards, so you can highlight your sourcecode with pygments before\nposting it there.\n\nThis formatter has no support for background colors and borders, as there\nare no common BBcode tags for that.\n\nSome board systems (e.g. phpBB) don't support colors in their [code] tag,\nso you can't use the highlighting together with that tag.\nText in a [code] tag usually is shown with a monospace font (which this\nformatter can do with the ``monofont`` option) and no spaces (which you\nneed for indentation) are removed.\n\nAdditional options accepted:\n\n`style`\n    The style to use, can be a string or a Style subclass (default:\n    ``'default'``).\n\n`codetag`\n    If set to true, put the output into ``[code]`` tags (default:\n    ``false``)\n\n`monofont`\n    If set to true, add a tag to show the code with a monospace font\n    (default: ``false``).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BBCodeFormatter: ",
        "prefix_py": "BBCodeFormatter="
    },
    "_make_styles": {
        "name": "_make_styles",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "BBCodeFormatter"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_make_styles: ",
        "prefix_py": "_make_styles=()"
    },
    "aliases": {
        "name": "aliases",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BBCodeFormatter"
        ],
        "prefix_kv": "aliases: ()",
        "prefix_py": "aliases=()"
    },
    "filenames": {
        "name": "filenames",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BBCodeFormatter"
        ],
        "prefix_kv": "filenames: ()",
        "prefix_py": "filenames=()"
    },
    "format": {
        "name": "format",
        "type": "function",
        "help": "This method must format the tokens from the `tokensource` iterable and\nwrite the formatted version to the file object `outfile`.\n\nFormatter options can control how exactly the tokens are converted.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "BBCodeFormatter",
            "string_types",
            "text_type"
        ],
        "parametters": [
            "self",
            "tokensource",
            "outfile"
        ],
        "prefix_kv": "format: ",
        "prefix_py": "format=()"
    },
    "format_unencoded": {
        "name": "format_unencoded",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "BBCodeFormatter"
        ],
        "parametters": [
            "self",
            "tokensource",
            "outfile"
        ],
        "prefix_kv": "format_unencoded: ",
        "prefix_py": "format_unencoded=()"
    },
    "get_style_defs": {
        "name": "get_style_defs",
        "type": "function",
        "help": "This method must return statements or declarations suitable to define\nthe current style for subsequent highlighted text (e.g. CSS classes\nin the `HTMLFormatter`).\n\nThe optional argument `arg` can be used to modify the generation and\nis formatter dependent (it is standardized because it can be given on\nthe command line).\n\nThis method is called by the ``-S`` :doc:`command-line option <cmdline>`,\nthe `arg` is then given by the ``-a`` option.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "BBCodeFormatter"
        ],
        "parametters": [
            "self",
            "arg"
        ],
        "prefix_kv": "get_style_defs: ",
        "prefix_py": "get_style_defs=()"
    },
    "unicodeoutput": {
        "name": "unicodeoutput",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BBCodeFormatter"
        ],
        "prefix_kv": "unicodeoutput: True",
        "prefix_py": "unicodeoutput=True"
    },
    "Cache": {
        "name": "Cache",
        "type": "type",
        "import": "from kivy.uix.codeinput import Cache",
        "help": "See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Cache: ",
        "prefix_py": "Cache="
    },
    "_categories": {
        "name": "_categories",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Cache"
        ],
        "prefix_kv": "_categories: {}",
        "prefix_py": "_categories={}"
    },
    "_objects": {
        "name": "_objects",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Cache"
        ],
        "prefix_kv": "_objects: {}",
        "prefix_py": "_objects={}"
    },
    "_purge_by_timeout": {
        "name": "_purge_by_timeout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache"
        ],
        "parametters": [
            "dt"
        ],
        "prefix_kv": "_purge_by_timeout: ",
        "prefix_py": "_purge_by_timeout=()"
    },
    "_purge_oldest": {
        "name": "_purge_oldest",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache"
        ],
        "parametters": [
            "category",
            "maxpurge"
        ],
        "prefix_kv": "_purge_oldest: ",
        "prefix_py": "_purge_oldest=()"
    },
    "append": {
        "name": "append",
        "type": "function",
        "help": "Add a new object to the cache.\n\n:Parameters:\n    `category`: str\n        Identifier of the category.\n    `key`: str\n        Unique identifier of the object to store.\n    `obj`: object\n        Object to store in cache.\n    `timeout`: double (optional)\n        Time after which to delete the object if it has not been used.\n        If None, no timeout is applied.\n\n:raises:\n    `ValueError`: If `None` is used as `key`.\n\n.. versionchanged:: 2.0.0\n    Raises `ValueError` if `None` is used as `key`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache",
            "Vector",
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "category",
            "key",
            "obj",
            "timeout"
        ],
        "prefix_kv": "append: ",
        "prefix_py": "append=()"
    },
    "get_lastaccess": {
        "name": "get_lastaccess",
        "type": "function",
        "help": "Get the objects last access time in the cache.\n\n:Parameters:\n    `category`: str\n        Identifier of the category.\n    `key`: str\n        Unique identifier of the object in the store.\n    `default`: anything, defaults to None\n        Default value to be returned if the key is not found.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache"
        ],
        "parametters": [
            "category",
            "key",
            "default"
        ],
        "prefix_kv": "get_lastaccess: ",
        "prefix_py": "get_lastaccess=()"
    },
    "get_timestamp": {
        "name": "get_timestamp",
        "type": "function",
        "help": "Get the object timestamp in the cache.\n\n:Parameters:\n    `category`: str\n        Identifier of the category.\n    `key`: str\n        Unique identifier of the object in the store.\n    `default`: anything, defaults to None\n        Default value to be returned if the key is not found.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache"
        ],
        "parametters": [
            "category",
            "key",
            "default"
        ],
        "prefix_kv": "get_timestamp: ",
        "prefix_py": "get_timestamp=()"
    },
    "print_usage": {
        "name": "print_usage",
        "type": "function",
        "help": "Print the cache usage to the console.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache"
        ],
        "parametters": [],
        "prefix_kv": "print_usage: ",
        "prefix_py": "print_usage=()"
    },
    "register": {
        "name": "register",
        "type": "function",
        "help": "Register a new category in the cache with the specified limit.\n\n:Parameters:\n    `category`: str\n        Identifier of the category.\n    `limit`: int (optional)\n        Maximum number of objects allowed in the cache.\n        If None, no limit is applied.\n    `timeout`: double (optional)\n        Time after which to delete the object if it has not been used.\n        If None, no timeout is applied.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Cache",
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "category",
            "limit",
            "timeout"
        ],
        "prefix_kv": "register: ",
        "prefix_py": "register=()"
    },
    "CodeInput": {
        "name": "CodeInput",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.codeinput import CodeInput",
        "help": "CodeInput class, used for displaying highlighted code.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CodeInput:\n    ",
        "prefix_py": "CodeInput()"
    },
    "_adjust_viewport": {
        "name": "_adjust_viewport",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "cc",
            "cr"
        ],
        "prefix_kv": "_adjust_viewport: ",
        "prefix_py": "_adjust_viewport=()"
    },
    "_auto_indent": {
        "name": "_auto_indent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "substring"
        ],
        "prefix_kv": "_auto_indent: ",
        "prefix_py": "_auto_indent=()"
    },
    "_cancel_update_selection": {
        "name": "_cancel_update_selection",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "_cancel_update_selection: ",
        "prefix_py": "_cancel_update_selection=()"
    },
    "_create_line_label": {
        "name": "_create_line_label",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "text",
            "hint"
        ],
        "prefix_kv": "_create_line_label: ",
        "prefix_py": "_create_line_label=()"
    },
    "_cursor_blink": {
        "name": "_cursor_blink",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_cursor_blink: True",
        "prefix_py": "_cursor_blink=True"
    },
    "_cursor_offset": {
        "name": "_cursor_offset",
        "type": "function",
        "help": "Get the cursor x offset on the current line\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_cursor_offset: ",
        "prefix_py": "_cursor_offset=()"
    },
    "_cursor_visual_height": {
        "name": "_cursor_visual_height",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_cursor_visual_height",
        "prefix_py": "_cursor_visual_height."
    },
    "_cursor_visual_pos": {
        "name": "_cursor_visual_pos",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_cursor_visual_pos",
        "prefix_py": "_cursor_visual_pos."
    },
    "_cut": {
        "name": "_cut",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "data"
        ],
        "prefix_kv": "_cut: ",
        "prefix_py": "_cut=()"
    },
    "_delete_line": {
        "name": "_delete_line",
        "type": "function",
        "help": "Delete current line, and fix cursor position",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "idx"
        ],
        "prefix_kv": "_delete_line: ",
        "prefix_py": "_delete_line=()"
    },
    "_do_blink_cursor": {
        "name": "_do_blink_cursor",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_do_blink_cursor: ",
        "prefix_py": "_do_blink_cursor=()"
    },
    "_draw_line": {
        "name": "_draw_line",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "value",
            "line_num",
            "texture",
            "viewport_pos",
            "line_height",
            "miny",
            "maxy",
            "x",
            "y",
            "base_dir",
            "halign",
            "rects",
            "auto_halign_r"
        ],
        "prefix_kv": "_draw_line: ",
        "prefix_py": "_draw_line=()"
    },
    "_draw_selection": {
        "name": "_draw_selection",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "pos",
            "size",
            "line_num",
            "selection_start",
            "selection_end",
            "lines",
            "get_text_width",
            "tab_width",
            "label_cached",
            "width_minus_padding",
            "padding_left",
            "padding_right",
            "x",
            "canvas_add",
            "selection_color"
        ],
        "prefix_kv": "_draw_selection: ",
        "prefix_py": "_draw_selection=()"
    },
    "_editable": {
        "name": "_editable",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_editable: True",
        "prefix_py": "_editable=True"
    },
    "_ensure_clipboard": {
        "name": "_ensure_clipboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_ensure_clipboard: ",
        "prefix_py": "_ensure_clipboard=()"
    },
    "_expand_range": {
        "name": "_expand_range",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "ifrom",
            "ito"
        ],
        "prefix_kv": "_expand_range: ",
        "prefix_py": "_expand_range=()"
    },
    "_expand_rows": {
        "name": "_expand_rows",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "rfrom",
            "rto"
        ],
        "prefix_kv": "_expand_rows: ",
        "prefix_py": "_expand_rows=()"
    },
    "_get_bbcode": {
        "name": "_get_bbcode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self",
            "ntext"
        ],
        "prefix_kv": "_get_bbcode: ",
        "prefix_py": "_get_bbcode=()"
    },
    "_get_cursor": {
        "name": "_get_cursor",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor: ",
        "prefix_py": "_get_cursor=()"
    },
    "_get_cursor_col": {
        "name": "_get_cursor_col",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor_col: ",
        "prefix_py": "_get_cursor_col=()"
    },
    "_get_cursor_pos": {
        "name": "_get_cursor_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor_pos: ",
        "prefix_py": "_get_cursor_pos=()"
    },
    "_get_cursor_row": {
        "name": "_get_cursor_row",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor_row: ",
        "prefix_py": "_get_cursor_row=()"
    },
    "_get_cursor_visual_height": {
        "name": "_get_cursor_visual_height",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor_visual_height: ",
        "prefix_py": "_get_cursor_visual_height=()"
    },
    "_get_cursor_visual_pos": {
        "name": "_get_cursor_visual_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_cursor_visual_pos: ",
        "prefix_py": "_get_cursor_visual_pos=()"
    },
    "_get_hint_text": {
        "name": "_get_hint_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_hint_text: ",
        "prefix_py": "_get_hint_text=()"
    },
    "_get_line_from_cursor": {
        "name": "_get_line_from_cursor",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "start",
            "new_text",
            "lines",
            "lines_flags"
        ],
        "prefix_kv": "_get_line_from_cursor: ",
        "prefix_py": "_get_line_from_cursor=()"
    },
    "_get_line_options": {
        "name": "_get_line_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_line_options: ",
        "prefix_py": "_get_line_options=()"
    },
    "_get_min_height": {
        "name": "_get_min_height",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_min_height: ",
        "prefix_py": "_get_min_height=()"
    },
    "_get_row_width": {
        "name": "_get_row_width",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "row"
        ],
        "prefix_kv": "_get_row_width: ",
        "prefix_py": "_get_row_width=()"
    },
    "_get_text": {
        "name": "_get_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "Label",
            "TextInput",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_text: ",
        "prefix_py": "_get_text=()"
    },
    "_get_text_width": {
        "name": "_get_text_width",
        "type": "function",
        "help": "Return the width of a text, according to the current line options",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "text",
            "tab_width",
            "_label_cached"
        ],
        "prefix_kv": "_get_text_width: ",
        "prefix_py": "_get_text_width=()"
    },
    "_handle_command": {
        "name": "_handle_command",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "command"
        ],
        "prefix_kv": "_handle_command: ",
        "prefix_py": "_handle_command=()"
    },
    "_handle_move": {
        "name": "_handle_move",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "touch"
        ],
        "prefix_kv": "_handle_move: ",
        "prefix_py": "_handle_move=()"
    },
    "_handle_pressed": {
        "name": "_handle_pressed",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "_handle_pressed: ",
        "prefix_py": "_handle_pressed=()"
    },
    "_handle_released": {
        "name": "_handle_released",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "_handle_released: ",
        "prefix_py": "_handle_released=()"
    },
    "_handle_shortcut": {
        "name": "_handle_shortcut",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "key"
        ],
        "prefix_kv": "_handle_shortcut: ",
        "prefix_py": "_handle_shortcut=()"
    },
    "_hide_cut_copy_paste": {
        "name": "_hide_cut_copy_paste",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "win"
        ],
        "prefix_kv": "_hide_cut_copy_paste: ",
        "prefix_py": "_hide_cut_copy_paste=()"
    },
    "_hide_handles": {
        "name": "_hide_handles",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "win"
        ],
        "prefix_kv": "_hide_handles: ",
        "prefix_py": "_hide_handles=()"
    },
    "_hint_text": {
        "name": "_hint_text",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_hint_text: ''",
        "prefix_py": "_hint_text=''"
    },
    "_hint_text_lines": {
        "name": "_hint_text_lines",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_hint_text_lines: ()",
        "prefix_py": "_hint_text_lines=()"
    },
    "_ime_composition": {
        "name": "_ime_composition",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_ime_composition: ''",
        "prefix_py": "_ime_composition=''"
    },
    "_ime_cursor": {
        "name": "_ime_cursor",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_ime_cursor: ()",
        "prefix_py": "_ime_cursor=()"
    },
    "_insert_float_pat": {
        "name": "_insert_float_pat",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_insert_float_pat: ",
        "prefix_py": "_insert_float_pat=()"
    },
    "_insert_int_pat": {
        "name": "_insert_int_pat",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_insert_int_pat: ",
        "prefix_py": "_insert_int_pat=()"
    },
    "_insert_lines": {
        "name": "_insert_lines",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "start",
            "finish",
            "len_lines",
            "_lines_flags",
            "_lines",
            "_lines_labels",
            "_line_rects"
        ],
        "prefix_kv": "_insert_lines: ",
        "prefix_py": "_insert_lines=()"
    },
    "_key_down": {
        "name": "_key_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "key",
            "repeat"
        ],
        "prefix_kv": "_key_down: ",
        "prefix_py": "_key_down=()"
    },
    "_key_up": {
        "name": "_key_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "key",
            "repeat"
        ],
        "prefix_kv": "_key_up: ",
        "prefix_py": "_key_up=()"
    },
    "_lines": {
        "name": "_lines",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_lines: ()",
        "prefix_py": "_lines=()"
    },
    "_move_cursor_down": {
        "name": "_move_cursor_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "col",
            "row",
            "control",
            "alt"
        ],
        "prefix_kv": "_move_cursor_down: ",
        "prefix_py": "_move_cursor_down=()"
    },
    "_move_cursor_up": {
        "name": "_move_cursor_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "col",
            "row",
            "control",
            "alt"
        ],
        "prefix_kv": "_move_cursor_up: ",
        "prefix_py": "_move_cursor_up=()"
    },
    "_on_textinput_focused": {
        "name": "_on_textinput_focused",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value",
            "largs"
        ],
        "prefix_kv": "_on_textinput_focused: ",
        "prefix_py": "_on_textinput_focused=()"
    },
    "_position_handles": {
        "name": "_position_handles",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "args",
            "kwargs"
        ],
        "prefix_kv": "_position_handles: ",
        "prefix_py": "_position_handles=()"
    },
    "_re_whitespace": {
        "name": "_re_whitespace",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_re_whitespace: ",
        "prefix_py": "_re_whitespace=()"
    },
    "_refresh_hint_text": {
        "name": "_refresh_hint_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_refresh_hint_text: ",
        "prefix_py": "_refresh_hint_text=()"
    },
    "_refresh_line_options": {
        "name": "_refresh_line_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_refresh_line_options: ",
        "prefix_py": "_refresh_line_options=()"
    },
    "_refresh_text": {
        "name": "_refresh_text",
        "type": "function",
        "help": "Refresh all the lines from a new text.\nBy using cache in internal functions, this method should be fast.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "text",
            "largs"
        ],
        "prefix_kv": "_refresh_text: ",
        "prefix_py": "_refresh_text=()"
    },
    "_refresh_text_from_property": {
        "name": "_refresh_text_from_property",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_refresh_text_from_property: ",
        "prefix_py": "_refresh_text_from_property=()"
    },
    "_refresh_text_from_trigger": {
        "name": "_refresh_text_from_trigger",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "dt",
            "largs"
        ],
        "prefix_kv": "_refresh_text_from_trigger: ",
        "prefix_py": "_refresh_text_from_trigger=()"
    },
    "_reload_remove_observer": {
        "name": "_reload_remove_observer",
        "type": "function",
        "help": "called when the textinput is deleted",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "wr"
        ],
        "prefix_kv": "_reload_remove_observer: ",
        "prefix_py": "_reload_remove_observer=()"
    },
    "_reset_cursor_blink": {
        "name": "_reset_cursor_blink",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_reset_cursor_blink: ",
        "prefix_py": "_reset_cursor_blink=()"
    },
    "_resolved_base_dir": {
        "name": "_resolved_base_dir",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_resolved_base_dir: ",
        "prefix_py": "_resolved_base_dir=()"
    },
    "_select_word": {
        "name": "_select_word",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "delimiters"
        ],
        "prefix_kv": "_select_word: ",
        "prefix_py": "_select_word=()"
    },
    "_set_cursor": {
        "name": "_set_cursor",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "_set_cursor: ",
        "prefix_py": "_set_cursor=()"
    },
    "_set_hint_text": {
        "name": "_set_hint_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_hint_text: ",
        "prefix_py": "_set_hint_text=()"
    },
    "_set_line_text": {
        "name": "_set_line_text",
        "type": "function",
        "help": "Set current line with other text than the default one.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "line_num",
            "text"
        ],
        "prefix_kv": "_set_line_text: ",
        "prefix_py": "_set_line_text=()"
    },
    "_set_text": {
        "name": "_set_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "Label",
            "TextInput",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "text"
        ],
        "prefix_kv": "_set_text: ",
        "prefix_py": "_set_text=()"
    },
    "_set_unredo_bkspc": {
        "name": "_set_unredo_bkspc",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "ol_index",
            "new_index",
            "substring",
            "from_undo",
            "mode"
        ],
        "prefix_kv": "_set_unredo_bkspc: ",
        "prefix_py": "_set_unredo_bkspc=()"
    },
    "_set_unredo_delsel": {
        "name": "_set_unredo_delsel",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "a",
            "b",
            "substring",
            "from_undo"
        ],
        "prefix_kv": "_set_unredo_delsel: ",
        "prefix_py": "_set_unredo_delsel=()"
    },
    "_set_unredo_insert": {
        "name": "_set_unredo_insert",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "ci",
            "sci",
            "substring",
            "from_undo"
        ],
        "prefix_kv": "_set_unredo_insert: ",
        "prefix_py": "_set_unredo_insert=()"
    },
    "_shift_lines": {
        "name": "_shift_lines",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "direction",
            "rows",
            "old_cursor",
            "from_undo"
        ],
        "prefix_kv": "_shift_lines: ",
        "prefix_py": "_shift_lines=()"
    },
    "_show_cut_copy_paste": {
        "name": "_show_cut_copy_paste",
        "type": "function",
        "help": "Show a bubble with cut copy and paste buttons",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "pos",
            "win",
            "parent_changed",
            "mode",
            "pos_in_window",
            "l"
        ],
        "prefix_kv": "_show_cut_copy_paste: ",
        "prefix_py": "_show_cut_copy_paste=()"
    },
    "_show_handles": {
        "name": "_show_handles",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_show_handles: ",
        "prefix_py": "_show_handles=()"
    },
    "_split_smart": {
        "name": "_split_smart",
        "type": "function",
        "help": "Do a \"smart\" split. If not multiline, or if wrap is set,\nwe are not doing smart split, just a split on line break.\nOtherwise, we are trying to split as soon as possible, to prevent\noverflow on the widget.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "text"
        ],
        "prefix_kv": "_split_smart: ",
        "prefix_py": "_split_smart=()"
    },
    "_tokenize": {
        "name": "_tokenize",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "text"
        ],
        "prefix_kv": "_tokenize: ",
        "prefix_py": "_tokenize=()"
    },
    "_tokenize_delimiters": {
        "name": "_tokenize_delimiters",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "_tokenize_delimiters: ''",
        "prefix_py": "_tokenize_delimiters=''"
    },
    "_trigger_refresh_line_options": {
        "name": "_trigger_refresh_line_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_trigger_refresh_line_options: ",
        "prefix_py": "_trigger_refresh_line_options=()"
    },
    "_trigger_refresh_text": {
        "name": "_trigger_refresh_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_trigger_refresh_text: ",
        "prefix_py": "_trigger_refresh_text=()"
    },
    "_trigger_update_graphics": {
        "name": "_trigger_update_graphics",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_trigger_update_graphics: ",
        "prefix_py": "_trigger_update_graphics=()"
    },
    "_update_cutbuffer": {
        "name": "_update_cutbuffer",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_cutbuffer: ",
        "prefix_py": "_update_cutbuffer=()"
    },
    "_update_graphics": {
        "name": "_update_graphics",
        "type": "function",
        "help": "Update all the graphics according to the current internal values.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_graphics: ",
        "prefix_py": "_update_graphics=()"
    },
    "_update_graphics_selection": {
        "name": "_update_graphics_selection",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_update_graphics_selection: ",
        "prefix_py": "_update_graphics_selection=()"
    },
    "_update_selection": {
        "name": "_update_selection",
        "type": "function",
        "help": "Update selection text and order of from/to if finished is True.\nCan be called multiple times until finished is True.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "finished"
        ],
        "prefix_kv": "_update_selection: ",
        "prefix_py": "_update_selection=()"
    },
    "_update_text_options": {
        "name": "_update_text_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_text_options: ",
        "prefix_py": "_update_text_options=()"
    },
    "allow_copy": {
        "name": "allow_copy",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "allow_copy: True",
        "prefix_py": "allow_copy=True"
    },
    "auto_indent": {
        "name": "auto_indent",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "auto_indent: True",
        "prefix_py": "auto_indent=True"
    },
    "background_active": {
        "name": "background_active",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "background_active: ''",
        "prefix_py": "background_active=''"
    },
    "cancel_long_touch_event": {
        "name": "cancel_long_touch_event",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "cancel_long_touch_event: ",
        "prefix_py": "cancel_long_touch_event=()"
    },
    "cancel_selection": {
        "name": "cancel_selection",
        "type": "function",
        "help": "Cancel current selection (if any).\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "cancel_selection: ",
        "prefix_py": "cancel_selection=()"
    },
    "copy": {
        "name": "copy",
        "type": "function",
        "help": "Copy the value provided in argument `data` into current clipboard.\nIf data is not of type string it will be converted to string.\nIf no data is provided then current selection if present is copied.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput",
            "Vector",
            "defaultdict",
            "ObservableDict",
            "nodeclass",
            "role_doc",
            "role_video",
            "Context"
        ],
        "parametters": [
            "self",
            "data"
        ],
        "prefix_kv": "copy: ",
        "prefix_py": "copy=()"
    },
    "cursor": {
        "name": "cursor",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor",
        "prefix_py": "cursor."
    },
    "cursor_blink": {
        "name": "cursor_blink",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor_blink: True",
        "prefix_py": "cursor_blink=True"
    },
    "cursor_col": {
        "name": "cursor_col",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor_col",
        "prefix_py": "cursor_col."
    },
    "cursor_color": {
        "name": "cursor_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor_color: ",
        "prefix_py": "cursor_color=()"
    },
    "cursor_index": {
        "name": "cursor_index",
        "type": "function",
        "help": "Return the cursor index in the text/value.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "cursor"
        ],
        "prefix_kv": "cursor_index: ",
        "prefix_py": "cursor_index=()"
    },
    "cursor_offset": {
        "name": "cursor_offset",
        "type": "function",
        "help": "Get the cursor x offset on the current line.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "cursor_offset: ",
        "prefix_py": "cursor_offset=()"
    },
    "cursor_pos": {
        "name": "cursor_pos",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor_pos",
        "prefix_py": "cursor_pos."
    },
    "cursor_row": {
        "name": "cursor_row",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "cursor_row",
        "prefix_py": "cursor_row."
    },
    "cursor_width": {
        "name": "cursor_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput",
            "Slider"
        ],
        "prefix_kv": "cursor_width: ",
        "prefix_py": "cursor_width="
    },
    "cut": {
        "name": "cut",
        "type": "function",
        "help": "Copy current selection to clipboard then delete it from TextInput.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "cut: ",
        "prefix_py": "cut=()"
    },
    "delete_selection": {
        "name": "delete_selection",
        "type": "function",
        "help": "Delete the current text selection (if any).\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "from_undo"
        ],
        "prefix_kv": "delete_selection: ",
        "prefix_py": "delete_selection=()"
    },
    "disabled_foreground_color": {
        "name": "disabled_foreground_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "disabled_foreground_color: ",
        "prefix_py": "disabled_foreground_color=()"
    },
    "do_backspace": {
        "name": "do_backspace",
        "type": "function",
        "help": "Do backspace operation from the current cursor position.\nThis action might do several things:\n\n    - removing the current selection if available.\n    - removing the previous char and move the cursor back.\n    - do nothing, if we are at the start.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "from_undo",
            "mode"
        ],
        "prefix_kv": "do_backspace: ",
        "prefix_py": "do_backspace=()"
    },
    "do_cursor_movement": {
        "name": "do_cursor_movement",
        "type": "function",
        "help": "Move the cursor relative to its current position.\nAction can be one of :\n\n    - cursor_left: move the cursor to the left\n    - cursor_right: move the cursor to the right\n    - cursor_up: move the cursor on the previous line\n    - cursor_down: move the cursor on the next line\n    - cursor_home: move the cursor at the start of the current line\n    - cursor_end: move the cursor at the end of current line\n    - cursor_pgup: move one \"page\" before\n    - cursor_pgdown: move one \"page\" after\n\nIn addition, the behavior of certain actions can be modified:\n\n    - control + cursor_left: move the cursor one word to the left\n    - control + cursor_right: move the cursor one word to the right\n    - control + cursor_up: scroll up one line\n    - control + cursor_down: scroll down one line\n    - control + cursor_home: go to beginning of text\n    - control + cursor_end: go to end of text\n    - alt + cursor_up: shift line(s) up\n    - alt + cursor_down: shift line(s) down\n\n.. versionchanged:: 1.9.1",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "action",
            "control",
            "alt"
        ],
        "prefix_kv": "do_cursor_movement: ",
        "prefix_py": "do_cursor_movement=()"
    },
    "do_redo": {
        "name": "do_redo",
        "type": "function",
        "help": "Do redo operation.\n\n.. versionadded:: 1.3.0\n\nThis action re-does any command that has been un-done by\ndo_undo/ctrl+z. This function is automatically called when\n`ctrl+r` keys are pressed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "do_redo: ",
        "prefix_py": "do_redo=()"
    },
    "do_undo": {
        "name": "do_undo",
        "type": "function",
        "help": "Do undo operation.\n\n.. versionadded:: 1.3.0\n\nThis action un-does any edits that have been made since the last\ncall to reset_undo().\nThis function is automatically called when `ctrl+z` keys are pressed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "do_undo: ",
        "prefix_py": "do_undo=()"
    },
    "do_wrap": {
        "name": "do_wrap",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "do_wrap: True",
        "prefix_py": "do_wrap=True"
    },
    "foreground_color": {
        "name": "foreground_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput",
            "ColorPicker"
        ],
        "prefix_kv": "foreground_color: ",
        "prefix_py": "foreground_color=()"
    },
    "get_cursor_from_index": {
        "name": "get_cursor_from_index",
        "type": "function",
        "help": "Return the (col, row) of the cursor from text index.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "index"
        ],
        "prefix_kv": "get_cursor_from_index: ",
        "prefix_py": "get_cursor_from_index=()"
    },
    "get_cursor_from_xy": {
        "name": "get_cursor_from_xy",
        "type": "function",
        "help": "Return the (col, row) of the cursor from an (x, y) position.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "get_cursor_from_xy: ",
        "prefix_py": "get_cursor_from_xy=()"
    },
    "get_max_scroll_x": {
        "name": "get_max_scroll_x",
        "type": "function",
        "help": "Return how many pixels it needs to scroll to the right\nto reveal the remaining content of a text that extends\nbeyond the visible width of a TextInput",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_max_scroll_x: ",
        "prefix_py": "get_max_scroll_x=()"
    },
    "get_sel_from": {
        "name": "get_sel_from",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_sel_from: ",
        "prefix_py": "get_sel_from=()"
    },
    "get_sel_to": {
        "name": "get_sel_to",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_sel_to: ",
        "prefix_py": "get_sel_to=()"
    },
    "handle_image_left": {
        "name": "handle_image_left",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "handle_image_left: ''",
        "prefix_py": "handle_image_left=''"
    },
    "handle_image_middle": {
        "name": "handle_image_middle",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "handle_image_middle: ''",
        "prefix_py": "handle_image_middle=''"
    },
    "handle_image_right": {
        "name": "handle_image_right",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "handle_image_right: ''",
        "prefix_py": "handle_image_right=''"
    },
    "hint_text": {
        "name": "hint_text",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "hint_text",
        "prefix_py": "hint_text."
    },
    "hint_text_color": {
        "name": "hint_text_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "hint_text_color: ",
        "prefix_py": "hint_text_color=()"
    },
    "input_filter": {
        "name": "input_filter",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "input_filter: ",
        "prefix_py": "input_filter="
    },
    "insert_text": {
        "name": "insert_text",
        "type": "function",
        "help": "Insert new text at the current cursor position. Override this\nfunction in order to pre-process text for input validation.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "substring",
            "from_undo"
        ],
        "prefix_kv": "insert_text: ",
        "prefix_py": "insert_text=()"
    },
    "lexer": {
        "name": "lexer",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput"
        ],
        "prefix_kv": "lexer: ",
        "prefix_py": "lexer="
    },
    "line_spacing": {
        "name": "line_spacing",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "line_spacing: ",
        "prefix_py": "line_spacing="
    },
    "lines_to_scroll": {
        "name": "lines_to_scroll",
        "type": "BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "lines_to_scroll: ",
        "prefix_py": "lines_to_scroll="
    },
    "long_touch": {
        "name": "long_touch",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "long_touch: ",
        "prefix_py": "long_touch=()"
    },
    "multiline": {
        "name": "multiline",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "multiline: True",
        "prefix_py": "multiline=True"
    },
    "on__hint_text": {
        "name": "on__hint_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on__hint_text: ",
        "prefix_py": "on__hint_text=()"
    },
    "on_cursor": {
        "name": "on_cursor",
        "type": "function",
        "help": "When the cursor is moved, reset cursor blinking to keep it showing,\nand update all the graphics.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_cursor: ",
        "prefix_py": "on_cursor=()"
    },
    "on_cursor_blink": {
        "name": "on_cursor_blink",
        "type": "function",
        "help": "trigger blink event reset to switch blinking while focused",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_cursor_blink: ",
        "prefix_py": "on_cursor_blink=()"
    },
    "on_double_tap": {
        "name": "on_double_tap",
        "type": "function",
        "help": "This event is dispatched when a double tap happens\ninside TextInput. The default behavior is to select the\nword around the current cursor position. Override this to provide\ndifferent behavior. Alternatively, you can bind to this\nevent to provide additional functionality.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_double_tap: ",
        "prefix_py": "on_double_tap=()"
    },
    "on_foreground_color": {
        "name": "on_foreground_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self",
            "instance",
            "text_color"
        ],
        "prefix_kv": "on_foreground_color: ",
        "prefix_py": "on_foreground_color=()"
    },
    "on_handle_image_left": {
        "name": "on_handle_image_left",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_handle_image_left: ",
        "prefix_py": "on_handle_image_left=()"
    },
    "on_handle_image_middle": {
        "name": "on_handle_image_middle",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_handle_image_middle: ",
        "prefix_py": "on_handle_image_middle=()"
    },
    "on_handle_image_right": {
        "name": "on_handle_image_right",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_handle_image_right: ",
        "prefix_py": "on_handle_image_right=()"
    },
    "on_lexer": {
        "name": "on_lexer",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_lexer: ",
        "prefix_py": "on_lexer=()"
    },
    "on_padding_x": {
        "name": "on_padding_x",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_padding_x: ",
        "prefix_py": "on_padding_x=()"
    },
    "on_padding_y": {
        "name": "on_padding_y",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_padding_y: ",
        "prefix_py": "on_padding_y=()"
    },
    "on_quad_touch": {
        "name": "on_quad_touch",
        "type": "function",
        "help": "This event is dispatched when four fingers are touching\ninside TextInput. The default behavior is to select all text.\nOverride this to provide different behavior. Alternatively,\nyou can bind to this event to provide additional functionality.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_quad_touch: ",
        "prefix_py": "on_quad_touch=()"
    },
    "on_selection_text": {
        "name": "on_selection_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_selection_text: ",
        "prefix_py": "on_selection_text=()"
    },
    "on_style": {
        "name": "on_style",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_style: ",
        "prefix_py": "on_style=()"
    },
    "on_style_name": {
        "name": "on_style_name",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_style_name: ",
        "prefix_py": "on_style_name=()"
    },
    "on_text_validate": {
        "name": "on_text_validate",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_text_validate: ",
        "prefix_py": "on_text_validate=()"
    },
    "on_triple_tap": {
        "name": "on_triple_tap",
        "type": "function",
        "help": "This event is dispatched when a triple tap happens\ninside TextInput. The default behavior is to select the\nline around current cursor position. Override this to provide\ndifferent behavior. Alternatively, you can bind to this\nevent to provide additional functionality.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_triple_tap: ",
        "prefix_py": "on_triple_tap=()"
    },
    "password": {
        "name": "password",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "password: True",
        "prefix_py": "password=True"
    },
    "password_mask": {
        "name": "password_mask",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "password_mask: ''",
        "prefix_py": "password_mask=''"
    },
    "paste": {
        "name": "paste",
        "type": "function",
        "help": "Insert text from system :class:`~kivy.core.clipboard.Clipboard`\ninto the :class:`~kivy.uix.textinput.TextInput` at current cursor\nposition.\n\n.. versionadded:: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "paste: ",
        "prefix_py": "paste=()"
    },
    "pgmove_speed": {
        "name": "pgmove_speed",
        "type": "property",
        "help": "how much vertical distance hitting pg_up or pg_down will move\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "pgmove_speed: ",
        "prefix_py": "pgmove_speed="
    },
    "re_indent": {
        "name": "re_indent",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "re_indent: ",
        "prefix_py": "re_indent=()"
    },
    "readonly": {
        "name": "readonly",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "readonly: True",
        "prefix_py": "readonly=True"
    },
    "replace_crlf": {
        "name": "replace_crlf",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "replace_crlf: True",
        "prefix_py": "replace_crlf=True"
    },
    "reset_undo": {
        "name": "reset_undo",
        "type": "function",
        "help": "Reset undo and redo lists from memory.\n\n.. versionadded:: 1.3.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "reset_undo: ",
        "prefix_py": "reset_undo=()"
    },
    "scroll_from_swipe": {
        "name": "scroll_from_swipe",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "scroll_from_swipe: True",
        "prefix_py": "scroll_from_swipe=True"
    },
    "scroll_text_from_swipe": {
        "name": "scroll_text_from_swipe",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "scroll_text_from_swipe: ",
        "prefix_py": "scroll_text_from_swipe=()"
    },
    "select_all": {
        "name": "select_all",
        "type": "function",
        "help": "Select all of the text displayed in this TextInput.\n\n.. versionadded:: 1.4.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "select_all: ",
        "prefix_py": "select_all=()"
    },
    "select_text": {
        "name": "select_text",
        "type": "function",
        "help": "Select a portion of text displayed in this TextInput.\n\n.. versionadded:: 1.4.0\n\n:Parameters:\n    `start`\n        Index of textinput.text from where to start selection\n    `end`\n        Index of textinput.text till which the selection should be\n        displayed",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "start",
            "end"
        ],
        "prefix_kv": "select_text: ",
        "prefix_py": "select_text=()"
    },
    "selection_color": {
        "name": "selection_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "selection_color: ",
        "prefix_py": "selection_color=()"
    },
    "selection_from": {
        "name": "selection_from",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "selection_from",
        "prefix_py": "selection_from."
    },
    "selection_text": {
        "name": "selection_text",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "selection_text: ''",
        "prefix_py": "selection_text=''"
    },
    "selection_to": {
        "name": "selection_to",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "selection_to",
        "prefix_py": "selection_to."
    },
    "style": {
        "name": "style",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput"
        ],
        "prefix_kv": "style: ",
        "prefix_py": "style="
    },
    "style_name": {
        "name": "style_name",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput"
        ],
        "prefix_kv": "style_name: ''",
        "prefix_py": "style_name=''"
    },
    "tab_width": {
        "name": "tab_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput",
            "TabbedPanel"
        ],
        "prefix_kv": "tab_width: ",
        "prefix_py": "tab_width="
    },
    "text_validate_unfocus": {
        "name": "text_validate_unfocus",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "text_validate_unfocus: True",
        "prefix_py": "text_validate_unfocus=True"
    },
    "use_bubble": {
        "name": "use_bubble",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "use_bubble: True",
        "prefix_py": "use_bubble=True"
    },
    "use_handles": {
        "name": "use_handles",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "use_handles: True",
        "prefix_py": "use_handles=True"
    },
    "window_on_textedit": {
        "name": "window_on_textedit",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "parametters": [
            "self",
            "window",
            "ime_input"
        ],
        "prefix_kv": "window_on_textedit: ",
        "prefix_py": "window_on_textedit=()"
    },
    "write_tab": {
        "name": "write_tab",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CodeInput",
            "TextInput"
        ],
        "prefix_kv": "write_tab: True",
        "prefix_py": "write_tab=True"
    },
    "_cached_lines": {
        "name": "_cached_lines",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_cached_lines: ()",
        "prefix_py": "_cached_lines=()"
    },
    "_default_line_options": {
        "name": "_default_line_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "lines"
        ],
        "prefix_kv": "_default_line_options: ",
        "prefix_py": "_default_line_options=()"
    },
    "_font_dirs_files": {
        "name": "_font_dirs_files",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_font_dirs_files: ()",
        "prefix_py": "_font_dirs_files=()"
    },
    "_font_family_support": {
        "name": "_font_family_support",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_font_family_support: True",
        "prefix_py": "_font_family_support=True"
    },
    "_fonts": {
        "name": "_fonts",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_fonts: {}",
        "prefix_py": "_fonts={}"
    },
    "_fonts_cache": {
        "name": "_fonts_cache",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_fonts_cache: {}",
        "prefix_py": "_fonts_cache={}"
    },
    "_fonts_dirs": {
        "name": "_fonts_dirs",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_fonts_dirs: ()",
        "prefix_py": "_fonts_dirs=()"
    },
    "_get_font_id": {
        "name": "_get_font_id",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_font_id: ",
        "prefix_py": "_get_font_id=()"
    },
    "_get_text_size": {
        "name": "_get_text_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_text_size: ",
        "prefix_py": "_get_text_size=()"
    },
    "_label": {
        "name": "_label",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_label: ",
        "prefix_py": "_label="
    },
    "_migrate_deprecated_padding_xy": {
        "name": "_migrate_deprecated_padding_xy",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_migrate_deprecated_padding_xy: ",
        "prefix_py": "_migrate_deprecated_padding_xy=()"
    },
    "_pop_style": {
        "name": "_pop_style",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "k"
        ],
        "prefix_kv": "_pop_style: ",
        "prefix_py": "_pop_style=()"
    },
    "_pre_render": {
        "name": "_pre_render",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_pre_render: ",
        "prefix_py": "_pre_render=()"
    },
    "_push_style": {
        "name": "_push_style",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "k"
        ],
        "prefix_kv": "_push_style: ",
        "prefix_py": "_push_style=()"
    },
    "_render_begin": {
        "name": "_render_begin",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_render_begin: ",
        "prefix_py": "_render_begin=()"
    },
    "_render_end": {
        "name": "_render_end",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_render_end: ",
        "prefix_py": "_render_end=()"
    },
    "_render_real": {
        "name": "_render_real",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_render_real: ",
        "prefix_py": "_render_real=()"
    },
    "_render_text": {
        "name": "_render_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "text",
            "x",
            "y"
        ],
        "prefix_kv": "_render_text: ",
        "prefix_py": "_render_text=()"
    },
    "_set_text_size": {
        "name": "_set_text_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "x"
        ],
        "prefix_kv": "_set_text_size: ",
        "prefix_py": "_set_text_size=()"
    },
    "_text_size": {
        "name": "_text_size",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_text_size: ",
        "prefix_py": "_text_size="
    },
    "_texture_1px": {
        "name": "_texture_1px",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "_texture_1px: ",
        "prefix_py": "_texture_1px=()"
    },
    "_texture_fill": {
        "name": "_texture_fill",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "texture"
        ],
        "prefix_kv": "_texture_fill: ",
        "prefix_py": "_texture_fill=()"
    },
    "_texture_refresh": {
        "name": "_texture_refresh",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_texture_refresh: ",
        "prefix_py": "_texture_refresh=()"
    },
    "clear_texture": {
        "name": "clear_texture",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "clear_texture: ",
        "prefix_py": "clear_texture=()"
    },
    "find_base_direction": {
        "name": "find_base_direction",
        "type": "function",
        "help": "Searches a string the first character that has a strong direction,\naccording to the Unicode bidirectional algorithm. Returns `None` if\nthe base direction cannot be determined, or one of `'ltr'` or `'rtl'`.\n\n.. versionadded: 1.10.1\n\n.. note:: This feature requires the Pango text provider.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "text"
        ],
        "prefix_kv": "find_base_direction: ",
        "prefix_py": "find_base_direction=()"
    },
    "fontid": {
        "name": "fontid",
        "type": "property",
        "help": "Return a unique id for all font parameters",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "fontid: ",
        "prefix_py": "fontid="
    },
    "get_ascent": {
        "name": "get_ascent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_ascent: ",
        "prefix_py": "get_ascent=()"
    },
    "get_cached_extents": {
        "name": "get_cached_extents",
        "type": "function",
        "help": "Returns a cached version of the :meth:`get_extents` function.\n\n::\n\n    >>> func = self._get_cached_extents()\n    >>> func\n    <built-in method size of pygame.font.Font object at 0x01E45650>\n    >>> func('a line')\n    (36, 18)\n\n.. warning::\n\n    This method returns a size measuring function that is valid\n    for the font settings used at the time :meth:`get_cached_extents`\n    was called. Any change in the font settings will render the\n    returned function incorrect. You should only use this if you know\n    what you're doing.\n\n.. versionadded:: 1.9.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_cached_extents: ",
        "prefix_py": "get_cached_extents=()"
    },
    "get_descent": {
        "name": "get_descent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_descent: ",
        "prefix_py": "get_descent=()"
    },
    "get_extents": {
        "name": "get_extents",
        "type": "function",
        "help": "Return a tuple (width, height) indicating the size of the specified\ntext",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "text"
        ],
        "prefix_kv": "get_extents: ",
        "prefix_py": "get_extents=()"
    },
    "get_system_fonts_dir": {
        "name": "get_system_fonts_dir",
        "type": "function",
        "help": "Return the directories used by the system for fonts.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [],
        "prefix_kv": "get_system_fonts_dir: ",
        "prefix_py": "get_system_fonts_dir=()"
    },
    "label": {
        "name": "label",
        "type": "property",
        "help": "Get/Set the text",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "label: ",
        "prefix_py": "label="
    },
    "refresh": {
        "name": "refresh",
        "type": "function",
        "help": "Force re-rendering of the text\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "refresh: ",
        "prefix_py": "refresh=()"
    },
    "render": {
        "name": "render",
        "type": "function",
        "help": "Return a tuple (width, height) to create the image\nwith the user constraints. (width, height) includes the padding.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel",
            "RstDocument"
        ],
        "parametters": [
            "self",
            "real"
        ],
        "prefix_kv": "render: ",
        "prefix_py": "render=()"
    },
    "render_lines": {
        "name": "render_lines",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "lines",
            "options",
            "render_text",
            "y",
            "size"
        ],
        "prefix_kv": "render_lines: ",
        "prefix_py": "render_lines=()"
    },
    "resolve_font_name": {
        "name": "resolve_font_name",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "resolve_font_name: ",
        "prefix_py": "resolve_font_name=()"
    },
    "shorten_post": {
        "name": "shorten_post",
        "type": "function",
        "help": "Shortens the text to a single line according to the label options.\n\nThis function operates on a text that has already been laid out because\nfor markup, parts of text can have different size and options.\n\nIf :attr:`text_size` [0] is None, the lines are returned unchanged.\nOtherwise, the lines are converted to a single line fitting within the\nconstrained width, :attr:`text_size` [0].\n\n:params:\n\n    `lines`: list of `LayoutLine` instances describing the text.\n    `w`: int, the width of the text in lines, including padding.\n    `h`: int, the height of the text in lines, including padding.\n    `margin` int, the additional space left on the sides. This is in\n    addition to :attr:`padding_x`.\n\n:returns:\n    3-tuple of (xw, h, lines), where w, and h is similar to the input\n    and contains the resulting width / height of the text, including\n    padding. lines, is a list containing a single `LayoutLine`, which\n    contains the words for the line.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Label",
            "CoreMarkupLabel"
        ],
        "parametters": [
            "self",
            "lines",
            "w",
            "h",
            "margin"
        ],
        "prefix_kv": "shorten_post: ",
        "prefix_py": "shorten_post=()"
    },
    "texture_1px": {
        "name": "texture_1px",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "texture_1px: ",
        "prefix_py": "texture_1px="
    },
    "usersize": {
        "name": "usersize",
        "type": "property",
        "help": "(deprecated) Use text_size instead.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Label",
            "CoreLabel",
            "CoreMarkupLabel"
        ],
        "prefix_kv": "usersize: ",
        "prefix_py": "usersize="
    },
    "TextInput": {
        "name": "TextInput",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.codeinput import TextInput",
        "help": "TextInput class. See module documentation for more information.\n\n:Events:\n    `on_text_validate`\n        Fired only in multiline=False mode when the user hits 'enter'.\n        This will also unfocus the textinput.\n    `on_double_tap`\n        Fired when a double tap happens in the text input. The default\n        behavior selects the text around the cursor position. More info at\n        :meth:`on_double_tap`.\n    `on_triple_tap`\n        Fired when a triple tap happens in the text input. The default\n        behavior selects the line around the cursor position. More info at\n        :meth:`on_triple_tap`.\n    `on_quad_touch`\n        Fired when four fingers are touching the text input. The default\n        behavior selects the whole text. More info at\n        :meth:`on_quad_touch`.\n\n.. warning::\n    When changing a :class:`TextInput` property that requires re-drawing,\n    e.g. modifying the :attr:`text`, the updates occur on the next\n    clock cycle and not instantly. This might cause any changes to the\n    :class:`TextInput` that occur between the modification and the next\n    cycle to be ignored, or to use previous values. For example, after\n    a update to the :attr:`text`, changing the cursor in the same clock\n    frame will move it using the previous text and will likely end up in an\n    incorrect position. The solution is to schedule any updates to occur\n    on the next clock cycle using\n    :meth:`~kivy.clock.ClockBase.schedule_once`.\n\n.. Note::\n    Selection is cancelled when TextInput is focused. If you need to\n    show selection when TextInput is focused, you should delay\n    (use Clock.schedule) the call to the functions for selecting\n    text (select_all, select_text).\n\n.. versionchanged:: 1.10.0\n    `background_disabled_active` has been removed.\n\n.. versionchanged:: 1.9.0\n\n    :class:`TextInput` now inherits from\n    :class:`~kivy.uix.behaviors.FocusBehavior`.\n    :attr:`~kivy.uix.behaviors.FocusBehavior.keyboard_mode`,\n    :meth:`~kivy.uix.behaviors.FocusBehavior.show_keyboard`,\n    :meth:`~kivy.uix.behaviors.FocusBehavior.hide_keyboard`,\n    :meth:`~kivy.uix.behaviors.FocusBehavior.focus`,\n    and :attr:`~kivy.uix.behaviors.FocusBehavior.input_type`\n    have been removed since they are now inherited\n    from :class:`~kivy.uix.behaviors.FocusBehavior`.\n\n.. versionchanged:: 1.7.0\n    `on_double_tap`, `on_triple_tap` and `on_quad_touch` events added.\n\n.. versionchanged:: 2.1.0\n    :attr:`~kivy.uix.behaviors.FocusBehavior.keyboard_suggestions`\n    is now inherited from :class:`~kivy.uix.behaviors.FocusBehavior`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TextInput:\n    ",
        "prefix_py": "TextInput()"
    },
    "BoundedNumericProperty": {
        "name": "BoundedNumericProperty",
        "type": "type",
        "import": "from kivy.uix.colorpicker import BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BoundedNumericProperty: ",
        "prefix_py": "BoundedNumericProperty="
    },
    "bounds": {
        "name": "bounds",
        "type": "getset_descriptor",
        "help": "Return min/max of the value.\n\n.. versionadded:: 1.0.9",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BoundedNumericProperty"
        ],
        "prefix_kv": "bounds: ",
        "prefix_py": "bounds="
    },
    "get_max": {
        "name": "get_max",
        "type": "cython_function_or_method",
        "help": "BoundedNumericProperty.get_max(self, EventDispatcher obj)\nReturn the maximum value acceptable for the BoundedNumericProperty\n        in `obj`. Return None if no maximum value is set. Check\n        :attr:`get_min` for a usage example.\n\n        .. versionadded:: 1.1.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BoundedNumericProperty"
        ],
        "prefix_kv": "get_max",
        "prefix_py": "get_max."
    },
    "get_min": {
        "name": "get_min",
        "type": "cython_function_or_method",
        "help": "BoundedNumericProperty.get_min(self, EventDispatcher obj)\nReturn the minimum value acceptable for the BoundedNumericProperty\n        in `obj`. Return None if no minimum value is set::\n\n            class MyWidget(Widget):\n                number = BoundedNumericProperty(0, min=-5, max=5)\n\n            widget = MyWidget()\n            print(widget.property('number').get_min(widget))\n            # will output -5\n\n        .. versionadded:: 1.1.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BoundedNumericProperty"
        ],
        "prefix_kv": "get_min",
        "prefix_py": "get_min."
    },
    "set_max": {
        "name": "set_max",
        "type": "cython_function_or_method",
        "help": "BoundedNumericProperty.set_max(self, EventDispatcher obj, value)\nChange the maximum value acceptable for the BoundedNumericProperty,\n        only for the `obj` instance. Set to None if you want to disable it.\n        Check :attr:`set_min` for a usage example.\n\n        .. warning::\n\n            Changing the bounds doesn't revalidate the current value.\n\n        .. versionadded:: 1.1.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BoundedNumericProperty"
        ],
        "prefix_kv": "set_max",
        "prefix_py": "set_max."
    },
    "set_min": {
        "name": "set_min",
        "type": "cython_function_or_method",
        "help": "BoundedNumericProperty.set_min(self, EventDispatcher obj, value)\nChange the minimum value acceptable for the BoundedNumericProperty,\n        only for the `obj` instance. Set to None if you want to disable it::\n\n            class MyWidget(Widget):\n                number = BoundedNumericProperty(0, min=-5, max=5)\n\n            widget = MyWidget()\n            # change the minimum to -10\n            widget.property('number').set_min(widget, -10)\n            # or disable the minimum check\n            widget.property('number').set_min(widget, None)\n\n        .. warning::\n\n            Changing the bounds doesn't revalidate the current value.\n\n        .. versionadded:: 1.1.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "BoundedNumericProperty"
        ],
        "prefix_kv": "set_min",
        "prefix_py": "set_min."
    },
    "ColorPicker": {
        "name": "ColorPicker",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.colorpicker import ColorPicker",
        "help": "See module documentation.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ColorPicker:\n    ",
        "prefix_py": "ColorPicker()"
    },
    "_get_hex": {
        "name": "_get_hex",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_hex: ",
        "prefix_py": "_get_hex=()"
    },
    "_get_hsv": {
        "name": "_get_hsv",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_hsv: ",
        "prefix_py": "_get_hsv=()"
    },
    "_set_hex": {
        "name": "_set_hex",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_hex: ",
        "prefix_py": "_set_hex=()"
    },
    "_set_hsv": {
        "name": "_set_hsv",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_hsv: ",
        "prefix_py": "_set_hsv=()"
    },
    "_trigger_update_clr": {
        "name": "_trigger_update_clr",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "mode",
            "clr_idx",
            "text"
        ],
        "prefix_kv": "_trigger_update_clr: ",
        "prefix_py": "_trigger_update_clr=()"
    },
    "_trigger_update_hex": {
        "name": "_trigger_update_hex",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "text"
        ],
        "prefix_kv": "_trigger_update_hex: ",
        "prefix_py": "_trigger_update_hex=()"
    },
    "_update_clr": {
        "name": "_update_clr",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_update_clr: ",
        "prefix_py": "_update_clr=()"
    },
    "_update_clr_ev": {
        "name": "_update_clr_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorPicker"
        ],
        "prefix_kv": "_update_clr_ev: ",
        "prefix_py": "_update_clr_ev=()"
    },
    "_update_hex": {
        "name": "_update_hex",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_update_hex: ",
        "prefix_py": "_update_hex=()"
    },
    "_update_hex_ev": {
        "name": "_update_hex_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorPicker"
        ],
        "prefix_kv": "_update_hex_ev: ",
        "prefix_py": "_update_hex_ev=()"
    },
    "hex_color": {
        "name": "hex_color",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorPicker"
        ],
        "prefix_kv": "hex_color",
        "prefix_py": "hex_color."
    },
    "set_color": {
        "name": "set_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorPicker"
        ],
        "parametters": [
            "self",
            "color"
        ],
        "prefix_kv": "set_color: ",
        "prefix_py": "set_color=()"
    },
    "wheel": {
        "name": "wheel",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorPicker"
        ],
        "prefix_kv": "wheel: ",
        "prefix_py": "wheel="
    },
    "ColorWheel": {
        "name": "ColorWheel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.colorpicker import ColorWheel",
        "help": "Chromatic wheel for the ColorPicker.\n\n.. versionchanged:: 1.7.1\n    `font_size`, `font_name` and `foreground_color` have been removed. The\n    sizing is now the same as others widget, based on 'sp'. Orientation is\n    also automatically determined according to the width/height ratio.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ColorWheel:\n    ",
        "prefix_py": "ColorWheel()"
    },
    "_get_touch_r": {
        "name": "_get_touch_r",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "_get_touch_r: ",
        "prefix_py": "_get_touch_r=()"
    },
    "_inertia_cutoff": {
        "name": "_inertia_cutoff",
        "type": "float",
        "help": "Convert a string or number to a floating point number, if possible.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_inertia_cutoff: ",
        "prefix_py": "_inertia_cutoff="
    },
    "_inertia_slowdown": {
        "name": "_inertia_slowdown",
        "type": "float",
        "help": "Convert a string or number to a floating point number, if possible.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_inertia_slowdown: ",
        "prefix_py": "_inertia_slowdown="
    },
    "_num_touches": {
        "name": "_num_touches",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_num_touches: ",
        "prefix_py": "_num_touches="
    },
    "_origin": {
        "name": "_origin",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_origin: ()",
        "prefix_py": "_origin=()"
    },
    "_piece_divisions": {
        "name": "_piece_divisions",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_piece_divisions: ",
        "prefix_py": "_piece_divisions="
    },
    "_pieces_of_pie": {
        "name": "_pieces_of_pie",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_pieces_of_pie: ",
        "prefix_py": "_pieces_of_pie="
    },
    "_pinch_flag": {
        "name": "_pinch_flag",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_pinch_flag: True",
        "prefix_py": "_pinch_flag=True"
    },
    "_radius": {
        "name": "_radius",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ColorWheel"
        ],
        "prefix_kv": "_radius: ",
        "prefix_py": "_radius="
    },
    "_reset_canvas": {
        "name": "_reset_canvas",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_reset_canvas: ",
        "prefix_py": "_reset_canvas=()"
    },
    "change_alpha": {
        "name": "change_alpha",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "val"
        ],
        "prefix_kv": "change_alpha: ",
        "prefix_py": "change_alpha=()"
    },
    "inertial_decr_sv_idx": {
        "name": "inertial_decr_sv_idx",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "inertial_decr_sv_idx: ",
        "prefix_py": "inertial_decr_sv_idx=()"
    },
    "inertial_incr_sv_idx": {
        "name": "inertial_incr_sv_idx",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "inertial_incr_sv_idx: ",
        "prefix_py": "inertial_incr_sv_idx=()"
    },
    "on__origin": {
        "name": "on__origin",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "_instance",
            "_value"
        ],
        "prefix_kv": "on__origin: ",
        "prefix_py": "on__origin=()"
    },
    "on__radius": {
        "name": "on__radius",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self",
            "_instance",
            "_value"
        ],
        "prefix_kv": "on__radius: ",
        "prefix_py": "on__radius=()"
    },
    "recolor_wheel": {
        "name": "recolor_wheel",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ColorWheel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "recolor_wheel: ",
        "prefix_py": "recolor_wheel=()"
    },
    "InstructionGroup": {
        "name": "InstructionGroup",
        "type": "type",
        "import": "from kivy.uix.colorpicker import InstructionGroup",
        "help": "InstructionGroup(**kwargs)\n\nGroup of :class:`Instruction`. Allows for the adding and removing\nof graphics instructions. It can be used directly as follows::\n\n    blue = InstructionGroup()\n    blue.add(Color(0, 0, 1, 0.2))\n    blue.add(Rectangle(pos=self.pos, size=(100, 100)))\n\n    green = InstructionGroup()\n    green.add(Color(0, 1, 0, 0.4))\n    green.add(Rectangle(pos=(100, 100), size=(100, 100)))\n\n    # Here, self should be a Widget or subclass\n    [self.canvas.add(group) for group in [blue, green]]",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InstructionGroup: ",
        "prefix_py": "InstructionGroup="
    },
    "Mesh": {
        "name": "Mesh",
        "type": "type",
        "import": "from kivy.uix.colorpicker import Mesh",
        "help": "Mesh(**kwargs)\nA 2d mesh.\n\n    In OpenGL ES 2.0 and in our graphics implementation, you cannot have more\n    than 65535 indices.\n\n    A list of vertices is described as::\n\n        vertices = [x1, y1, u1, v1, x2, y2, u2, v2, ...]\n                    |            |  |            |\n                    +---- i1 ----+  +---- i2 ----+\n\n    If you want to draw a triangle, add 3 vertices. You can then make an\n    indices list as follows:\n\n        indices = [0, 1, 2]\n\n    .. versionadded:: 1.1.0\n\n    :Parameters:\n        `vertices`: iterable\n            List of vertices in the format (x1, y1, u1, v1, x2, y2, u2, v2...).\n        `indices`: iterable\n            List of indices in the format (i1, i2, i3...).\n        `mode`: str\n            Mode of the vbo. Check :attr:`mode` for more information. Defaults to\n            'points'.\n        `fmt`: list\n            The format for vertices, by default, each vertex is described by 2D\n            coordinates (x, y) and 2D texture coordinate (u, v).\n            Each element of the list should be a tuple or list, of the form\n\n                (variable_name, size, type)\n\n            which will allow mapping vertex data to the glsl instructions.\n\n                [(b'v_pos', 2, 'float'), (b'v_tc', 2, 'float'),]\n\n            will allow using\n\n                attribute vec2 v_pos;\n                attribute vec2 v_tc;\n\n            in glsl's vertex shader.\n\n    .. versionchanged:: 1.8.1\n        Before, `vertices` and `indices` would always be converted to a list,\n        now, they are only converted to a list if they do not implement the\n        buffer interface. So e.g. numpy arrays, python arrays etc. are used\n        in place, without creating any additional copies. However, the\n        buffers cannot be readonly (even though they are not changed, due to\n        a cython limitation) and must be contiguous in memory.\n\n    .. note::\n        When passing a memoryview or a instance that implements the buffer\n        interface, `vertices` should be a buffer of floats (`'f'` code in\n        python array) and `indices` should be a buffer of unsigned short (`'H'`\n        code in python array). Arrays in other formats will still have to be\n        converted internally, negating any potential gain.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Mesh: ",
        "prefix_py": "Mesh="
    },
    "indices": {
        "name": "indices",
        "type": "getset_descriptor",
        "help": "Vertex indices used to specify the order when drawing the\nmesh.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Mesh"
        ],
        "prefix_kv": "indices: ",
        "prefix_py": "indices="
    },
    "vertices": {
        "name": "vertices",
        "type": "getset_descriptor",
        "help": "List of x, y, u, v coordinates used to construct the Mesh. Right now,\nthe Mesh instruction doesn't allow you to change the format of the\nvertices, which means it's only x, y + one texture coordinate.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Mesh"
        ],
        "prefix_kv": "vertices: ",
        "prefix_py": "vertices="
    },
    "_ColorArc": {
        "name": "_ColorArc",
        "type": "type",
        "import": "from kivy.uix.colorpicker import _ColorArc",
        "help": "InstructionGroup(**kwargs)\n\nGroup of :class:`Instruction`. Allows for the adding and removing\nof graphics instructions. It can be used directly as follows::\n\n    blue = InstructionGroup()\n    blue.add(Color(0, 0, 1, 0.2))\n    blue.add(Rectangle(pos=self.pos, size=(100, 100)))\n\n    green = InstructionGroup()\n    green.add(Color(0, 1, 0, 0.4))\n    green.add(Rectangle(pos=(100, 100), size=(100, 100)))\n\n    # Here, self should be a Widget or subclass\n    [self.canvas.add(group) for group in [blue, green]]",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "_ColorArc: ",
        "prefix_py": "_ColorArc="
    },
    "change_color": {
        "name": "change_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ColorArc"
        ],
        "parametters": [
            "self",
            "color",
            "color_delta",
            "sv",
            "a"
        ],
        "prefix_kv": "change_color: ",
        "prefix_py": "change_color=()"
    },
    "get_mesh": {
        "name": "get_mesh",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ColorArc"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_mesh: ",
        "prefix_py": "get_mesh=()"
    },
    "DropDownException": {
        "name": "DropDownException",
        "type": "type",
        "import": "from kivy.uix.dropdown import DropDownException",
        "help": "DropDownException class.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "DropDownException: ",
        "prefix_py": "DropDownException="
    },
    "ScrollView": {
        "name": "ScrollView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.dropdown import ScrollView",
        "help": "ScrollView class. See module documentation for more information.\n\n:Events:\n    `on_scroll_start`\n        Generic event fired when scrolling starts from touch.\n    `on_scroll_move`\n        Generic event fired when scrolling move from touch.\n    `on_scroll_stop`\n        Generic event fired when scrolling stops from touch.\n\n.. versionchanged:: 1.9.0\n    `on_scroll_start`, `on_scroll_move` and `on_scroll_stop` events are\n    now dispatched when scrolling to handle nested ScrollViews.\n\n.. versionchanged:: 1.7.0\n    `auto_scroll`, `scroll_friction`, `scroll_moves`, `scroll_stoptime' has\n    been deprecated, use :attr:`effect_cls` instead.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScrollView:\n    ",
        "prefix_py": "ScrollView()"
    },
    "AdvancedEffectBase": {
        "name": "AdvancedEffectBase",
        "type": "type",
        "import": "from kivy.uix.effectwidget import AdvancedEffectBase",
        "help": "An :class:`EffectBase` with additional behavior to easily\nset and update uniform variables in your shader.\n\nThis class is provided for convenience when implementing your own\neffects: it is not used by any of those provided with Kivy.\n\nIn addition to your base glsl string that must be provided as\nnormal, the :class:`AdvancedEffectBase` has an extra property\n:attr:`uniforms`, a dictionary of name-value pairs. Whenever\na value is changed, the new value for the uniform variable is\nuploaded to the shader.\n\nYou must still manually declare your uniform variables at the top\nof your glsl string.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AdvancedEffectBase: ",
        "prefix_py": "AdvancedEffectBase="
    },
    "_load_from_source": {
        "name": "_load_from_source",
        "type": "function",
        "help": "(internal) Loads the glsl string from a source file.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect",
            "RstDocument"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_load_from_source: ",
        "prefix_py": "_load_from_source=()"
    },
    "_update_uniforms": {
        "name": "_update_uniforms",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AdvancedEffectBase"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_uniforms: ",
        "prefix_py": "_update_uniforms=()"
    },
    "fbo": {
        "name": "fbo",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect"
        ],
        "prefix_kv": "fbo: ",
        "prefix_py": "fbo="
    },
    "glsl": {
        "name": "glsl",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect"
        ],
        "prefix_kv": "glsl: ''",
        "prefix_py": "glsl=''"
    },
    "set_fbo_shader": {
        "name": "set_fbo_shader",
        "type": "function",
        "help": "Sets the :class:`~kivy.graphics.Fbo`'s shader by splicing\nthe :attr:`glsl` string into a full fragment shader.\n\nThe full shader is made up of :code:`shader_header +\nshader_uniforms + self.glsl + shader_footer_effect`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AdvancedEffectBase",
            "ChannelMixEffect",
            "EffectBase",
            "FXAAEffect",
            "HorizontalBlurEffect",
            "InvertEffect",
            "MonochromeEffect",
            "PixelateEffect",
            "ScanlinesEffect",
            "VerticalBlurEffect"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "set_fbo_shader: ",
        "prefix_py": "set_fbo_shader=()"
    },
    "uniforms": {
        "name": "uniforms",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "AdvancedEffectBase"
        ],
        "prefix_kv": "uniforms: {}",
        "prefix_py": "uniforms={}"
    },
    "ChannelMixEffect": {
        "name": "ChannelMixEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import ChannelMixEffect",
        "help": "Mixes the color channels of the input according to the order\nproperty. Channels may be arbitrarily rearranged or repeated.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ChannelMixEffect: ",
        "prefix_py": "ChannelMixEffect="
    },
    "do_glsl": {
        "name": "do_glsl",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ChannelMixEffect",
            "HorizontalBlurEffect",
            "PixelateEffect",
            "VerticalBlurEffect"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "do_glsl: ",
        "prefix_py": "do_glsl=()"
    },
    "on_order": {
        "name": "on_order",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ChannelMixEffect"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_order: ",
        "prefix_py": "on_order=()"
    },
    "order": {
        "name": "order",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ChannelMixEffect"
        ],
        "prefix_kv": "order: ()",
        "prefix_py": "order=()"
    },
    "ClearBuffers": {
        "name": "ClearBuffers",
        "type": "type",
        "import": "from kivy.uix.effectwidget import ClearBuffers",
        "help": "ClearBuffers(*args, **kwargs)\nClearbuffer Graphics Instruction.\n\n   .. versionadded:: 1.3.0\n\n   Clear the buffers specified by the instructions buffer mask property.\n   By default, only the coloc buffer is cleared.\n   ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ClearBuffers: ",
        "prefix_py": "ClearBuffers="
    },
    "clear_color": {
        "name": "clear_color",
        "type": "getset_descriptor",
        "help": "If True, the color buffer will be cleared.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ClearBuffers",
            "EffectFbo",
            "Fbo"
        ],
        "prefix_kv": "clear_color: ",
        "prefix_py": "clear_color="
    },
    "clear_depth": {
        "name": "clear_depth",
        "type": "getset_descriptor",
        "help": "If True, the depth buffer will be cleared.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ClearBuffers"
        ],
        "prefix_kv": "clear_depth: ",
        "prefix_py": "clear_depth="
    },
    "clear_stencil": {
        "name": "clear_stencil",
        "type": "getset_descriptor",
        "help": "If True, the stencil buffer will be cleared.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ClearBuffers"
        ],
        "prefix_kv": "clear_stencil: ",
        "prefix_py": "clear_stencil="
    },
    "ClearColor": {
        "name": "ClearColor",
        "type": "type",
        "import": "from kivy.uix.effectwidget import ClearColor",
        "help": "ClearColor(r, g, b, a, **kwargs)\nClearColor Graphics Instruction.\n\n   .. versionadded:: 1.3.0\n\n   Sets the clear color used to clear buffers with the glClear function or\n   :class:`ClearBuffers` graphics instructions.\n   ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ClearColor: ",
        "prefix_py": "ClearColor="
    },
    "EffectBase": {
        "name": "EffectBase",
        "type": "type",
        "import": "from kivy.uix.effectwidget import EffectBase",
        "help": "The base class for GLSL effects. It simply returns its input.\n\nSee the module documentation for more details.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "EffectBase: ",
        "prefix_py": "EffectBase="
    },
    "EffectFbo": {
        "name": "EffectFbo",
        "type": "type",
        "import": "from kivy.uix.effectwidget import EffectFbo",
        "help": "An :class:`~kivy.graphics.Fbo` with extra functionality that allows\nattempts to set a new shader. See :meth:`set_fs`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "EffectFbo: ",
        "prefix_py": "EffectFbo="
    },
    "add_reload_observer": {
        "name": "add_reload_observer",
        "type": "cython_function_or_method",
        "help": "Fbo.add_reload_observer(self, callback)\nAdd a callback to be called after the whole graphics context has\n        been reloaded. This is where you can reupload your custom data in GPU.\n\n        .. versionadded:: 1.2.0\n\n        :Parameters:\n            `callback`: func(context) -> return None\n                The first parameter will be the context itself\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "Texture"
        ],
        "prefix_kv": "add_reload_observer",
        "prefix_py": "add_reload_observer."
    },
    "after": {
        "name": "after",
        "type": "getset_descriptor",
        "help": "Property for getting the 'after' group.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "after: ",
        "prefix_py": "after="
    },
    "ask_update": {
        "name": "ask_update",
        "type": "cython_function_or_method",
        "help": "Canvas.ask_update(self)\nInform the canvas that we'd like it to update on the next frame.\n        This is useful when you need to trigger a redraw due to some value\n        having changed for example.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Callback",
            "Texture",
            "Canvas"
        ],
        "prefix_kv": "ask_update",
        "prefix_py": "ask_update."
    },
    "before": {
        "name": "before",
        "type": "getset_descriptor",
        "help": "Property for getting the 'before' group.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "before: ",
        "prefix_py": "before="
    },
    "clear_buffer": {
        "name": "clear_buffer",
        "type": "cython_function_or_method",
        "help": "Fbo.clear_buffer(self)\nClear the framebuffer with the :attr:`clear_color`.\n\n        You need to bind the framebuffer yourself before calling this\n        method::\n\n            fbo.bind()\n            fbo.clear_buffer()\n            fbo.release()\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo"
        ],
        "prefix_kv": "clear_buffer",
        "prefix_py": "clear_buffer."
    },
    "draw": {
        "name": "draw",
        "type": "cython_function_or_method",
        "help": "Canvas.draw(self)\nApply the instruction to our window.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "draw",
        "prefix_py": "draw."
    },
    "get_pixel_color": {
        "name": "get_pixel_color",
        "type": "cython_function_or_method",
        "help": "Fbo.get_pixel_color(self, int wx, int wy)\nGet the color of the pixel with specified window\n        coordinates wx, wy. It returns result in RGBA format.\n\n        .. versionadded:: 1.8.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo"
        ],
        "prefix_kv": "get_pixel_color",
        "prefix_py": "get_pixel_color."
    },
    "has_after": {
        "name": "has_after",
        "type": "getset_descriptor",
        "help": "Property to see if the :attr:`after` group has already been created.\n\n.. versionadded:: 1.7.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "has_after: ",
        "prefix_py": "has_after="
    },
    "has_before": {
        "name": "has_before",
        "type": "getset_descriptor",
        "help": "Property to see if the :attr:`before` group has already been created.\n\n.. versionadded:: 1.7.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext",
            "Canvas"
        ],
        "prefix_kv": "has_before: ",
        "prefix_py": "has_before="
    },
    "pixels": {
        "name": "pixels",
        "type": "getset_descriptor",
        "help": "Get the pixels texture, in RGBA format only, unsigned byte. The\norigin of the image is at bottom left.\n\n.. versionadded:: 1.7.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "Texture"
        ],
        "prefix_kv": "pixels: ",
        "prefix_py": "pixels="
    },
    "release": {
        "name": "release",
        "type": "cython_function_or_method",
        "help": "Fbo.release(self)\nRelease the Framebuffer (unbind).\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo"
        ],
        "prefix_kv": "release",
        "prefix_py": "release."
    },
    "remove_reload_observer": {
        "name": "remove_reload_observer",
        "type": "cython_function_or_method",
        "help": "Fbo.remove_reload_observer(self, callback)\nRemove a callback from the observer list, previously added by\n        :meth:`add_reload_observer`.\n\n        .. versionadded:: 1.2.0\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "Texture"
        ],
        "prefix_kv": "remove_reload_observer",
        "prefix_py": "remove_reload_observer."
    },
    "set_fs": {
        "name": "set_fs",
        "type": "function",
        "help": "Attempt to set the fragment shader to the given value.\nIf setting the shader fails, the existing one is preserved and an\nexception is raised.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "EffectFbo"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_fs: ",
        "prefix_py": "set_fs=()"
    },
    "shader": {
        "name": "shader",
        "type": "getset_descriptor",
        "help": "Return the shader attached to the render context.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext"
        ],
        "prefix_kv": "shader: ",
        "prefix_py": "shader="
    },
    "use_parent_frag_modelview": {
        "name": "use_parent_frag_modelview",
        "type": "getset_descriptor",
        "help": "If True, the parent fragment modelview matrix will be used.\n\n.. versionadded:: 1.10.1\n\n    rc = RenderContext(use_parent_frag_modelview=True)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext"
        ],
        "prefix_kv": "use_parent_frag_modelview: ",
        "prefix_py": "use_parent_frag_modelview="
    },
    "use_parent_modelview": {
        "name": "use_parent_modelview",
        "type": "getset_descriptor",
        "help": "If True, the parent modelview matrix will be used.\n\n.. versionadded:: 1.7.0\n\nBefore::\n\n    rc['modelview_mat'] = Window.render_context['modelview_mat']\n\nNow::\n\n    rc = RenderContext(use_parent_modelview=True)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext"
        ],
        "prefix_kv": "use_parent_modelview: ",
        "prefix_py": "use_parent_modelview="
    },
    "use_parent_projection": {
        "name": "use_parent_projection",
        "type": "getset_descriptor",
        "help": "If True, the parent projection matrix will be used.\n\n.. versionadded:: 1.7.0\n\nBefore::\n\n    rc['projection_mat'] = Window.render_context['projection_mat']\n\nNow::\n\n    rc = RenderContext(use_parent_projection=True)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectFbo",
            "Fbo",
            "RenderContext"
        ],
        "prefix_kv": "use_parent_projection: ",
        "prefix_py": "use_parent_projection="
    },
    "EffectWidget": {
        "name": "EffectWidget",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.effectwidget import EffectWidget",
        "help": "Widget with the ability to apply a series of graphical effects to\nits children. See the module documentation for more information on\nsetting effects and creating your own.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "EffectWidget:\n    ",
        "prefix_py": "EffectWidget()"
    },
    "_bound_effects": {
        "name": "_bound_effects",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectWidget"
        ],
        "prefix_kv": "_bound_effects: ()",
        "prefix_py": "_bound_effects=()"
    },
    "_refresh_background_color": {
        "name": "_refresh_background_color",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "EffectWidget"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_refresh_background_color: ",
        "prefix_py": "_refresh_background_color=()"
    },
    "_update_glsl": {
        "name": "_update_glsl",
        "type": "function",
        "help": "(internal) Passes new time and resolution uniform\nvariables to the shader.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "EffectWidget"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_glsl: ",
        "prefix_py": "_update_glsl=()"
    },
    "effects": {
        "name": "effects",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectWidget"
        ],
        "prefix_kv": "effects: ()",
        "prefix_py": "effects=()"
    },
    "fbo_list": {
        "name": "fbo_list",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "EffectWidget"
        ],
        "prefix_kv": "fbo_list: ()",
        "prefix_py": "fbo_list=()"
    },
    "refresh_fbo_setup": {
        "name": "refresh_fbo_setup",
        "type": "function",
        "help": "(internal) Creates and assigns one :class:`~kivy.graphics.Fbo`\nper effect, and makes sure all sizes etc. are correct and\nconsistent.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "EffectWidget"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "refresh_fbo_setup: ",
        "prefix_py": "refresh_fbo_setup=()"
    },
    "FXAAEffect": {
        "name": "FXAAEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import FXAAEffect",
        "help": "Applies very simple anti-aliasing via fxaa.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FXAAEffect: ",
        "prefix_py": "FXAAEffect="
    },
    "Fbo": {
        "name": "Fbo",
        "type": "type",
        "import": "from kivy.uix.effectwidget import Fbo",
        "help": "Fbo(*args, **kwargs)\nFbo class for wrapping the OpenGL Framebuffer extension. The Fbo support\n    \"with\" statement.\n\n    :Parameters:\n        `clear_color`: tuple, defaults to (0, 0, 0, 0)\n            Define the default color for clearing the framebuffer\n        `size`: tuple, defaults to (1024, 1024)\n            Default size of the framebuffer\n        `push_viewport`: bool, defaults to True\n            If True, the OpenGL viewport will be set to the framebuffer size,\n            and will be automatically restored when the framebuffer released.\n        `with_depthbuffer`: bool, defaults to False\n            If True, the framebuffer will be allocated with a Z buffer.\n        `with_stencilbuffer`: bool, defaults to False\n            .. versionadded:: 1.9.0\n\n            If True, the framebuffer will be allocated with a stencil buffer.\n        `texture`: :class:`~kivy.graphics.texture.Texture`, defaults to None\n            If None, a default texture will be created.\n\n    .. note::\n        Using both of ``with_stencilbuffer`` and ``with_depthbuffer`` is not\n        supported in kivy 1.9.0\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Fbo: ",
        "prefix_py": "Fbo="
    },
    "HorizontalBlurEffect": {
        "name": "HorizontalBlurEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import HorizontalBlurEffect",
        "help": "Blurs the input horizontally, with the width given by\n:attr:`~HorizontalBlurEffect.size`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "HorizontalBlurEffect: ",
        "prefix_py": "HorizontalBlurEffect="
    },
    "InvertEffect": {
        "name": "InvertEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import InvertEffect",
        "help": "Inverts the colors in the input.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InvertEffect: ",
        "prefix_py": "InvertEffect="
    },
    "MonochromeEffect": {
        "name": "MonochromeEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import MonochromeEffect",
        "help": "Returns its input colors in monochrome.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "MonochromeEffect: ",
        "prefix_py": "MonochromeEffect="
    },
    "PixelateEffect": {
        "name": "PixelateEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import PixelateEffect",
        "help": "Pixelates the input according to its\n:attr:`~PixelateEffect.pixel_size`",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "PixelateEffect: ",
        "prefix_py": "PixelateEffect="
    },
    "on_pixel_size": {
        "name": "on_pixel_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "PixelateEffect"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_pixel_size: ",
        "prefix_py": "on_pixel_size=()"
    },
    "pixel_size": {
        "name": "pixel_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "PixelateEffect"
        ],
        "prefix_kv": "pixel_size: ",
        "prefix_py": "pixel_size="
    },
    "PopMatrix": {
        "name": "PopMatrix",
        "type": "type",
        "import": "from kivy.uix.effectwidget import PopMatrix",
        "help": "PopMatrix(*args, **kwargs)\nPop the matrix from the context's matrix stack onto the model view.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "PopMatrix: ",
        "prefix_py": "PopMatrix="
    },
    "stack": {
        "name": "stack",
        "type": "getset_descriptor",
        "help": "Name of the matrix stack to use. Can be 'modelview_mat',\n'projection_mat' or 'frag_modelview_mat'.\n\n.. versionadded:: 1.6.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "PopMatrix",
            "PushMatrix",
            "Translate",
            "Scale",
            "Transform"
        ],
        "prefix_kv": "stack: ",
        "prefix_py": "stack="
    },
    "PushMatrix": {
        "name": "PushMatrix",
        "type": "type",
        "import": "from kivy.uix.effectwidget import PushMatrix",
        "help": "PushMatrix(*args, **kwargs)\nPush the matrix onto the context's matrix stack.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "PushMatrix: ",
        "prefix_py": "PushMatrix="
    },
    "Rectangle": {
        "name": "Rectangle",
        "type": "type",
        "import": "from kivy.uix.effectwidget import Rectangle",
        "help": "Rectangle(**kwargs)\nA 2d rectangle.\n\n    :Parameters:\n        `pos`: list\n            Position of the rectangle, in the format (x, y).\n        `size`: list\n            Size of the rectangle, in the format (width, height).\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Rectangle: ",
        "prefix_py": "Rectangle="
    },
    "RenderContext": {
        "name": "RenderContext",
        "type": "type",
        "import": "from kivy.uix.effectwidget import RenderContext",
        "help": "RenderContext(*args, **kwargs)\nThe render context stores all the necessary information for drawing, i.e.:\n\n    - The vertex shader\n    - The fragment shader\n    - The default texture\n    - The state stack (color, texture, matrix...)\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RenderContext: ",
        "prefix_py": "RenderContext="
    },
    "ScanlinesEffect": {
        "name": "ScanlinesEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import ScanlinesEffect",
        "help": "Adds scanlines to the input.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScanlinesEffect: ",
        "prefix_py": "ScanlinesEffect="
    },
    "Translate": {
        "name": "Translate",
        "type": "type",
        "import": "from kivy.uix.effectwidget import Translate",
        "help": "Translate(*args, **kwargs)\nInstruction to create a translation of the model view coordinate space.\n\n    Construct by either::\n\n        Translate(x, y)         # translate in just the two axes\n        Translate(x, y, z)      # translate in all three axes\n\n    .. versionchanged:: 2.3.0\n        Allowed kwargs to be used to supply x, y and z.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Translate: ",
        "prefix_py": "Translate="
    },
    "identity": {
        "name": "identity",
        "type": "cython_function_or_method",
        "help": "Transform.identity(self)\nResets the transformation to the identity matrix.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Translate",
            "Matrix",
            "Scale",
            "Transform"
        ],
        "prefix_kv": "identity",
        "prefix_py": "identity."
    },
    "matrix": {
        "name": "matrix",
        "type": "getset_descriptor",
        "help": "Matrix property. Matrix from the transformation module.\nSetting the matrix using this property when a change is made\nis important because it will notify the context about the update.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Translate",
            "Scale",
            "Selector",
            "TextInputCutCopyPaste",
            "Transform"
        ],
        "prefix_kv": "matrix: ",
        "prefix_py": "matrix="
    },
    "translate": {
        "name": "translate",
        "type": "cython_function_or_method",
        "help": "Transform.translate(self, float tx, float ty, float tz)\nTranslate the instructions transformation by tx, ty, tz.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Translate",
            "string_types",
            "Matrix",
            "Scale",
            "text_type",
            "Transform"
        ],
        "prefix_kv": "translate",
        "prefix_py": "translate."
    },
    "xy": {
        "name": "xy",
        "type": "getset_descriptor",
        "help": "2 tuple with translation vector in 2D for x and y axis.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Translate"
        ],
        "prefix_kv": "xy: ",
        "prefix_py": "xy="
    },
    "xyz": {
        "name": "xyz",
        "type": "getset_descriptor",
        "help": "3 tuple translation vector in 3D in x, y, and z axis.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Translate",
            "Scale"
        ],
        "prefix_kv": "xyz: ",
        "prefix_py": "xyz="
    },
    "z": {
        "name": "z",
        "type": "getset_descriptor",
        "help": "Property for getting/setting the translation on the Z axis.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Translate",
            "Scale"
        ],
        "prefix_kv": "z: ",
        "prefix_py": "z="
    },
    "VerticalBlurEffect": {
        "name": "VerticalBlurEffect",
        "type": "type",
        "import": "from kivy.uix.effectwidget import VerticalBlurEffect",
        "help": "Blurs the input vertically, with the width given by\n:attr:`~VerticalBlurEffect.size`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VerticalBlurEffect: ",
        "prefix_py": "VerticalBlurEffect="
    },
    "FileChooser": {
        "name": "FileChooser",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooser",
        "help": "Implementation of a :class:`FileChooserController` which supports\nswitching between multiple, synced layout views.\n\nThe FileChooser can be used as follows:\n\n.. code-block:: kv\n\n    BoxLayout:\n        orientation: 'vertical'\n\n        BoxLayout:\n            size_hint_y: None\n            height: sp(52)\n\n            Button:\n                text: 'Icon View'\n                on_press: fc.view_mode = 'icon'\n            Button:\n                text: 'List View'\n                on_press: fc.view_mode = 'list'\n\n        FileChooser:\n            id: fc\n            FileChooserIconLayout\n            FileChooserListLayout\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooser:\n    ",
        "prefix_py": "FileChooser()"
    },
    "_ENTRY_TEMPLATE": {
        "name": "_ENTRY_TEMPLATE",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "prefix_kv": "_ENTRY_TEMPLATE: ",
        "prefix_py": "_ENTRY_TEMPLATE=()"
    },
    "_add_files": {
        "name": "_add_files",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "path",
            "parent"
        ],
        "prefix_kv": "_add_files: ",
        "prefix_py": "_add_files=()"
    },
    "_apply_filters": {
        "name": "_apply_filters",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "files"
        ],
        "prefix_kv": "_apply_filters: ",
        "prefix_py": "_apply_filters=()"
    },
    "_create_entry_widget": {
        "name": "_create_entry_widget",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "ctx"
        ],
        "prefix_kv": "_create_entry_widget: ",
        "prefix_py": "_create_entry_widget=()"
    },
    "_create_files_entries": {
        "name": "_create_files_entries",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_create_files_entries: ",
        "prefix_py": "_create_files_entries=()"
    },
    "_create_files_entries_ev": {
        "name": "_create_files_entries_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "_create_files_entries_ev: ",
        "prefix_py": "_create_files_entries_ev=()"
    },
    "_generate_file_entries": {
        "name": "_generate_file_entries",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "args",
            "kwargs"
        ],
        "prefix_kv": "_generate_file_entries: ",
        "prefix_py": "_generate_file_entries=()"
    },
    "_get_file_paths": {
        "name": "_get_file_paths",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "items"
        ],
        "prefix_kv": "_get_file_paths: ",
        "prefix_py": "_get_file_paths=()"
    },
    "_hide_progress": {
        "name": "_hide_progress",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_hide_progress: ",
        "prefix_py": "_hide_progress=()"
    },
    "_save_previous_path": {
        "name": "_save_previous_path",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_save_previous_path: ",
        "prefix_py": "_save_previous_path=()"
    },
    "_show_progress": {
        "name": "_show_progress",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_show_progress: ",
        "prefix_py": "_show_progress=()"
    },
    "_trigger_update": {
        "name": "_trigger_update",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_trigger_update: ",
        "prefix_py": "_trigger_update=()"
    },
    "_update_files": {
        "name": "_update_files",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "args",
            "kwargs"
        ],
        "prefix_kv": "_update_files: ",
        "prefix_py": "_update_files=()"
    },
    "_update_files_ev": {
        "name": "_update_files_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "_update_files_ev: ",
        "prefix_py": "_update_files_ev=()"
    },
    "_update_item_selection": {
        "name": "_update_item_selection",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_item_selection: ",
        "prefix_py": "_update_item_selection=()"
    },
    "_view_list": {
        "name": "_view_list",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser"
        ],
        "prefix_kv": "_view_list: ()",
        "prefix_py": "_view_list=()"
    },
    "_view_mode": {
        "name": "_view_mode",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser"
        ],
        "prefix_kv": "_view_mode: ''",
        "prefix_py": "_view_mode=''"
    },
    "_views": {
        "name": "_views",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser"
        ],
        "prefix_kv": "_views: ",
        "prefix_py": "_views="
    },
    "close_subselection": {
        "name": "close_subselection",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "entry"
        ],
        "prefix_kv": "close_subselection: ",
        "prefix_py": "close_subselection=()"
    },
    "dirselect": {
        "name": "dirselect",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "SettingPath"
        ],
        "prefix_kv": "dirselect: True",
        "prefix_py": "dirselect=True"
    },
    "entry_released": {
        "name": "entry_released",
        "type": "function",
        "help": "(internal) This method must be called by the template when an entry\nis touched by the user.\n\n.. versionadded:: 1.1.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "entry",
            "touch"
        ],
        "prefix_kv": "entry_released: ",
        "prefix_py": "entry_released=()"
    },
    "entry_subselect": {
        "name": "entry_subselect",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "entry"
        ],
        "prefix_kv": "entry_subselect: ",
        "prefix_py": "entry_subselect=()"
    },
    "entry_touched": {
        "name": "entry_touched",
        "type": "function",
        "help": "(internal) This method must be called by the template when an entry\nis touched by the user.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "entry",
            "touch"
        ],
        "prefix_kv": "entry_touched: ",
        "prefix_py": "entry_touched=()"
    },
    "file_encodings": {
        "name": "file_encodings",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "file_encodings: ()",
        "prefix_py": "file_encodings=()"
    },
    "file_system": {
        "name": "file_system",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "file_system: ",
        "prefix_py": "file_system="
    },
    "files": {
        "name": "files",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "files: ()",
        "prefix_py": "files=()"
    },
    "filter_dirs": {
        "name": "filter_dirs",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "filter_dirs: True",
        "prefix_py": "filter_dirs=True"
    },
    "filters": {
        "name": "filters",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "filters: ()",
        "prefix_py": "filters=()"
    },
    "get_nice_size": {
        "name": "get_nice_size",
        "type": "function",
        "help": "Pass the filepath. Returns the size in the best human readable\nformat or '' if it is a directory (Don't recursively calculate size).",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "fn"
        ],
        "prefix_kv": "get_nice_size: ",
        "prefix_py": "get_nice_size=()"
    },
    "get_view_list": {
        "name": "get_view_list",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_view_list: ",
        "prefix_py": "get_view_list=()"
    },
    "get_view_mode": {
        "name": "get_view_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_view_mode: ",
        "prefix_py": "get_view_mode=()"
    },
    "layout": {
        "name": "layout",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "VKeyboard"
        ],
        "prefix_kv": "layout: ",
        "prefix_py": "layout="
    },
    "manager": {
        "name": "manager",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "Screen",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "prefix_kv": "manager: ",
        "prefix_py": "manager="
    },
    "on_entries_cleared": {
        "name": "on_entries_cleared",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_entries_cleared: ",
        "prefix_py": "on_entries_cleared=()"
    },
    "on_entry_added": {
        "name": "on_entry_added",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "node",
            "parent"
        ],
        "prefix_kv": "on_entry_added: ",
        "prefix_py": "on_entry_added=()"
    },
    "on_remove_subentry": {
        "name": "on_remove_subentry",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "subentry",
            "entry"
        ],
        "prefix_kv": "on_remove_subentry: ",
        "prefix_py": "on_remove_subentry=()"
    },
    "on_subentry_to_entry": {
        "name": "on_subentry_to_entry",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "subentry",
            "entry"
        ],
        "prefix_kv": "on_subentry_to_entry: ",
        "prefix_py": "on_subentry_to_entry=()"
    },
    "on_submit": {
        "name": "on_submit",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconLayout",
            "FileChooserIconView",
            "FileChooserLayout",
            "FileChooserListLayout",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "selected",
            "touch"
        ],
        "prefix_kv": "on_submit: ",
        "prefix_py": "on_submit=()"
    },
    "open_entry": {
        "name": "open_entry",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "parametters": [
            "self",
            "entry"
        ],
        "prefix_kv": "open_entry: ",
        "prefix_py": "open_entry=()"
    },
    "path": {
        "name": "path",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "FileChooserProgress",
            "FileChooserProgressBase"
        ],
        "prefix_kv": "path: ''",
        "prefix_py": "path=''"
    },
    "progress_cls": {
        "name": "progress_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "progress_cls: ",
        "prefix_py": "progress_cls="
    },
    "rebuild_views": {
        "name": "rebuild_views",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "rebuild_views: ",
        "prefix_py": "rebuild_views=()"
    },
    "rootpath": {
        "name": "rootpath",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "rootpath: ''",
        "prefix_py": "rootpath=''"
    },
    "selection": {
        "name": "selection",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "selection: ()",
        "prefix_py": "selection=()"
    },
    "set_view_mode": {
        "name": "set_view_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser"
        ],
        "parametters": [
            "self",
            "mode"
        ],
        "prefix_kv": "set_view_mode: ",
        "prefix_py": "set_view_mode=()"
    },
    "show_hidden": {
        "name": "show_hidden",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView",
            "SettingPath"
        ],
        "prefix_kv": "show_hidden: True",
        "prefix_py": "show_hidden=True"
    },
    "sort_func": {
        "name": "sort_func",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser",
            "FileChooserController",
            "FileChooserIconView",
            "FileChooserListView"
        ],
        "prefix_kv": "sort_func: ",
        "prefix_py": "sort_func="
    },
    "update_view": {
        "name": "update_view",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooser"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "update_view: ",
        "prefix_py": "update_view=()"
    },
    "view_list": {
        "name": "view_list",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser"
        ],
        "prefix_kv": "view_list",
        "prefix_py": "view_list."
    },
    "view_mode": {
        "name": "view_mode",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooser"
        ],
        "prefix_kv": "view_mode",
        "prefix_py": "view_mode."
    },
    "FileChooserController": {
        "name": "FileChooserController",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserController",
        "help": "Base for implementing a FileChooser. Don't use this class directly, but\nprefer using an implementation such as the :class:`FileChooser`,\n:class:`FileChooserListView` or :class:`FileChooserIconView`.\n\n:Events:\n    `on_entry_added`: entry, parent\n        Fired when a root-level entry is added to the file list. If you\n        return True from this event, the entry is not added to FileChooser.\n    `on_entries_cleared`\n        Fired when the the entries list is cleared, usually when the\n        root is refreshed.\n    `on_subentry_to_entry`: entry, parent\n        Fired when a sub-entry is added to an existing entry or\n        when entries are removed from an entry e.g. when\n        a node is closed.\n    `on_submit`: selection, touch\n        Fired when a file has been selected with a double-tap.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserController:\n    ",
        "prefix_py": "FileChooserController()"
    },
    "FileChooserIconLayout": {
        "name": "FileChooserIconLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserIconLayout",
        "help": "File chooser layout using an icon view.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserIconLayout:\n    ",
        "prefix_py": "FileChooserIconLayout()"
    },
    "VIEWNAME": {
        "name": "VIEWNAME",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooserIconLayout",
            "FileChooserLayout",
            "FileChooserListLayout"
        ],
        "prefix_kv": "VIEWNAME: ''",
        "prefix_py": "VIEWNAME=''"
    },
    "controller": {
        "name": "controller",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooserIconLayout",
            "FileChooserLayout",
            "FileChooserListLayout"
        ],
        "prefix_kv": "controller: ",
        "prefix_py": "controller="
    },
    "scroll_to_top": {
        "name": "scroll_to_top",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileChooserIconLayout",
            "FileChooserListLayout"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "scroll_to_top: ",
        "prefix_py": "scroll_to_top=()"
    },
    "FileChooserIconView": {
        "name": "FileChooserIconView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserIconView",
        "help": "Implementation of a :class:`FileChooserController` using an icon view.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserIconView:\n    ",
        "prefix_py": "FileChooserIconView()"
    },
    "FileChooserLayout": {
        "name": "FileChooserLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserLayout",
        "help": "Base class for file chooser layouts.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserLayout:\n    ",
        "prefix_py": "FileChooserLayout()"
    },
    "FileChooserListLayout": {
        "name": "FileChooserListLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserListLayout",
        "help": "File chooser layout using a list view.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserListLayout:\n    ",
        "prefix_py": "FileChooserListLayout()"
    },
    "FileChooserListView": {
        "name": "FileChooserListView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserListView",
        "help": "Implementation of a :class:`FileChooserController` using a list view.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserListView:\n    ",
        "prefix_py": "FileChooserListView()"
    },
    "FileChooserProgress": {
        "name": "FileChooserProgress",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserProgress",
        "help": "Base for implementing a progress view. This view is used when too many\nentries need to be created and are delayed over multiple frames.\n\n.. versionadded:: 1.2.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserProgress:\n    ",
        "prefix_py": "FileChooserProgress()"
    },
    "total": {
        "name": "total",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FileChooserProgress",
            "FileChooserProgressBase"
        ],
        "prefix_kv": "total: ",
        "prefix_py": "total="
    },
    "FileChooserProgressBase": {
        "name": "FileChooserProgressBase",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import FileChooserProgressBase",
        "help": "Base for implementing a progress view. This view is used when too many\nentries need to be created and are delayed over multiple frames.\n\n.. versionadded:: 1.2.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileChooserProgressBase:\n    ",
        "prefix_py": "FileChooserProgressBase()"
    },
    "FileSystemAbstract": {
        "name": "FileSystemAbstract",
        "type": "type",
        "import": "from kivy.uix.filechooser import FileSystemAbstract",
        "help": "Class for implementing a File System view that can be used with the\n:class:`FileChooser <FileChooser>`.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileSystemAbstract: ",
        "prefix_py": "FileSystemAbstract="
    },
    "getsize": {
        "name": "getsize",
        "type": "function",
        "help": "Return the size in bytes of a file\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileSystemAbstract",
            "FileSystemLocal"
        ],
        "parametters": [
            "self",
            "fn"
        ],
        "prefix_kv": "getsize: ",
        "prefix_py": "getsize=()"
    },
    "is_dir": {
        "name": "is_dir",
        "type": "function",
        "help": "Return True if the argument passed to this method is a directory\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileSystemAbstract",
            "FileSystemLocal"
        ],
        "parametters": [
            "self",
            "fn"
        ],
        "prefix_kv": "is_dir: ",
        "prefix_py": "is_dir=()"
    },
    "is_hidden": {
        "name": "is_hidden",
        "type": "function",
        "help": "Return True if the file is hidden\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileSystemAbstract",
            "FileSystemLocal"
        ],
        "parametters": [
            "self",
            "fn"
        ],
        "prefix_kv": "is_hidden: ",
        "prefix_py": "is_hidden=()"
    },
    "listdir": {
        "name": "listdir",
        "type": "function",
        "help": "Return the list of files in the directory `fn`\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "FileSystemAbstract",
            "FileSystemLocal"
        ],
        "parametters": [
            "self",
            "fn"
        ],
        "prefix_kv": "listdir: ",
        "prefix_py": "listdir=()"
    },
    "FileSystemLocal": {
        "name": "FileSystemLocal",
        "type": "type",
        "import": "from kivy.uix.filechooser import FileSystemLocal",
        "help": "Implementation of :class:`FileSystemAbstract` for local files.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FileSystemLocal: ",
        "prefix_py": "FileSystemLocal="
    },
    "Screen": {
        "name": "Screen",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import Screen",
        "help": "Screen is an element intended to be used with a :class:`ScreenManager`.\nCheck module documentation for more information.\n\n:Events:\n    `on_pre_enter`: ()\n        Event fired when the screen is about to be used: the entering\n        animation is started.\n    `on_enter`: ()\n        Event fired when the screen is displayed: the entering animation is\n        complete.\n    `on_pre_leave`: ()\n        Event fired when the screen is about to be removed: the leaving\n        animation is started.\n    `on_leave`: ()\n        Event fired when the screen is removed: the leaving animation is\n        finished.\n\n.. versionchanged:: 1.6.0\n    Events `on_pre_enter`, `on_enter`, `on_pre_leave` and `on_leave` were\n    added.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Screen:\n    ",
        "prefix_py": "Screen()"
    },
    "on_enter": {
        "name": "on_enter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Screen"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_enter: ",
        "prefix_py": "on_enter=()"
    },
    "on_leave": {
        "name": "on_leave",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Screen"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_leave: ",
        "prefix_py": "on_leave=()"
    },
    "on_pre_enter": {
        "name": "on_pre_enter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Screen"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_pre_enter: ",
        "prefix_py": "on_pre_enter=()"
    },
    "on_pre_leave": {
        "name": "on_pre_leave",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Screen"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_pre_leave: ",
        "prefix_py": "on_pre_leave=()"
    },
    "transition_progress": {
        "name": "transition_progress",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Screen"
        ],
        "prefix_kv": "transition_progress: ",
        "prefix_py": "transition_progress="
    },
    "transition_state": {
        "name": "transition_state",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Screen"
        ],
        "prefix_kv": "transition_state: ''",
        "prefix_py": "transition_state=''"
    },
    "ScreenManager": {
        "name": "ScreenManager",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.filechooser import ScreenManager",
        "help": "Screen manager. This is the main class that will control your\n:class:`Screen` stack and memory.\n\nBy default, the manager will show only one screen at a time.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScreenManager:\n    ",
        "prefix_py": "ScreenManager()"
    },
    "_generate_screen_name": {
        "name": "_generate_screen_name",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_generate_screen_name: ",
        "prefix_py": "_generate_screen_name=()"
    },
    "_get_screen_names": {
        "name": "_get_screen_names",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_screen_names: ",
        "prefix_py": "_get_screen_names=()"
    },
    "_screen_name_changed": {
        "name": "_screen_name_changed",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "screen",
            "name"
        ],
        "prefix_kv": "_screen_name_changed: ",
        "prefix_py": "_screen_name_changed=()"
    },
    "_update_pos": {
        "name": "_update_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_update_pos: ",
        "prefix_py": "_update_pos=()"
    },
    "current": {
        "name": "current",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ScreenManager"
        ],
        "prefix_kv": "current: ''",
        "prefix_py": "current=''"
    },
    "current_screen": {
        "name": "current_screen",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ScreenManager"
        ],
        "prefix_kv": "current_screen: ",
        "prefix_py": "current_screen="
    },
    "get_screen": {
        "name": "get_screen",
        "type": "function",
        "help": "Return the screen widget associated with the name or raise a\n:class:`ScreenManagerException` if not found.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "name"
        ],
        "prefix_kv": "get_screen: ",
        "prefix_py": "get_screen=()"
    },
    "has_screen": {
        "name": "has_screen",
        "type": "function",
        "help": "Return True if a screen with the `name` has been found.\n\n.. versionadded:: 1.6.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "name"
        ],
        "prefix_kv": "has_screen: ",
        "prefix_py": "has_screen=()"
    },
    "next": {
        "name": "next",
        "type": "function",
        "help": "Return the name of the next screen from the screen list.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "next: ",
        "prefix_py": "next=()"
    },
    "on_current": {
        "name": "on_current",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_current: ",
        "prefix_py": "on_current=()"
    },
    "previous": {
        "name": "previous",
        "type": "function",
        "help": "Return the name of the previous screen from the screen list.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "previous: ",
        "prefix_py": "previous=()"
    },
    "real_add_widget": {
        "name": "real_add_widget",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "screen",
            "args"
        ],
        "prefix_kv": "real_add_widget: ",
        "prefix_py": "real_add_widget=()"
    },
    "real_remove_widget": {
        "name": "real_remove_widget",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager"
        ],
        "parametters": [
            "self",
            "screen",
            "args"
        ],
        "prefix_kv": "real_remove_widget: ",
        "prefix_py": "real_remove_widget=()"
    },
    "screen_names": {
        "name": "screen_names",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ScreenManager"
        ],
        "prefix_kv": "screen_names",
        "prefix_py": "screen_names."
    },
    "screens": {
        "name": "screens",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ScreenManager"
        ],
        "prefix_kv": "screens: ()",
        "prefix_py": "screens=()"
    },
    "switch_to": {
        "name": "switch_to",
        "type": "function",
        "help": "Add a new or existing screen to the ScreenManager and switch to it.\nThe previous screen will be \"switched away\" from. `options` are the\n:attr:`transition` options that will be changed before the animation\nhappens.\n\nIf no previous screens are available, the screen will be used as the\nmain one::\n\n    sm = ScreenManager()\n    sm.switch_to(screen1)\n    # later\n    sm.switch_to(screen2, direction='left')\n    # later\n    sm.switch_to(screen3, direction='right', duration=1.)\n\nIf any animation is in progress, it will be stopped and replaced by\nthis one: you should avoid this because the animation will just look\nweird. Use either :meth:`switch_to` or :attr:`current` but not both.\n\nThe `screen` name will be changed if there is any conflict with the\ncurrent screen.\n\n.. versionadded: 1.8.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScreenManager",
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "screen",
            "options"
        ],
        "prefix_kv": "switch_to: ",
        "prefix_py": "switch_to=()"
    },
    "error": {
        "name": "error",
        "type": "type",
        "import": "from kivy.uix.filechooser import error",
        "help": "Common base class for all non-exit exceptions.",
        "mtype": "class",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "error: ",
        "prefix_py": "error="
    },
    "string_types": {
        "name": "string_types",
        "type": "type",
        "import": "from kivy.uix.filechooser import string_types",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "string_types: ",
        "prefix_py": "string_types="
    },
    "capitalize": {
        "name": "capitalize",
        "type": "method_descriptor",
        "help": "Return a capitalized version of the string.\n\nMore specifically, make the first character have upper case and the rest lower\ncase.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "capitalize: ()",
        "prefix_py": "capitalize=()"
    },
    "casefold": {
        "name": "casefold",
        "type": "method_descriptor",
        "help": "Return a version of the string suitable for caseless comparisons.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "casefold: ()",
        "prefix_py": "casefold=()"
    },
    "count": {
        "name": "count",
        "type": "method_descriptor",
        "help": "S.count(sub[, start[, end]]) -> int\n\nReturn the number of non-overlapping occurrences of substring sub in\nstring S[start:end].  Optional arguments start and end are\ninterpreted as in slice notation.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "Vector",
            "text_type"
        ],
        "prefix_kv": "count: ()",
        "prefix_py": "count=()"
    },
    "encode": {
        "name": "encode",
        "type": "method_descriptor",
        "help": "Encode the string using the codec registered for encoding.\n\nencoding\n  The encoding in which to encode the string.\nerrors\n  The error handling scheme to use for encoding errors.\n  The default is 'strict' meaning that encoding errors raise a\n  UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n  'xmlcharrefreplace' as well as any other name registered with\n  codecs.register_error that can handle UnicodeEncodeErrors.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "encode: ()",
        "prefix_py": "encode=()"
    },
    "endswith": {
        "name": "endswith",
        "type": "method_descriptor",
        "help": "S.endswith(suffix[, start[, end]]) -> bool\n\nReturn True if S ends with the specified suffix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nsuffix can also be a tuple of strings to try.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "endswith: ()",
        "prefix_py": "endswith=()"
    },
    "expandtabs": {
        "name": "expandtabs",
        "type": "method_descriptor",
        "help": "Return a copy where all tab characters are expanded using spaces.\n\nIf tabsize is not given, a tab size of 8 characters is assumed.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "expandtabs: ()",
        "prefix_py": "expandtabs=()"
    },
    "find": {
        "name": "find",
        "type": "method_descriptor",
        "help": "S.find(sub[, start[, end]]) -> int\n\nReturn the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "find: ()",
        "prefix_py": "find=()"
    },
    "format_map": {
        "name": "format_map",
        "type": "method_descriptor",
        "help": "S.format_map(mapping) -> str\n\nReturn a formatted version of S, using substitutions from mapping.\nThe substitutions are identified by braces ('{' and '}').",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "format_map: ()",
        "prefix_py": "format_map=()"
    },
    "isalnum": {
        "name": "isalnum",
        "type": "method_descriptor",
        "help": "Return True if the string is an alpha-numeric string, False otherwise.\n\nA string is alpha-numeric if all characters in the string are alpha-numeric and\nthere is at least one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isalnum: ()",
        "prefix_py": "isalnum=()"
    },
    "isalpha": {
        "name": "isalpha",
        "type": "method_descriptor",
        "help": "Return True if the string is an alphabetic string, False otherwise.\n\nA string is alphabetic if all characters in the string are alphabetic and there\nis at least one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isalpha: ()",
        "prefix_py": "isalpha=()"
    },
    "isascii": {
        "name": "isascii",
        "type": "method_descriptor",
        "help": "Return True if all characters in the string are ASCII, False otherwise.\n\nASCII characters have code points in the range U+0000-U+007F.\nEmpty string is ASCII too.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isascii: ()",
        "prefix_py": "isascii=()"
    },
    "isdecimal": {
        "name": "isdecimal",
        "type": "method_descriptor",
        "help": "Return True if the string is a decimal string, False otherwise.\n\nA string is a decimal string if all characters in the string are decimal and\nthere is at least one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isdecimal: ()",
        "prefix_py": "isdecimal=()"
    },
    "isdigit": {
        "name": "isdigit",
        "type": "method_descriptor",
        "help": "Return True if the string is a digit string, False otherwise.\n\nA string is a digit string if all characters in the string are digits and there\nis at least one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isdigit: ()",
        "prefix_py": "isdigit=()"
    },
    "isidentifier": {
        "name": "isidentifier",
        "type": "method_descriptor",
        "help": "Return True if the string is a valid Python identifier, False otherwise.\n\nCall keyword.iskeyword(s) to test whether string s is a reserved identifier,\nsuch as \"def\" or \"class\".",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isidentifier: ()",
        "prefix_py": "isidentifier=()"
    },
    "islower": {
        "name": "islower",
        "type": "method_descriptor",
        "help": "Return True if the string is a lowercase string, False otherwise.\n\nA string is lowercase if all cased characters in the string are lowercase and\nthere is at least one cased character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "islower: ()",
        "prefix_py": "islower=()"
    },
    "isnumeric": {
        "name": "isnumeric",
        "type": "method_descriptor",
        "help": "Return True if the string is a numeric string, False otherwise.\n\nA string is numeric if all characters in the string are numeric and there is at\nleast one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isnumeric: ()",
        "prefix_py": "isnumeric=()"
    },
    "isprintable": {
        "name": "isprintable",
        "type": "method_descriptor",
        "help": "Return True if the string is printable, False otherwise.\n\nA string is printable if all of its characters are considered printable in\nrepr() or if it is empty.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isprintable: ()",
        "prefix_py": "isprintable=()"
    },
    "isspace": {
        "name": "isspace",
        "type": "method_descriptor",
        "help": "Return True if the string is a whitespace string, False otherwise.\n\nA string is whitespace if all characters in the string are whitespace and there\nis at least one character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isspace: ()",
        "prefix_py": "isspace=()"
    },
    "istitle": {
        "name": "istitle",
        "type": "method_descriptor",
        "help": "Return True if the string is a title-cased string, False otherwise.\n\nIn a title-cased string, upper- and title-case characters may only\nfollow uncased characters and lowercase characters only cased ones.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "istitle: ()",
        "prefix_py": "istitle=()"
    },
    "isupper": {
        "name": "isupper",
        "type": "method_descriptor",
        "help": "Return True if the string is an uppercase string, False otherwise.\n\nA string is uppercase if all cased characters in the string are uppercase and\nthere is at least one cased character in the string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "isupper: ()",
        "prefix_py": "isupper=()"
    },
    "join": {
        "name": "join",
        "type": "method_descriptor",
        "help": "Concatenate any number of strings.\n\nThe string whose method is called is inserted in between each given string.\nThe result is returned as a new string.\n\nExample: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "join: ()",
        "prefix_py": "join=()"
    },
    "ljust": {
        "name": "ljust",
        "type": "method_descriptor",
        "help": "Return a left-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "ljust: ()",
        "prefix_py": "ljust=()"
    },
    "lower": {
        "name": "lower",
        "type": "method_descriptor",
        "help": "Return a copy of the string converted to lowercase.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "lower: ()",
        "prefix_py": "lower=()"
    },
    "lstrip": {
        "name": "lstrip",
        "type": "method_descriptor",
        "help": "Return a copy of the string with leading whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "lstrip: ()",
        "prefix_py": "lstrip=()"
    },
    "maketrans": {
        "name": "maketrans",
        "type": "builtin_function_or_method",
        "help": "Return a translation table usable for str.translate().\n\nIf there is only one argument, it must be a dictionary mapping Unicode\nordinals (integers) or characters to Unicode ordinals, strings or None.\nCharacter keys will be then converted to ordinals.\nIf there are two arguments, they must be strings of equal length, and\nin the resulting dictionary, each character in x will be mapped to the\ncharacter at the same position in y. If there is a third argument, it\nmust be a string, whose characters will be mapped to None in the result.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "maketrans",
        "prefix_py": "maketrans."
    },
    "partition": {
        "name": "partition",
        "type": "method_descriptor",
        "help": "Partition the string into three parts using the given separator.\n\nThis will search for the separator in the string.  If the separator is found,\nreturns a 3-tuple containing the part before the separator, the separator\nitself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing the original string\nand two empty strings.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "partition: ()",
        "prefix_py": "partition=()"
    },
    "removeprefix": {
        "name": "removeprefix",
        "type": "method_descriptor",
        "help": "Return a str with the given prefix string removed if present.\n\nIf the string starts with the prefix string, return string[len(prefix):].\nOtherwise, return a copy of the original string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "removeprefix: ()",
        "prefix_py": "removeprefix=()"
    },
    "removesuffix": {
        "name": "removesuffix",
        "type": "method_descriptor",
        "help": "Return a str with the given suffix string removed if present.\n\nIf the string ends with the suffix string and that suffix is not empty,\nreturn string[:-len(suffix)]. Otherwise, return a copy of the original\nstring.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "removesuffix: ()",
        "prefix_py": "removesuffix=()"
    },
    "replace": {
        "name": "replace",
        "type": "method_descriptor",
        "help": "Return a copy with all occurrences of substring old replaced by new.\n\n  count\n    Maximum number of occurrences to replace.\n    -1 (the default value) means replace all occurrences.\n\nIf the optional argument count is given, only the first count occurrences are\nreplaced.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "nodeclass",
            "role_doc",
            "role_video",
            "text_type"
        ],
        "prefix_kv": "replace: ()",
        "prefix_py": "replace=()"
    },
    "rfind": {
        "name": "rfind",
        "type": "method_descriptor",
        "help": "S.rfind(sub[, start[, end]]) -> int\n\nReturn the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rfind: ()",
        "prefix_py": "rfind=()"
    },
    "rindex": {
        "name": "rindex",
        "type": "method_descriptor",
        "help": "S.rindex(sub[, start[, end]]) -> int\n\nReturn the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nRaises ValueError when the substring is not found.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rindex: ()",
        "prefix_py": "rindex=()"
    },
    "rjust": {
        "name": "rjust",
        "type": "method_descriptor",
        "help": "Return a right-justified string of length width.\n\nPadding is done using the specified fill character (default is a space).",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rjust: ()",
        "prefix_py": "rjust=()"
    },
    "rpartition": {
        "name": "rpartition",
        "type": "method_descriptor",
        "help": "Partition the string into three parts using the given separator.\n\nThis will search for the separator in the string, starting at the end. If\nthe separator is found, returns a 3-tuple containing the part before the\nseparator, the separator itself, and the part after it.\n\nIf the separator is not found, returns a 3-tuple containing two empty strings\nand the original string.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rpartition: ()",
        "prefix_py": "rpartition=()"
    },
    "rsplit": {
        "name": "rsplit",
        "type": "method_descriptor",
        "help": "Return a list of the substrings in the string, using sep as the separator string.\n\n  sep\n    The separator used to split the string.\n\n    When set to None (the default value), will split on any whitespace\n    character (including \\n \\r \\t \\f and spaces) and will discard\n    empty strings from the result.\n  maxsplit\n    Maximum number of splits.\n    -1 (the default value) means no limit.\n\nSplitting starts at the end of the string and works to the front.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rsplit: ()",
        "prefix_py": "rsplit=()"
    },
    "rstrip": {
        "name": "rstrip",
        "type": "method_descriptor",
        "help": "Return a copy of the string with trailing whitespace removed.\n\nIf chars is given and not None, remove characters in chars instead.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "rstrip: ()",
        "prefix_py": "rstrip=()"
    },
    "split": {
        "name": "split",
        "type": "method_descriptor",
        "help": "Return a list of the substrings in the string, using sep as the separator string.\n\n  sep\n    The separator used to split the string.\n\n    When set to None (the default value), will split on any whitespace\n    character (including \\n \\r \\t \\f and spaces) and will discard\n    empty strings from the result.\n  maxsplit\n    Maximum number of splits.\n    -1 (the default value) means no limit.\n\nSplitting starts at the front of the string and works to the end.\n\nNote, str.split() is mainly useful for data that has been intentionally\ndelimited.  With natural text that includes punctuation, consider using\nthe regular expression module.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "split: ()",
        "prefix_py": "split=()"
    },
    "splitlines": {
        "name": "splitlines",
        "type": "method_descriptor",
        "help": "Return a list of the lines in the string, breaking at line boundaries.\n\nLine breaks are not included in the resulting list unless keepends is given and\ntrue.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "splitlines: ()",
        "prefix_py": "splitlines=()"
    },
    "startswith": {
        "name": "startswith",
        "type": "method_descriptor",
        "help": "S.startswith(prefix[, start[, end]]) -> bool\n\nReturn True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "startswith: ()",
        "prefix_py": "startswith=()"
    },
    "swapcase": {
        "name": "swapcase",
        "type": "method_descriptor",
        "help": "Convert uppercase characters to lowercase and lowercase characters to uppercase.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "swapcase: ()",
        "prefix_py": "swapcase=()"
    },
    "upper": {
        "name": "upper",
        "type": "method_descriptor",
        "help": "Return a copy of the string converted to uppercase.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "upper: ()",
        "prefix_py": "upper=()"
    },
    "zfill": {
        "name": "zfill",
        "type": "method_descriptor",
        "help": "Pad a numeric string with zeros on the left, to fill a field of the given width.\n\nThe string is never truncated.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "string_types",
            "text_type"
        ],
        "prefix_kv": "zfill: ()",
        "prefix_py": "zfill=()"
    },
    "GestureContainer": {
        "name": "GestureContainer",
        "type": "type",
        "import": "from kivy.uix.gesturesurface import GestureContainer",
        "help": "Container object that stores information about a gesture. It has\nvarious properties that are updated by `GestureSurface` as drawing\nprogresses.\n\n:Arguments:\n    `touch`\n        Touch object (as received by on_touch_down) used to initialize\n        the gesture container. Required.\n\n:Properties:\n    `active`\n        Set to False once the gesture is complete (meets\n        `max_stroke` setting or `GestureSurface.temporal_window`)\n\n        :attr:`active` is a\n        :class:`~kivy.properties.BooleanProperty`\n\n    `active_strokes`\n        Number of strokes currently active in the gesture, ie\n        concurrent touches associated with this gesture.\n\n        :attr:`active_strokes` is a\n        :class:`~kivy.properties.NumericProperty`\n\n    `max_strokes`\n        Max number of strokes allowed in the gesture. This\n        is set by `GestureSurface.max_strokes` but can\n        be overridden for example from `on_gesture_start`.\n\n        :attr:`max_strokes` is a\n        :class:`~kivy.properties.NumericProperty`\n\n    `was_merged`\n        Indicates that this gesture has been merged with another\n        gesture and should be considered discarded.\n\n        :attr:`was_merged` is a\n        :class:`~kivy.properties.BooleanProperty`\n\n    `bbox`\n        Dictionary with keys minx, miny, maxx, maxy. Represents the size\n        of the gesture bounding box.\n\n        :attr:`bbox` is a\n        :class:`~kivy.properties.DictProperty`\n\n    `width`\n        Represents the width of the gesture.\n\n        :attr:`width` is a\n        :class:`~kivy.properties.NumericProperty`\n\n    `height`\n        Represents the height of the gesture.\n\n        :attr:`height` is a\n        :class:`~kivy.properties.NumericProperty`",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "GestureContainer: ",
        "prefix_py": "GestureContainer="
    },
    "accept_stroke": {
        "name": "accept_stroke",
        "type": "function",
        "help": "Returns True if this container can accept `count` new strokes",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self",
            "count"
        ],
        "prefix_kv": "accept_stroke: ",
        "prefix_py": "accept_stroke=()"
    },
    "active_strokes": {
        "name": "active_strokes",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureContainer"
        ],
        "prefix_kv": "active_strokes: ",
        "prefix_py": "active_strokes="
    },
    "add_stroke": {
        "name": "add_stroke",
        "type": "function",
        "help": "Associate a list of points with a touch.uid; the line itself is\ncreated by the caller, but subsequent move/up events look it\nup via us. This is done to avoid problems during merge.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self",
            "touch",
            "line"
        ],
        "prefix_kv": "add_stroke: ",
        "prefix_py": "add_stroke=()"
    },
    "complete_stroke": {
        "name": "complete_stroke",
        "type": "function",
        "help": "Called on touch up events to keep track of how many strokes\nare active in the gesture (we only want to dispatch event when\nthe *last* stroke in the gesture is released)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "complete_stroke: ",
        "prefix_py": "complete_stroke=()"
    },
    "get_vectors": {
        "name": "get_vectors",
        "type": "function",
        "help": "Return strokes in a format that is acceptable for\n`kivy.multistroke.Recognizer` as a gesture candidate or template. The\nresult is cached automatically; the cache is invalidated at the start\nand end of a stroke and if `update_bbox` is called. If you are going\nto analyze a gesture mid-stroke, you may need to set the `no_cache`\nargument to True.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self",
            "kwargs"
        ],
        "prefix_kv": "get_vectors: ",
        "prefix_py": "get_vectors=()"
    },
    "handles": {
        "name": "handles",
        "type": "function",
        "help": "Returns True if this container handles the given touch",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "handles: ",
        "prefix_py": "handles=()"
    },
    "max_strokes": {
        "name": "max_strokes",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureContainer",
            "GestureSurface"
        ],
        "prefix_kv": "max_strokes: ",
        "prefix_py": "max_strokes="
    },
    "single_points_test": {
        "name": "single_points_test",
        "type": "function",
        "help": "Returns True if the gesture consists only of single-point strokes,\nwe must discard it in this case, or an exception will be raised",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "single_points_test: ",
        "prefix_py": "single_points_test=()"
    },
    "update_bbox": {
        "name": "update_bbox",
        "type": "function",
        "help": "Update gesture bbox from a touch coordinate",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureContainer"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "update_bbox: ",
        "prefix_py": "update_bbox=()"
    },
    "was_merged": {
        "name": "was_merged",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureContainer"
        ],
        "prefix_kv": "was_merged: True",
        "prefix_py": "was_merged=True"
    },
    "GestureSurface": {
        "name": "GestureSurface",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.gesturesurface import GestureSurface",
        "help": "Simple gesture surface to track/draw touch movements. Typically used\nto gather user input suitable for :class:`kivy.multistroke.Recognizer`.\n\n:Properties:\n    `temporal_window`\n        Time to wait from the last touch_up event before attempting\n        to recognize the gesture. If you set this to 0, the\n        `on_gesture_complete` event is not fired unless the\n        :attr:`max_strokes` condition is met.\n\n        :attr:`temporal_window` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 2.0\n\n    `max_strokes`\n        Max number of strokes in a single gesture; if this is reached,\n        recognition will start immediately on the final touch_up event.\n        If this is set to 0, the `on_gesture_complete` event is not\n        fired unless the :attr:`temporal_window` expires.\n\n        :attr:`max_strokes` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 2.0\n\n    `bbox_margin`\n        Bounding box margin for detecting gesture collisions, in\n        pixels.\n\n        :attr:`bbox_margin` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 30\n\n    `draw_timeout`\n        Number of seconds to keep lines/bbox on canvas after the\n        `on_gesture_complete` event is fired. If this is set to 0,\n        gestures are immediately removed from the surface when\n        complete.\n\n        :attr:`draw_timeout` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 3.0\n\n    `color`\n        Color used to draw the gesture, in RGB. This option does not\n        have an effect if :attr:`use_random_color` is True.\n\n        :attr:`color` is a\n        :class:`~kivy.properties.ColorProperty` and defaults to\n        [1, 1, 1, 1] (white)\n\n        .. versionchanged:: 2.0.0\n            Changed from :class:`~kivy.properties.ListProperty` to\n            :class:`~kivy.properties.ColorProperty`.\n\n    `use_random_color`\n        Set to True to pick a random color for each gesture, if you do\n        this then `color` is ignored. Defaults to False.\n\n        :attr:`use_random_color` is a\n        :class:`~kivy.properties.BooleanProperty` and defaults to False\n\n    `line_width`\n        Line width used for tracing touches on the surface. Set to 0\n        if you only want to detect gestures without drawing anything.\n        If you use 1.0, OpenGL GL_LINE is used for drawing; values > 1\n        will use an internal drawing method based on triangles (less\n        efficient), see :mod:`kivy.graphics`.\n\n        :attr:`line_width` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 2\n\n    `draw_bbox`\n        Set to True if you want to draw bounding box behind gestures.\n        This only works if `line_width` >= 1. Default is False.\n\n        :attr:`draw_bbox` is a\n        :class:`~kivy.properties.BooleanProperty` and defaults to True\n\n    `bbox_alpha`\n        Opacity for bounding box if `draw_bbox` is True. Default 0.1\n\n        :attr:`bbox_alpha` is a\n        :class:`~kivy.properties.NumericProperty` and defaults to 0.1\n\n:Events:\n    `on_gesture_start` :class:`GestureContainer`\n        Fired when a new gesture is initiated on the surface, i.e. the\n        first on_touch_down that does not collide with an existing\n        gesture on the surface.\n\n    `on_gesture_extend` :class:`GestureContainer`\n        Fired when a touch_down event occurs within an existing gesture.\n\n    `on_gesture_merge` :class:`GestureContainer`, :class:`GestureContainer`\n        Fired when two gestures collide and get merged to one gesture.\n        The first argument is the gesture that has been merged (no longer\n        valid); the second is the combined (resulting) gesture.\n\n    `on_gesture_complete` :class:`GestureContainer`\n        Fired when a set of strokes is considered a complete gesture,\n        this happens when `temporal_window` expires or `max_strokes`\n        is reached. Typically you will bind to this event and use\n        the provided `GestureContainer` get_vectors() method to\n        match against your gesture database.\n\n    `on_gesture_cleanup` :class:`GestureContainer`\n        Fired `draw_timeout` seconds after `on_gesture_complete`,\n        The gesture will be removed from the canvas (if line_width > 0 or\n        draw_bbox is True) and the internal gesture list before this.\n\n    `on_gesture_discard` :class:`GestureContainer`\n        Fired when a gesture does not meet the minimum size requirements\n        for recognition (width/height < 5, or consists only of single-\n        point strokes).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "GestureSurface:\n    ",
        "prefix_py": "GestureSurface()"
    },
    "_cleanup": {
        "name": "_cleanup",
        "type": "function",
        "help": "This method is scheduled from _complete_dispatcher to clean up the\ncanvas and internal gesture list after a gesture is completed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_cleanup: ",
        "prefix_py": "_cleanup=()"
    },
    "_complete_dispatcher": {
        "name": "_complete_dispatcher",
        "type": "function",
        "help": "This method is scheduled on all touch up events. It will dispatch\nthe `on_gesture_complete` event for all completed gestures, and remove\nmerged gestures from the internal gesture list.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_complete_dispatcher: ",
        "prefix_py": "_complete_dispatcher=()"
    },
    "_update_canvas_bbox": {
        "name": "_update_canvas_bbox",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "g"
        ],
        "prefix_kv": "_update_canvas_bbox: ",
        "prefix_py": "_update_canvas_bbox=()"
    },
    "bbox_alpha": {
        "name": "bbox_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "bbox_alpha: ",
        "prefix_py": "bbox_alpha="
    },
    "bbox_margin": {
        "name": "bbox_margin",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "bbox_margin: ",
        "prefix_py": "bbox_margin="
    },
    "draw_bbox": {
        "name": "draw_bbox",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "draw_bbox: True",
        "prefix_py": "draw_bbox=True"
    },
    "draw_timeout": {
        "name": "draw_timeout",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "draw_timeout: ",
        "prefix_py": "draw_timeout="
    },
    "find_colliding_gesture": {
        "name": "find_colliding_gesture",
        "type": "function",
        "help": "Checks if a touch x/y collides with the bounding box of an existing\ngesture. If so, return it (otherwise returns None)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "find_colliding_gesture: ",
        "prefix_py": "find_colliding_gesture=()"
    },
    "get_gesture": {
        "name": "get_gesture",
        "type": "function",
        "help": "Returns GestureContainer associated with given touch",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "get_gesture: ",
        "prefix_py": "get_gesture=()"
    },
    "init_gesture": {
        "name": "init_gesture",
        "type": "function",
        "help": "Create a new gesture from touch, i.e. it's the first on\nsurface, or was not close enough to any existing gesture (yet)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "init_gesture: ",
        "prefix_py": "init_gesture=()"
    },
    "init_stroke": {
        "name": "init_stroke",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "g",
            "touch"
        ],
        "prefix_kv": "init_stroke: ",
        "prefix_py": "init_stroke=()"
    },
    "line_width": {
        "name": "line_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "line_width: ",
        "prefix_py": "line_width="
    },
    "merge_gestures": {
        "name": "merge_gestures",
        "type": "function",
        "help": "Merges two gestures together, the oldest one is retained and the\nnewer one gets the `GestureContainer.was_merged` flag raised.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "g",
            "other"
        ],
        "prefix_kv": "merge_gestures: ",
        "prefix_py": "merge_gestures=()"
    },
    "on_gesture_cleanup": {
        "name": "on_gesture_cleanup",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_cleanup: ",
        "prefix_py": "on_gesture_cleanup=()"
    },
    "on_gesture_complete": {
        "name": "on_gesture_complete",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_complete: ",
        "prefix_py": "on_gesture_complete=()"
    },
    "on_gesture_discard": {
        "name": "on_gesture_discard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_discard: ",
        "prefix_py": "on_gesture_discard=()"
    },
    "on_gesture_extend": {
        "name": "on_gesture_extend",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_extend: ",
        "prefix_py": "on_gesture_extend=()"
    },
    "on_gesture_merge": {
        "name": "on_gesture_merge",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_merge: ",
        "prefix_py": "on_gesture_merge=()"
    },
    "on_gesture_start": {
        "name": "on_gesture_start",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GestureSurface"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_gesture_start: ",
        "prefix_py": "on_gesture_start=()"
    },
    "temporal_window": {
        "name": "temporal_window",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "temporal_window: ",
        "prefix_py": "temporal_window="
    },
    "use_random_color": {
        "name": "use_random_color",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GestureSurface"
        ],
        "prefix_kv": "use_random_color: True",
        "prefix_py": "use_random_color=True"
    },
    "Line": {
        "name": "Line",
        "type": "type",
        "import": "from kivy.uix.gesturesurface import Line",
        "help": "Line(**kwargs)\nA 2d line.\n\n    Drawing a line can be done easily::\n\n        with self.canvas:\n            Line(points=[100, 100, 200, 100, 100, 200], width=10)\n\n    The line has 3 internal drawing modes that you should be aware of\n    for optimal results:\n\n    #. If the :attr:`width` is 1.0 and :attr:`force_custom_drawing_method` is False, then the\n       standard GL_LINE drawing from OpenGL will be used. :attr:`dash_length`,\n       :attr:`dash_offset`, and :attr:`dashes` will work, while properties for\n       cap and joint have no meaning here.\n    #. If the :attr:`width` is greater than 1.0 or :attr:`force_custom_drawing_method`\n       is True, then a custom drawing method, based on triangulation,\n       will be used. :attr:`dash_length`, :attr:`dash_offset`,\n       and :attr:`dashes` do not work in this mode.\n       Additionally, if the current color has an alpha less than 1.0, a\n       stencil will be used internally to draw the line.\n\n    .. image:: images/line-instruction.png\n        :align: center\n\n    :Parameters:\n        `points`: list\n            List of points in the format (x1, y1, x2, y2...)\n        `dash_length`: int\n            Length of a segment (if dashed), defaults to 1.\n        `dash_offset`: int\n            Offset between the end of a segment and the beginning of the\n            next one, defaults to 0. Changing this makes it dashed.\n        `dashes`: list of ints\n            List of [ON length, offset, ON length, offset, ...]. E.g. ``[2,4,1,6,8,2]``\n            would create a line with the first dash length 2 then an offset of 4 then\n            a dash length of 1 then an offset of 6 and so on. Defaults to ``[]``.\n            Changing this makes it dashed and overrides `dash_length` and `dash_offset`.\n        `width`: float\n            Width of the line, defaults to 1.0.\n        `cap`: str, defaults to 'round'\n            See :attr:`cap` for more information.\n        `joint`: str, defaults to 'round'\n            See :attr:`joint` for more information.\n        `cap_precision`: int, defaults to 10\n            See :attr:`cap_precision` for more information\n        `joint_precision`: int, defaults to 10\n            See :attr:`joint_precision` for more information\n            See :attr:`cap_precision` for more information.\n        `joint_precision`: int, defaults to 10\n            See :attr:`joint_precision` for more information.\n        `close`: bool, defaults to False\n            If True, the line will be closed.\n        `circle`: list\n            If set, the :attr:`points` will be set to build a circle. See\n            :attr:`circle` for more information.\n        `ellipse`: list\n            If set, the :attr:`points` will be set to build an ellipse. See\n            :attr:`ellipse` for more information.\n        `rectangle`: list\n            If set, the :attr:`points` will be set to build a rectangle. See\n            :attr:`rectangle` for more information.\n        `bezier`: list\n            If set, the :attr:`points` will be set to build a bezier line. See\n            :attr:`bezier` for more information.\n        `bezier_precision`: int, defaults to 180\n            Precision of the Bezier drawing.\n        `force_custom_drawing_method`: bool, defaults to False\n            Should the custom drawing method be used, instead of it depending on :attr:`width`\n            being equal to 1.o or not.\n\n    .. versionchanged:: 1.0.8\n        `dash_offset` and `dash_length` have been added.\n\n    .. versionchanged:: 1.4.1\n        `width`, `cap`, `joint`, `cap_precision`, `joint_precision`, `close`,\n        `ellipse`, `rectangle` have been added.\n\n    .. versionchanged:: 1.4.1\n        `bezier`, `bezier_precision` have been added.\n\n    .. versionchanged:: 1.11.0\n        `dashes` have been added\n\n    .. versionchanged:: 2.3.0\n        `force_custom_drawing_method` has been added\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Line: ",
        "prefix_py": "Line="
    },
    "bezier": {
        "name": "bezier",
        "type": "getset_descriptor",
        "help": "Use this property to build a bezier line, without calculating the\n:attr:`points`. You can only set this property, not get it.\n\nThe argument must be a tuple of 2n elements, n being the number of points.\n\nUsage::\n\n    Line(bezier=(x1, y1, x2, y2, x3, y3)\n\n.. versionadded:: 1.4.2\n\n.. note:: Bezier lines calculations are inexpensive for a low number of\n    points, but complexity is quadratic, so lines with a lot of points\n    can be very expensive to build, use with care!",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "bezier: ",
        "prefix_py": "bezier="
    },
    "bezier_precision": {
        "name": "bezier_precision",
        "type": "getset_descriptor",
        "help": "Number of iteration for drawing the bezier between 2 segments,\ndefaults to 180. The bezier_precision must be at least 1.\n\n.. versionadded:: 1.4.2",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "bezier_precision: ",
        "prefix_py": "bezier_precision="
    },
    "cap": {
        "name": "cap",
        "type": "getset_descriptor",
        "help": "Determine the cap of the line, defaults to 'round'. Can be one of\n'none', 'square' or 'round'\n\n.. versionadded:: 1.4.1",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "cap: ",
        "prefix_py": "cap="
    },
    "cap_precision": {
        "name": "cap_precision",
        "type": "getset_descriptor",
        "help": "Number of iteration for drawing the \"round\" cap, defaults to 10.\nThe cap_precision must be at least 1.\n\n.. versionadded:: 1.4.1",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "cap_precision: ",
        "prefix_py": "cap_precision="
    },
    "circle": {
        "name": "circle",
        "type": "getset_descriptor",
        "help": "Use this property to build a circle, without calculating the\n:attr:`points`.\n\nThe argument must be a tuple of (center_x, center_y, radius, angle_start,\nangle_end, segments):\n\n* center_x and center_y represent the center of the circle\n* radius represent the radius of the circle\n* (optional) angle_start and angle_end are in degree. The default\n  value is 0 and 360.\n* (optional) segments is the precision of the ellipse. The default\n  value is calculated from the range between angle.\n\nNote that it's up to you to :attr:`close` the circle or not.\n\nFor example, for building a simple ellipse, in python::\n\n    # simple circle\n    Line(circle=(150, 150, 50))\n\n    # only from 90 to 180 degrees\n    Line(circle=(150, 150, 50, 90, 180))\n\n    # only from 90 to 180 degrees, with few segments\n    Line(circle=(150, 150, 50, 90, 180, 20))\n\n.. versionadded:: 1.4.1\n\n.. versionchanged:: 2.2.0\n    Now you can get the circle generated through the property.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "circle: ",
        "prefix_py": "circle="
    },
    "close": {
        "name": "close",
        "type": "getset_descriptor",
        "help": "If True, the line will be closed by joining the two ends, according to :attr:`close_mode`.\n\n.. versionadded:: 1.4.1",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "close: ",
        "prefix_py": "close="
    },
    "close_mode": {
        "name": "close_mode",
        "type": "getset_descriptor",
        "help": "Defines how the ends of the line will be connected.\nDefaults to ``\"straight-line\"``.\n\n.. note::\n    Support for the different closing modes depends on drawing shapes.\n\nAvailable modes:\n\n- ``\"straight-line\"`` (all drawing shapes): the ends will be closed by a straight line.\n- ``\"center-connected\"`` (:attr:`ellipse` specific): the ends will be closed by a line passing through the center of the ellipse.\n\n.. versionadded:: 2.2.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "close_mode: ",
        "prefix_py": "close_mode="
    },
    "dash_length": {
        "name": "dash_length",
        "type": "getset_descriptor",
        "help": "Property for getting/setting the length of the dashes in the curve\n\n.. versionadded:: 1.0.8",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "dash_length: ",
        "prefix_py": "dash_length="
    },
    "dash_offset": {
        "name": "dash_offset",
        "type": "getset_descriptor",
        "help": "Property for getting/setting the offset between the dashes in the curve\n\n.. versionadded:: 1.0.8",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "dash_offset: ",
        "prefix_py": "dash_offset="
    },
    "dashes": {
        "name": "dashes",
        "type": "getset_descriptor",
        "help": "Property for getting/setting ``dashes``.\n\nList of [ON length, offset, ON length, offset, ...]. E.g. ``[2,4,1,6,8,2]``\nwould create a line with the first dash length 2 then an offset of 4 then\na dash length of 1 then an offset of 6 and so on.\n\n.. versionadded:: 1.11.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "dashes: ",
        "prefix_py": "dashes="
    },
    "ellipse": {
        "name": "ellipse",
        "type": "getset_descriptor",
        "help": "Use this property to build an ellipse, without calculating the\n:attr:`points`.\n\nThe argument must be a tuple of (x, y, width, height, angle_start,\nangle_end, segments):\n\n* x and y represent the bottom left of the ellipse\n* width and height represent the size of the ellipse\n* (optional) angle_start and angle_end are in degree. The default\n  value is 0 and 360.\n* (optional) segments is the precision of the ellipse. The default\n  value is calculated from the range between angle. You can use this\n  property to create polygons with 3 or more sides. Values smaller than\n  3 will not be represented and the number of segments will be\n  automatically calculated.\n\nNote that it's up to you to :attr:`close` or not.\nIf you choose to close, use :attr:`close_mode` to define how the figure\nwill be closed. Whether it will be by closed by a ``\"straight-line\"``\nor by ``\"center-connected\"``.\n\nFor example, for building a simple ellipse, in python::\n\n    # simple ellipse\n    Line(ellipse=(0, 0, 150, 150))\n\n    # only from 90 to 180 degrees\n    Line(ellipse=(0, 0, 150, 150, 90, 180))\n\n    # only from 90 to 180 degrees, with few segments\n    Line(ellipse=(0, 0, 150, 150, 90, 180, 20))\n\n.. versionadded:: 1.4.1\n\n.. versionchanged:: 2.2.0\n    Now you can get the ellipse generated through the property.\n\n    The minimum number of segments allowed is 3. Smaller values will be\n    ignored and the number of segments will be automatically calculated.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "ellipse: ",
        "prefix_py": "ellipse="
    },
    "force_custom_drawing_method": {
        "name": "force_custom_drawing_method",
        "type": "getset_descriptor",
        "help": "If True, the line will be drawn using the custom drawing method, no matter what the width is.\n\n.. versionadded:: 2.3.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "force_custom_drawing_method: ",
        "prefix_py": "force_custom_drawing_method="
    },
    "joint": {
        "name": "joint",
        "type": "getset_descriptor",
        "help": "Determine the join of the line, defaults to 'round'. Can be one of\n'none', 'round', 'bevel', 'miter'.\n\n.. versionadded:: 1.4.1",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "joint: ",
        "prefix_py": "joint="
    },
    "joint_precision": {
        "name": "joint_precision",
        "type": "getset_descriptor",
        "help": "Number of iteration for drawing the \"round\" joint, defaults to 10.\nThe joint_precision must be at least 1.\n\n.. versionadded:: 1.4.1",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "joint_precision: ",
        "prefix_py": "joint_precision="
    },
    "rectangle": {
        "name": "rectangle",
        "type": "getset_descriptor",
        "help": "Use this property to build a rectangle, without calculating the\n:attr:`points`.\n\nThe argument must be a tuple of (x, y, width, height):\n\n* x and y represent the bottom-left position of the rectangle\n* width and height represent the size\n\nThe line is automatically closed.\n\nUsage::\n\n    Line(rectangle=(0, 0, 200, 200))\n\n.. versionadded:: 1.4.1\n\n.. versionchanged:: 2.2.0\n    Now you can get the rectangle generated through the property.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "rectangle: ",
        "prefix_py": "rectangle="
    },
    "rounded_rectangle": {
        "name": "rounded_rectangle",
        "type": "getset_descriptor",
        "help": "Use this property to build a rectangle, without calculating the\n:attr:`points`.\n\nThe argument must be a tuple of one of the following forms:\n\n* (x, y, width, height, corner_radius)\n* (x, y, width, height, corner_radius, resolution)\n* (x, y, width, height, corner_radius1, corner_radius2, corner_radius3, corner_radius4)\n* (x, y, width, height, corner_radius1, corner_radius2, corner_radius3, corner_radius4, resolution)\n\n* `x` and `y` represent the bottom-left position of the rectangle.\n* `width` and `height` represent the size.\n* `corner_radius` specifies the radius used for the rounded corners clockwise: top-left, top-right, bottom-right, bottom-left.\n* `resolution` is the number of line segment that will be used to draw the circle arc at each corner (defaults to 45).\n\nThe line is automatically closed.\n\nUsage::\n\n    Line(rounded_rectangle=(0, 0, 200, 200, 10, 20, 30, 40, 100))\n\n.. versionadded:: 1.9.0\n\n.. versionchanged:: 2.2.0\n    Default value of `resolution` changed from 30 to 45.\n\n    Now you can get the rounded rectangle generated through the property.\n\n    The order of `corner_radius` has been changed to match the RoundedRectangle radius property (clockwise).\n    It was bottom-left, bottom-right, top-right, top-left in previous versions.\n    Now both are clockwise: top-left, top-right, bottom-right, bottom-left.\n    To keep the corner radius order without changing the order manually, you can use python's built-in method `reversed` or `[::-1]`,\n    to reverse the order of the corner radius.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Line"
        ],
        "prefix_kv": "rounded_rectangle: ",
        "prefix_py": "rounded_rectangle="
    },
    "Vector": {
        "name": "Vector",
        "type": "type",
        "import": "from kivy.uix.gesturesurface import Vector",
        "help": "Vector class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Vector: ",
        "prefix_py": "Vector="
    },
    "angle": {
        "name": "angle",
        "type": "function",
        "help": "Computes the angle between a and b, and returns the angle in\ndegrees.\n\n>>> Vector(100, 0).angle((0, 100))\n-90.0\n>>> Vector(87, 23).angle((-77, 10))\n-157.7920283010705",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "self",
            "a"
        ],
        "prefix_kv": "angle: ",
        "prefix_py": "angle=()"
    },
    "distance": {
        "name": "distance",
        "type": "function",
        "help": "Returns the distance between two points.\n\n>>> Vector(10, 10).distance((5, 10))\n5.\n>>> a = (90, 33)\n>>> b = (76, 34)\n>>> Vector(a).distance(b)\n14.035668847618199",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "self",
            "to"
        ],
        "prefix_kv": "distance: ",
        "prefix_py": "distance=()"
    },
    "distance2": {
        "name": "distance2",
        "type": "function",
        "help": "Returns the distance between two points squared.\n\n>>> Vector(10, 10).distance2((5, 10))\n25",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "self",
            "to"
        ],
        "prefix_kv": "distance2: ",
        "prefix_py": "distance2=()"
    },
    "dot": {
        "name": "dot",
        "type": "function",
        "help": "Computes the dot product of a and b.\n\n>>> Vector(2, 4).dot((2, 2))\n12",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "self",
            "a"
        ],
        "prefix_kv": "dot: ",
        "prefix_py": "dot=()"
    },
    "extend": {
        "name": "extend",
        "type": "method_descriptor",
        "help": "Extend list by appending elements from the iterable.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Vector",
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "extend: ()",
        "prefix_py": "extend=()"
    },
    "in_bbox": {
        "name": "in_bbox",
        "type": "function",
        "help": "Return True if `point` is in the bounding box defined by `a`\nand `b`.\n\n>>> bmin = (0, 0)\n>>> bmax = (100, 100)\n>>> Vector.in_bbox((50, 50), bmin, bmax)\nTrue\n>>> Vector.in_bbox((647, -10), bmin, bmax)\nFalse",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "point",
            "a",
            "b"
        ],
        "prefix_kv": "in_bbox: ",
        "prefix_py": "in_bbox=()"
    },
    "length2": {
        "name": "length2",
        "type": "function",
        "help": "Returns the length of a vector squared.\n\n>>> Vector(10, 10).length2()\n200\n>>> pos = (10, 10)\n>>> Vector(pos).length2()\n200",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "length2: ",
        "prefix_py": "length2=()"
    },
    "line_intersection": {
        "name": "line_intersection",
        "type": "function",
        "help": "Finds the intersection point between the lines (1)v1->v2 and (2)v3->v4\nand returns it as a vector object.\n\n>>> a = (98, 28)\n>>> b = (72, 33)\n>>> c = (10, -5)\n>>> d = (20, 88)\n>>> Vector.line_intersection(a, b, c, d)\n[15.25931928687196, 43.911669367909241]\n\n.. warning::\n\n    This is a line intersection method, not a segment intersection.\n\nFor math see: http://en.wikipedia.org/wiki/Line-line_intersection",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "v1",
            "v2",
            "v3",
            "v4"
        ],
        "prefix_kv": "line_intersection: ",
        "prefix_py": "line_intersection=()"
    },
    "pop": {
        "name": "pop",
        "type": "method_descriptor",
        "help": "Remove and return item at index (default last).\n\nRaises IndexError if list is empty or index is out of range.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Vector",
            "defaultdict",
            "ObservableDict",
            "_ToctreeVisitor",
            "_Visitor",
            "nodeclass",
            "role_doc",
            "role_video",
            "Context",
            "ConfigParser"
        ],
        "prefix_kv": "pop: ()",
        "prefix_py": "pop=()"
    },
    "reverse": {
        "name": "reverse",
        "type": "method_descriptor",
        "help": "Reverse *IN PLACE*.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Vector"
        ],
        "prefix_kv": "reverse: ()",
        "prefix_py": "reverse=()"
    },
    "segment_intersection": {
        "name": "segment_intersection",
        "type": "function",
        "help": "Finds the intersection point between segments (1)v1->v2 and (2)v3->v4\nand returns it as a vector object.\n\n>>> a = (98, 28)\n>>> b = (72, 33)\n>>> c = (10, -5)\n>>> d = (20, 88)\n>>> Vector.segment_intersection(a, b, c, d)\nNone\n\n>>> a = (0, 0)\n>>> b = (10, 10)\n>>> c = (0, 10)\n>>> d = (10, 0)\n>>> Vector.segment_intersection(a, b, c, d)\n[5, 5]",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Vector"
        ],
        "parametters": [
            "v1",
            "v2",
            "v3",
            "v4"
        ],
        "prefix_kv": "segment_intersection: ",
        "prefix_py": "segment_intersection=()"
    },
    "sort": {
        "name": "sort",
        "type": "method_descriptor",
        "help": "Sort the list in ascending order and return None.\n\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\n\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\n\nThe reverse flag can be set to sort in descending order.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Vector"
        ],
        "prefix_kv": "sort: ()",
        "prefix_py": "sort=()"
    },
    "GridLayout": {
        "name": "GridLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.gridlayout import GridLayout",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "GridLayout:\n    ",
        "prefix_py": "GridLayout()"
    },
    "_create_idx_iter": {
        "name": "_create_idx_iter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self",
            "n_cols",
            "n_rows"
        ],
        "prefix_kv": "_create_idx_iter: ",
        "prefix_py": "_create_idx_iter=()"
    },
    "_fill_rows_cols_sizes": {
        "name": "_fill_rows_cols_sizes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_fill_rows_cols_sizes: ",
        "prefix_py": "_fill_rows_cols_sizes=()"
    },
    "_fills_from_left_to_right": {
        "name": "_fills_from_left_to_right",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "_fills_from_left_to_right: ",
        "prefix_py": "_fills_from_left_to_right="
    },
    "_fills_from_top_to_bottom": {
        "name": "_fills_from_top_to_bottom",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "_fills_from_top_to_bottom: ",
        "prefix_py": "_fills_from_top_to_bottom="
    },
    "_fills_row_first": {
        "name": "_fills_row_first",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "_fills_row_first: ",
        "prefix_py": "_fills_row_first="
    },
    "_finalize_rows_cols_sizes": {
        "name": "_finalize_rows_cols_sizes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_finalize_rows_cols_sizes: ",
        "prefix_py": "_finalize_rows_cols_sizes=()"
    },
    "_init_rows_cols_sizes": {
        "name": "_init_rows_cols_sizes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self",
            "count"
        ],
        "prefix_kv": "_init_rows_cols_sizes: ",
        "prefix_py": "_init_rows_cols_sizes=()"
    },
    "_update_minimum_size": {
        "name": "_update_minimum_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_update_minimum_size: ",
        "prefix_py": "_update_minimum_size=()"
    },
    "col_default_width": {
        "name": "col_default_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "col_default_width: ",
        "prefix_py": "col_default_width="
    },
    "col_force_default": {
        "name": "col_force_default",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "col_force_default: True",
        "prefix_py": "col_force_default=True"
    },
    "cols": {
        "name": "cols",
        "type": "BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "cols: ",
        "prefix_py": "cols="
    },
    "cols_minimum": {
        "name": "cols_minimum",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "cols_minimum: {}",
        "prefix_py": "cols_minimum={}"
    },
    "get_max_widgets": {
        "name": "get_max_widgets",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_max_widgets: ",
        "prefix_py": "get_max_widgets=()"
    },
    "on_children": {
        "name": "on_children",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_children: ",
        "prefix_py": "on_children=()"
    },
    "row_default_height": {
        "name": "row_default_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "row_default_height: ",
        "prefix_py": "row_default_height="
    },
    "row_force_default": {
        "name": "row_force_default",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "row_force_default: True",
        "prefix_py": "row_force_default=True"
    },
    "rows": {
        "name": "rows",
        "type": "BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "rows: ",
        "prefix_py": "rows="
    },
    "rows_minimum": {
        "name": "rows_minimum",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "GridLayout",
            "RecycleGridLayout",
            "RstBlockQuote",
            "RstDefinition",
            "RstDefinitionList",
            "RstEntry",
            "RstFieldBody",
            "RstFieldList",
            "RstFootnote",
            "RstGridLayout",
            "RstList",
            "RstListItem",
            "RstLiteralBlock",
            "RstNote",
            "RstSystemMessage",
            "RstTable",
            "RstVideoPlayer",
            "RstWarning",
            "VideoPlayer",
            "SettingsPanel",
            "StripLayout",
            "TabbedPanel",
            "TabbedPanelStrip"
        ],
        "prefix_kv": "rows_minimum: {}",
        "prefix_py": "rows_minimum={}"
    },
    "GridLayoutException": {
        "name": "GridLayoutException",
        "type": "type",
        "import": "from kivy.uix.gridlayout import GridLayoutException",
        "help": "Exception for errors if the grid layout manipulation fails.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "GridLayoutException: ",
        "prefix_py": "GridLayoutException="
    },
    "accumulate": {
        "name": "accumulate",
        "type": "type",
        "import": "from kivy.uix.gridlayout import accumulate",
        "help": "Return series of accumulated sums (or other binary function results).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "accumulate: ",
        "prefix_py": "accumulate="
    },
    "chain": {
        "name": "chain",
        "type": "type",
        "import": "from kivy.uix.gridlayout import chain",
        "help": "chain(*iterables) --> chain object\n\nReturn a chain object whose .__next__() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "chain: ",
        "prefix_py": "chain="
    },
    "from_iterable": {
        "name": "from_iterable",
        "type": "builtin_function_or_method",
        "help": "Alternative chain() constructor taking a single iterable argument that evaluates lazily.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "chain"
        ],
        "prefix_kv": "from_iterable",
        "prefix_py": "from_iterable."
    },
    "islice": {
        "name": "islice",
        "type": "type",
        "import": "from kivy.uix.gridlayout import islice",
        "help": "islice(iterable, stop) --> islice object\nislice(iterable, start, stop[, step]) --> islice object\n\nReturn an iterator whose next() method returns selected values from an\niterable.  If start is specified, will skip all preceding elements;\notherwise, start defaults to zero.  Step defaults to one.  If\nspecified as another value, step determines how many values are\nskipped between successive calls.  Works like a slice() on a list\nbut returns an iterator.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "islice: ",
        "prefix_py": "islice="
    },
    "product": {
        "name": "product",
        "type": "type",
        "import": "from kivy.uix.gridlayout import product",
        "help": "product(*iterables, repeat=1) --> product object\n\nCartesian product of input iterables.  Equivalent to nested for-loops.\n\nFor example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).\n\nTo compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).\n\nproduct('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\nproduct((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "product: ",
        "prefix_py": "product="
    },
    "AsyncImage": {
        "name": "AsyncImage",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.image import AsyncImage",
        "help": "Asynchronous Image class. See the module documentation for more\ninformation.\n\n.. note::\n\n    The AsyncImage is a specialized form of the Image class. You may\n    want to refer to the :mod:`~kivy.loader` documentation and in\n    particular, the :class:`~kivy.loader.ProxyImage` for more detail\n    on how to handle events around asynchronous image loading.\n\n.. note::\n\n    AsyncImage currently does not support properties\n    :attr:`anim_loop` and :attr:`mipmap` and setting those properties will\n    have no effect.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AsyncImage:\n    ",
        "prefix_py": "AsyncImage()"
    },
    "_load_source": {
        "name": "_load_source",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_load_source: ",
        "prefix_py": "_load_source=()"
    },
    "_on_source_error": {
        "name": "_on_source_error",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage"
        ],
        "parametters": [
            "self",
            "instance",
            "error"
        ],
        "prefix_kv": "_on_source_error: ",
        "prefix_py": "_on_source_error=()"
    },
    "_on_source_load": {
        "name": "_on_source_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_on_source_load: ",
        "prefix_py": "_on_source_load=()"
    },
    "is_uri": {
        "name": "is_uri",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage"
        ],
        "parametters": [
            "self",
            "filename"
        ],
        "prefix_kv": "is_uri: ",
        "prefix_py": "is_uri=()"
    },
    "on_error": {
        "name": "on_error",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage"
        ],
        "parametters": [
            "self",
            "error"
        ],
        "prefix_kv": "on_error: ",
        "prefix_py": "on_error=()"
    },
    "on_load": {
        "name": "on_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AsyncImage",
            "RstAsyncImage",
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_load: ",
        "prefix_py": "on_load=()"
    },
    "CoreImage": {
        "name": "CoreImage",
        "type": "type",
        "import": "from kivy.uix.image import CoreImage",
        "help": "Load an image and store the size and texture.\n\n.. versionchanged:: 1.0.7\n\n    `mipmap` attribute has been added. The `texture_mipmap` and\n    `texture_rectangle` have been deleted.\n\n.. versionchanged:: 1.0.8\n\n    An Image widget can change its texture. A new event 'on_texture' has\n    been introduced. New methods for handling sequenced animation have been\n    added.\n\n:Parameters:\n    `arg`: can be a string (str), Texture, BytesIO or Image object\n        A string path to the image file or data URI to be loaded; or a\n        Texture object, which will be wrapped in an Image object; or a\n        BytesIO object containing raw image data; or an already existing\n        image object, in which case, a real copy of the given image object\n        will be returned.\n    `keep_data`: bool, defaults to False\n        Keep the image data when the texture is created.\n    `mipmap`: bool, defaults to False\n        Create mipmap for the texture.\n    `anim_delay`: float, defaults to .25\n        Delay in seconds between each animation frame. Lower values means\n        faster animation.\n    `ext`: str, only with BytesIO `arg`\n        File extension to use in determining how to load raw image data.\n    `filename`: str, only with BytesIO `arg`\n        Filename to use in the image cache for raw image data.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CoreImage: ",
        "prefix_py": "CoreImage="
    },
    "_anim": {
        "name": "_anim",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition",
            "Image"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_anim: ",
        "prefix_py": "_anim=()"
    },
    "_anim_ev": {
        "name": "_anim_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "_anim_ev: ",
        "prefix_py": "_anim_ev=()"
    },
    "_find_format_from_filename": {
        "name": "_find_format_from_filename",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "filename"
        ],
        "prefix_kv": "_find_format_from_filename: ",
        "prefix_py": "_find_format_from_filename=()"
    },
    "_get_anim_delay": {
        "name": "_get_anim_delay",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_anim_delay: ",
        "prefix_py": "_get_anim_delay=()"
    },
    "_get_filename": {
        "name": "_get_filename",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "CoreVideo",
            "Image"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_filename: ",
        "prefix_py": "_get_filename=()"
    },
    "_get_image": {
        "name": "_get_image",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_image: ",
        "prefix_py": "_get_image=()"
    },
    "_img_iterate": {
        "name": "_img_iterate",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_img_iterate: ",
        "prefix_py": "_img_iterate=()"
    },
    "_set_anim_delay": {
        "name": "_set_anim_delay",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "x"
        ],
        "prefix_kv": "_set_anim_delay: ",
        "prefix_py": "_set_anim_delay=()"
    },
    "_set_filename": {
        "name": "_set_filename",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "CoreVideo",
            "Image"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_filename: ",
        "prefix_py": "_set_filename=()"
    },
    "_set_image": {
        "name": "_set_image",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "image"
        ],
        "prefix_kv": "_set_image: ",
        "prefix_py": "_set_image=()"
    },
    "anim_available": {
        "name": "anim_available",
        "type": "property",
        "help": "Return True if this Image instance has animation available.\n\n.. versionadded:: 1.0.8",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "anim_available: ",
        "prefix_py": "anim_available="
    },
    "anim_index": {
        "name": "anim_index",
        "type": "property",
        "help": "Return the index number of the image currently in the texture.\n\n.. versionadded:: 1.0.8",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "anim_index: ",
        "prefix_py": "anim_index="
    },
    "anim_reset": {
        "name": "anim_reset",
        "type": "function",
        "help": "Reset an animation if available.\n\n.. versionadded:: 1.0.8\n\n:Parameters:\n    `allow_anim`: bool\n        Indicate whether the animation should restart playing or not.\n\nUsage::\n\n    # start/reset animation\n    image.anim_reset(True)\n\n    # or stop the animation\n    image.anim_reset(False)\n\nYou can change the animation speed whilst it is playing::\n\n    # Set to 20 FPS\n    image.anim_delay = 1 / 20.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "allow_anim"
        ],
        "prefix_kv": "anim_reset: ",
        "prefix_py": "anim_reset=()"
    },
    "copy_attributes": {
        "name": "copy_attributes",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "copy_attributes: ",
        "prefix_py": "copy_attributes="
    },
    "data_uri_re": {
        "name": "data_uri_re",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "data_uri_re: ",
        "prefix_py": "data_uri_re=()"
    },
    "filename": {
        "name": "filename",
        "type": "property",
        "help": "Get/set the filename of image",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "CoreVideo",
            "Image"
        ],
        "prefix_kv": "filename: ",
        "prefix_py": "filename="
    },
    "image": {
        "name": "image",
        "type": "property",
        "help": "Get/set the data image object",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "prefix_kv": "image: ",
        "prefix_py": "image="
    },
    "load": {
        "name": "load",
        "type": "function",
        "help": "Load an image\n\n:Parameters:\n    `filename`: str\n        Filename of the image.\n    `keep_data`: bool, defaults to False\n        Keep the image data when the texture is created.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "CoreVideo",
            "Image"
        ],
        "parametters": [
            "filename",
            "kwargs"
        ],
        "prefix_kv": "load: ",
        "prefix_py": "load=()"
    },
    "load_memory": {
        "name": "load_memory",
        "type": "function",
        "help": "(internal) Method to load an image from raw data.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "data",
            "ext",
            "filename"
        ],
        "prefix_kv": "load_memory: ",
        "prefix_py": "load_memory=()"
    },
    "read_pixel": {
        "name": "read_pixel",
        "type": "function",
        "help": "For a given local x/y position, return the pixel color at that\nposition.\n\n.. warning::\n    This function can only be used with images loaded with the\n    keep_data=True keyword. For example::\n\n        m = Image.load('image.png', keep_data=True)\n        color = m.read_pixel(150, 150)\n\n:Parameters:\n    `x`: int\n        Local x coordinate of the pixel in question.\n    `y`: int\n        Local y coordinate of the pixel in question.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Image"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "read_pixel: ",
        "prefix_py": "read_pixel=()"
    },
    "save": {
        "name": "save",
        "type": "function",
        "help": "Save image texture to file.\n\nThe filename should have the '.png' extension because the texture data\nread from the GPU is in the RGBA format. '.jpg' might work but has not\nbeen heavily tested so some providers might break when using it.\nAny other extensions are not officially supported.\n\nThe flipped parameter flips the saved image vertically, and\ndefaults to False.\n\nExample::\n\n    # Save an core image object\n    from kivy.core.image import Image\n    img = Image('hello.png')\n    img.save('hello2.png')\n\n    # Save a texture\n    texture = Texture.create(...)\n    img = Image(texture)\n    img.save('hello3.png')\n\n.. versionadded:: 1.7.0\n\n.. versionchanged:: 1.8.0\n    Parameter `flipped` added to flip the image before saving, default\n    to False.\n\n.. versionchanged:: 1.11.0\n    Parameter `fmt` added to force the output format of the file\n    Filename can now be a BytesIO object.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreImage",
            "Texture",
            "Image"
        ],
        "parametters": [
            "self",
            "filename",
            "flipped",
            "fmt"
        ],
        "prefix_kv": "save: ",
        "prefix_py": "save=()"
    },
    "CoreLabel": {
        "name": "CoreLabel",
        "type": "type",
        "import": "from kivy.uix.label import CoreLabel",
        "help": "Core text label.\nThis is the abstract class used by different backends to render text.\n\n.. warning::\n    The core text label can't be changed at runtime. You must recreate one.\n\n:Parameters:\n    `font_size`: int, defaults to 12\n        Font size of the text\n    `font_context`: str, defaults to None\n        Context for the specified font (see :class:`kivy.uix.label.Label`\n        for details). `None` will autocreate an isolated context named\n        after the resolved font file.\n    `font_name`: str, defaults to DEFAULT_FONT\n        Font name of the text\n    `font_family`: str, defaults to None\n        Font family name to request for drawing, this can only be used\n        with `font_context`.\n    `bold`: bool, defaults to False\n        Activate \"bold\" text style\n    `italic`: bool, defaults to False\n        Activate \"italic\" text style\n    `text_size`: tuple, defaults to (None, None)\n        Add constraint to render the text (inside a bounding box).\n        If no size is given, the label size will be set to the text size.\n    `padding`: int|float or list|tuple, defaults to [0, 0, 0, 0].\n        Padding of the text in the format [padding_left, padding_top,\n        padding_right, padding_bottom].\n        ``padding`` should be int|float or a list|tuple with 1, 2 or 4\n        elements.\n    `padding_x`: float, defaults to 0.0\n        Left/right padding\n    `padding_y`: float, defaults to 0.0\n        Top/bottom padding\n    `halign`: str, defaults to \"left\"\n        Horizontal text alignment inside the bounding box\n    `valign`: str, defaults to \"bottom\"\n        Vertical text alignment inside the bounding box\n    `shorten`: bool, defaults to False\n        Indicate whether the label should attempt to shorten its textual\n        contents as much as possible if a `size` is given.\n        Setting this to True without an appropriately set size will lead to\n        unexpected results.\n    `shorten_from`: str, defaults to `center`\n        The side from which we should shorten the text from, can be left,\n        right, or center. E.g. if left, the ellipsis will appear towards\n        the left side and it will display as much text starting from the\n        right as possible.\n    `split_str`: string, defaults to `' '` (space)\n        The string to use to split the words by when shortening. If empty,\n        we can split after every character filling up the line as much as\n        possible.\n    `max_lines`: int, defaults to 0 (unlimited)\n        If set, this indicate how maximum line are allowed to render the\n        text. Works only if a limitation on text_size is set.\n    `mipmap`: bool, defaults to False\n        Create a mipmap for the texture\n    `strip`: bool, defaults to False\n        Whether each row of text has its leading and trailing spaces\n        stripped. If `halign` is `justify` it is implicitly True.\n    `strip_reflow`: bool, defaults to True\n        Whether text that has been reflowed into a second line should\n        be stripped, even if `strip` is False. This is only in effect when\n        `size_hint_x` is not None, because otherwise lines are never\n        split.\n    `unicode_errors`: str, defaults to `'replace'`\n        How to handle unicode decode errors. Can be `'strict'`, `'replace'`\n        or `'ignore'`.\n    `outline_width`: int, defaults to None\n        Width in pixels for the outline.\n    `outline_color`: tuple, defaults to (0, 0, 0)\n        Color of the outline.\n    `font_features`: str, defaults to None\n        OpenType font features in CSS format (Pango only)\n    `base_direction`: str, defaults to None (auto)\n        Text direction, one of `None`, `'ltr'`, `'rtl'`, `'weak_ltr'`,\n        or `'weak_rtl'` (Pango only)\n    `text_language`: str, defaults to None (user locale)\n        RFC-3066 format language tag as a string (Pango only)\n    `limit_render_to_text_bbox`: bool, defaults to False. PIL only.\n        If set to ``True``, this parameter indicates that rendering should\n        be limited to the bounding box of the text, excluding any\n        additional white spaces designated for ascent and descent.\n        By limiting the rendering to the bounding box of the text, it\n        ensures a more precise alignment with surrounding elements when\n        utilizing properties such as `valign`, `y`, `pos`, `pos_hint`, etc.\n\n.. versionadded:: 2.3.0\n    `limit_render_to_text_bbox` was added to allow to limit text rendering\n    to the text bounding box (PIL only).\n\n.. deprecated:: 2.2.0\n    `padding_x` and `padding_y` have been deprecated. Please use `padding`\n    instead.\n\n.. versionchanged:: 2.2.0\n    `padding` is now a list and defaults to [0, 0, 0, 0]. `padding` accepts\n    int|float or a list|tuple with 1, 2 or 4 elements.\n\n.. versionchanged:: 1.10.1\n    `font_context`, `font_family`, `font_features`, `base_direction`\n    and `text_language` were added.\n\n.. versionchanged:: 1.10.0\n    `outline_width` and `outline_color` were added.\n\n.. versionchanged:: 1.9.0\n    `strip`, `strip_reflow`, `shorten_from`, `split_str`, and\n    `unicode_errors` were added.\n\n.. versionchanged:: 1.9.0\n    `padding_x` and `padding_y` has been fixed to work as expected.\n    In the past, the text was padded by the negative of their values.\n\n.. versionchanged:: 1.8.0\n    `max_lines` parameters has been added.\n\n.. versionchanged:: 1.0.8\n    `size` have been deprecated and replaced with `text_size`.\n\n.. versionchanged:: 1.0.7\n    The `valign` is now respected. This wasn't the case previously\n    so you might have an issue in your application if you have not\n    considered this.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CoreLabel: ",
        "prefix_py": "CoreLabel="
    },
    "CoreMarkupLabel": {
        "name": "CoreMarkupLabel",
        "type": "type",
        "import": "from kivy.uix.label import CoreMarkupLabel",
        "help": "Markup text label.\n\nSee module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CoreMarkupLabel: ",
        "prefix_py": "CoreMarkupLabel="
    },
    "ModalView": {
        "name": "ModalView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.modalview import ModalView",
        "help": "ModalView class. See module documentation for more information.\n\n:Events:\n    `on_pre_open`:\n        Fired before the ModalView is opened. When this event is fired\n        ModalView is not yet added to window.\n    `on_open`:\n        Fired when the ModalView is opened.\n    `on_pre_dismiss`:\n        Fired before the ModalView is closed.\n    `on_dismiss`:\n        Fired when the ModalView is closed. If the callback returns True,\n        the dismiss will be canceled.\n\n.. versionchanged:: 1.11.0\n    Added events `on_pre_open` and `on_pre_dismiss`.\n\n.. versionchanged:: 2.0.0\n    Added property 'overlay_color'.\n\n.. versionchanged:: 2.1.0\n    Marked `attach_to` property as deprecated.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ModalView:\n    ",
        "prefix_py": "ModalView()"
    },
    "_align_center": {
        "name": "_align_center",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self",
            "_args"
        ],
        "prefix_kv": "_align_center: ",
        "prefix_py": "_align_center=()"
    },
    "_anim_alpha": {
        "name": "_anim_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "_anim_alpha: ",
        "prefix_py": "_anim_alpha="
    },
    "_anim_duration": {
        "name": "_anim_duration",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "_anim_duration: ",
        "prefix_py": "_anim_duration="
    },
    "_handle_keyboard": {
        "name": "_handle_keyboard",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self",
            "_window",
            "key",
            "_args"
        ],
        "prefix_kv": "_handle_keyboard: ",
        "prefix_py": "_handle_keyboard=()"
    },
    "_is_open": {
        "name": "_is_open",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "_is_open: True",
        "prefix_py": "_is_open=True"
    },
    "_real_remove_widget": {
        "name": "_real_remove_widget",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_real_remove_widget: ",
        "prefix_py": "_real_remove_widget=()"
    },
    "_window": {
        "name": "_window",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "_window: ",
        "prefix_py": "_window="
    },
    "background": {
        "name": "background",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup",
            "VKeyboard"
        ],
        "prefix_kv": "background: ''",
        "prefix_py": "background=''"
    },
    "on__anim_alpha": {
        "name": "on__anim_alpha",
        "type": "function",
        "help": "animation progress callback. ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self",
            "_instance",
            "value"
        ],
        "prefix_kv": "on__anim_alpha: ",
        "prefix_py": "on__anim_alpha=()"
    },
    "on_open": {
        "name": "on_open",
        "type": "function",
        "help": "default open event handler. ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_open: ",
        "prefix_py": "on_open=()"
    },
    "on_pre_dismiss": {
        "name": "on_pre_dismiss",
        "type": "function",
        "help": "default pre-dismiss event handler. ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_pre_dismiss: ",
        "prefix_py": "on_pre_dismiss=()"
    },
    "on_pre_open": {
        "name": "on_pre_open",
        "type": "function",
        "help": "default pre-open event handler. ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_pre_open: ",
        "prefix_py": "on_pre_open=()"
    },
    "overlay_color": {
        "name": "overlay_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ModalView",
            "Popup"
        ],
        "prefix_kv": "overlay_color: ",
        "prefix_py": "overlay_color=()"
    },
    "PageLayout": {
        "name": "PageLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.pagelayout import PageLayout",
        "help": "PageLayout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "PageLayout:\n    ",
        "prefix_py": "PageLayout()"
    },
    "anim_kwargs": {
        "name": "anim_kwargs",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "PageLayout"
        ],
        "prefix_kv": "anim_kwargs: {}",
        "prefix_py": "anim_kwargs={}"
    },
    "page": {
        "name": "page",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "PageLayout"
        ],
        "prefix_kv": "page: ",
        "prefix_py": "page="
    },
    "swipe_threshold": {
        "name": "swipe_threshold",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "PageLayout"
        ],
        "prefix_kv": "swipe_threshold: ",
        "prefix_py": "swipe_threshold="
    },
    "Popup": {
        "name": "Popup",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.popup import Popup",
        "help": "Popup class. See module documentation for more information.\n\n:Events:\n    `on_open`:\n        Fired when the Popup is opened.\n    `on_dismiss`:\n        Fired when the Popup is closed. If the callback returns True, the\n        dismiss will be canceled.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Popup:\n    ",
        "prefix_py": "Popup()"
    },
    "_container": {
        "name": "_container",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "_container: ",
        "prefix_py": "_container="
    },
    "on__container": {
        "name": "on__container",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Popup"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on__container: ",
        "prefix_py": "on__container=()"
    },
    "on_content": {
        "name": "on_content",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Popup"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_content: ",
        "prefix_py": "on_content=()"
    },
    "separator_color": {
        "name": "separator_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "separator_color: ",
        "prefix_py": "separator_color=()"
    },
    "separator_height": {
        "name": "separator_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "separator_height: ",
        "prefix_py": "separator_height="
    },
    "title_align": {
        "name": "title_align",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "title_align: ''",
        "prefix_py": "title_align=''"
    },
    "title_color": {
        "name": "title_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "title_color: ",
        "prefix_py": "title_color=()"
    },
    "title_font": {
        "name": "title_font",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "title_font: ''",
        "prefix_py": "title_font=''"
    },
    "title_size": {
        "name": "title_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Popup"
        ],
        "prefix_kv": "title_size: ",
        "prefix_py": "title_size="
    },
    "PopupException": {
        "name": "PopupException",
        "type": "type",
        "import": "from kivy.uix.popup import PopupException",
        "help": "Popup exception, fired when multiple content widgets are added to the\npopup.\n\n.. versionadded:: 1.4.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "PopupException: ",
        "prefix_py": "PopupException="
    },
    "ProgressBar": {
        "name": "ProgressBar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.progressbar import ProgressBar",
        "help": "Class for creating a progress bar widget.\n\nSee module documentation for more details.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ProgressBar:\n    ",
        "prefix_py": "ProgressBar()"
    },
    "_get_value": {
        "name": "_get_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ProgressBar",
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_value: ",
        "prefix_py": "_get_value=()"
    },
    "_set_value": {
        "name": "_set_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ProgressBar",
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_value: ",
        "prefix_py": "_set_value=()"
    },
    "get_norm_value": {
        "name": "get_norm_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ProgressBar",
            "Slider",
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_norm_value: ",
        "prefix_py": "get_norm_value=()"
    },
    "set_norm_value": {
        "name": "set_norm_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ProgressBar",
            "Slider",
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "set_norm_value: ",
        "prefix_py": "set_norm_value=()"
    },
    "value": {
        "name": "value",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ProgressBar",
            "DampedScrollEffect",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "Slider",
            "VideoPlayerProgressBar"
        ],
        "prefix_kv": "value",
        "prefix_py": "value."
    },
    "value_normalized": {
        "name": "value_normalized",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ProgressBar",
            "Slider",
            "VideoPlayerProgressBar"
        ],
        "prefix_kv": "value_normalized",
        "prefix_py": "value_normalized."
    },
    "RecycleBoxLayout": {
        "name": "RecycleBoxLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.recycleboxlayout import RecycleBoxLayout",
        "help": "RecycleLayout provides the default layout for RecycleViews.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleBoxLayout:\n    ",
        "prefix_py": "RecycleBoxLayout()"
    },
    "_catch_layout_trigger": {
        "name": "_catch_layout_trigger",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_catch_layout_trigger: ",
        "prefix_py": "_catch_layout_trigger=()"
    },
    "_changed_views": {
        "name": "_changed_views",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "_changed_views: ()",
        "prefix_py": "_changed_views=()"
    },
    "_rv_positions": {
        "name": "_rv_positions",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout"
        ],
        "prefix_kv": "_rv_positions: ",
        "prefix_py": "_rv_positions=()"
    },
    "_size_needs_update": {
        "name": "_size_needs_update",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "_size_needs_update: True",
        "prefix_py": "_size_needs_update=True"
    },
    "_update_sizes": {
        "name": "_update_sizes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout"
        ],
        "parametters": [
            "self",
            "changed"
        ],
        "prefix_kv": "_update_sizes: ",
        "prefix_py": "_update_sizes=()"
    },
    "asked_sizes": {
        "name": "asked_sizes",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "prefix_kv": "asked_sizes: ",
        "prefix_py": "asked_sizes=()"
    },
    "attach_recycleview": {
        "name": "attach_recycleview",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleDataModelBehavior"
        ],
        "parametters": [
            "self",
            "rv"
        ],
        "prefix_kv": "attach_recycleview: ",
        "prefix_py": "attach_recycleview=()"
    },
    "clear_layout": {
        "name": "clear_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "clear_layout: ",
        "prefix_py": "clear_layout=()"
    },
    "compute_layout": {
        "name": "compute_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "data",
            "flags"
        ],
        "prefix_kv": "compute_layout: ",
        "prefix_py": "compute_layout=()"
    },
    "compute_sizes_from_data": {
        "name": "compute_sizes_from_data",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "LayoutSelectionBehavior"
        ],
        "parametters": [
            "self",
            "data",
            "flags"
        ],
        "prefix_kv": "compute_sizes_from_data: ",
        "prefix_py": "compute_sizes_from_data=()"
    },
    "compute_visible_views": {
        "name": "compute_visible_views",
        "type": "function",
        "help": "`viewport` is in coordinates of the layout manager.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "data",
            "viewport"
        ],
        "prefix_kv": "compute_visible_views: ",
        "prefix_py": "compute_visible_views=()"
    },
    "default_height": {
        "name": "default_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_height: ",
        "prefix_py": "default_height="
    },
    "default_pos_hint": {
        "name": "default_pos_hint",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_pos_hint: ",
        "prefix_py": "default_pos_hint="
    },
    "default_size": {
        "name": "default_size",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size: ()",
        "prefix_py": "default_size=()"
    },
    "default_size_hint": {
        "name": "default_size_hint",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint: ()",
        "prefix_py": "default_size_hint=()"
    },
    "default_size_hint_max": {
        "name": "default_size_hint_max",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_max: ()",
        "prefix_py": "default_size_hint_max=()"
    },
    "default_size_hint_min": {
        "name": "default_size_hint_min",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_min: ()",
        "prefix_py": "default_size_hint_min=()"
    },
    "default_size_hint_x": {
        "name": "default_size_hint_x",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_x: ",
        "prefix_py": "default_size_hint_x="
    },
    "default_size_hint_x_max": {
        "name": "default_size_hint_x_max",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_x_max: ",
        "prefix_py": "default_size_hint_x_max="
    },
    "default_size_hint_x_min": {
        "name": "default_size_hint_x_min",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_x_min: ",
        "prefix_py": "default_size_hint_x_min="
    },
    "default_size_hint_y": {
        "name": "default_size_hint_y",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_y: ",
        "prefix_py": "default_size_hint_y="
    },
    "default_size_hint_y_max": {
        "name": "default_size_hint_y_max",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_y_max: ",
        "prefix_py": "default_size_hint_y_max="
    },
    "default_size_hint_y_min": {
        "name": "default_size_hint_y_min",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_size_hint_y_min: ",
        "prefix_py": "default_size_hint_y_min="
    },
    "default_width": {
        "name": "default_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "default_width: ",
        "prefix_py": "default_width="
    },
    "detach_recycleview": {
        "name": "detach_recycleview",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleDataModelBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "detach_recycleview: ",
        "prefix_py": "detach_recycleview=()"
    },
    "get_view_index_at": {
        "name": "get_view_index_at",
        "type": "function",
        "help": "Return the view `index` on which position, `pos`, falls.\n\n`pos` is in coordinates of the layout manager.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "get_view_index_at: ",
        "prefix_py": "get_view_index_at=()"
    },
    "goto_view": {
        "name": "goto_view",
        "type": "function",
        "help": "Moves the views so that the view corresponding to `index` is\nvisible.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "index"
        ],
        "prefix_kv": "goto_view: ",
        "prefix_py": "goto_view=()"
    },
    "initial_height": {
        "name": "initial_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "initial_height: ",
        "prefix_py": "initial_height="
    },
    "initial_size": {
        "name": "initial_size",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "initial_size: ()",
        "prefix_py": "initial_size=()"
    },
    "initial_width": {
        "name": "initial_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "initial_width: ",
        "prefix_py": "initial_width="
    },
    "key_pos_hint": {
        "name": "key_pos_hint",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "key_pos_hint: ''",
        "prefix_py": "key_pos_hint=''"
    },
    "key_size": {
        "name": "key_size",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "key_size: ''",
        "prefix_py": "key_size=''"
    },
    "key_size_hint": {
        "name": "key_size_hint",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "key_size_hint: ''",
        "prefix_py": "key_size_hint=''"
    },
    "key_size_hint_max": {
        "name": "key_size_hint_max",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "key_size_hint_max: ''",
        "prefix_py": "key_size_hint_max=''"
    },
    "key_size_hint_min": {
        "name": "key_size_hint_min",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "key_size_hint_min: ''",
        "prefix_py": "key_size_hint_min=''"
    },
    "key_viewclass": {
        "name": "key_viewclass",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleView"
        ],
        "prefix_kv": "key_viewclass: ''",
        "prefix_py": "key_viewclass=''"
    },
    "on_viewclass": {
        "name": "on_viewclass",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_viewclass: ",
        "prefix_py": "on_viewclass=()"
    },
    "recycleview": {
        "name": "recycleview",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleDataAdapter",
            "RecycleDataModel",
            "RecycleDataModelBehavior"
        ],
        "prefix_kv": "recycleview: ",
        "prefix_py": "recycleview="
    },
    "refresh_view_layout": {
        "name": "refresh_view_layout",
        "type": "function",
        "help": "`See :meth:`~kivy.uix.recycleview.views.RecycleDataAdapter.refresh_view_layout`.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleDataAdapter",
            "LayoutSelectionBehavior",
            "RecycleDataViewBehavior",
            "RecycleKVIDsDataViewBehavior"
        ],
        "parametters": [
            "self",
            "index",
            "layout",
            "view",
            "viewport"
        ],
        "prefix_kv": "refresh_view_layout: ",
        "prefix_py": "refresh_view_layout=()"
    },
    "remove_view": {
        "name": "remove_view",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self",
            "view",
            "index"
        ],
        "prefix_kv": "remove_view: ",
        "prefix_py": "remove_view=()"
    },
    "remove_views": {
        "name": "remove_views",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "remove_views: ",
        "prefix_py": "remove_views=()"
    },
    "set_visible_views": {
        "name": "set_visible_views",
        "type": "function",
        "help": "`viewport` is in coordinates of the layout manager.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self",
            "indices",
            "data",
            "viewport"
        ],
        "prefix_kv": "set_visible_views: ",
        "prefix_py": "set_visible_views=()"
    },
    "view_indices": {
        "name": "view_indices",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "view_indices: {}",
        "prefix_py": "view_indices={}"
    },
    "view_opts": {
        "name": "view_opts",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout"
        ],
        "prefix_kv": "view_opts: ()",
        "prefix_py": "view_opts=()"
    },
    "viewclass": {
        "name": "viewclass",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleBoxLayout",
            "RecycleLayout",
            "RecycleGridLayout",
            "RecycleLayoutManagerBehavior",
            "RecycleView"
        ],
        "prefix_kv": "viewclass: ",
        "prefix_py": "viewclass="
    },
    "RecycleLayout": {
        "name": "RecycleLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.recycleboxlayout import RecycleLayout",
        "help": "RecycleLayout provides the default layout for RecycleViews.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleLayout:\n    ",
        "prefix_py": "RecycleLayout()"
    },
    "RecycleGridLayout": {
        "name": "RecycleGridLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.recyclegridlayout import RecycleGridLayout",
        "help": "RecycleLayout provides the default layout for RecycleViews.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleGridLayout:\n    ",
        "prefix_py": "RecycleGridLayout()"
    },
    "_calculate_idx_from_a_view_idx": {
        "name": "_calculate_idx_from_a_view_idx",
        "type": "function",
        "help": "returns a tuple of (column-index, row-index) from a view-index",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleGridLayout"
        ],
        "parametters": [
            "self",
            "n_cols",
            "n_rows",
            "view_idx"
        ],
        "prefix_kv": "_calculate_idx_from_a_view_idx: ",
        "prefix_py": "_calculate_idx_from_a_view_idx=()"
    },
    "_cols_pos": {
        "name": "_cols_pos",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleGridLayout"
        ],
        "prefix_kv": "_cols_pos: ",
        "prefix_py": "_cols_pos=()"
    },
    "_rows_pos": {
        "name": "_rows_pos",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleGridLayout"
        ],
        "prefix_kv": "_rows_pos: ",
        "prefix_py": "_rows_pos=()"
    },
    "_update_rows_cols_sizes": {
        "name": "_update_rows_cols_sizes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleGridLayout"
        ],
        "parametters": [
            "self",
            "changed"
        ],
        "prefix_kv": "_update_rows_cols_sizes: ",
        "prefix_py": "_update_rows_cols_sizes=()"
    },
    "defaultdict": {
        "name": "defaultdict",
        "type": "type",
        "import": "from kivy.uix.recyclegridlayout import defaultdict",
        "help": "defaultdict(default_factory=None, /, [...]) --> dict with default factory\n\nThe default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "defaultdict: ",
        "prefix_py": "defaultdict="
    },
    "default_factory": {
        "name": "default_factory",
        "type": "member_descriptor",
        "help": "Factory for default value called by __missing__().",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "defaultdict"
        ],
        "prefix_kv": "default_factory: ",
        "prefix_py": "default_factory="
    },
    "fromkeys": {
        "name": "fromkeys",
        "type": "builtin_function_or_method",
        "help": "Create a new dictionary with keys from iterable and values set to value.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "Context"
        ],
        "prefix_kv": "fromkeys",
        "prefix_py": "fromkeys."
    },
    "items": {
        "name": "items",
        "type": "method_descriptor",
        "help": "D.items() -> a set-like object providing a view on D's items",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "Context",
            "ConfigParser"
        ],
        "prefix_kv": "items: ()",
        "prefix_py": "items=()"
    },
    "keys": {
        "name": "keys",
        "type": "method_descriptor",
        "help": "D.keys() -> a set-like object providing a view on D's keys",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "Context",
            "ConfigParser"
        ],
        "prefix_kv": "keys: ()",
        "prefix_py": "keys=()"
    },
    "popitem": {
        "name": "popitem",
        "type": "method_descriptor",
        "help": "Remove and return a (key, value) pair as a 2-tuple.\n\nPairs are returned in LIFO (last-in, first-out) order.\nRaises KeyError if the dict is empty.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "Context",
            "ConfigParser"
        ],
        "prefix_kv": "popitem: ()",
        "prefix_py": "popitem=()"
    },
    "setdefault": {
        "name": "setdefault",
        "type": "method_descriptor",
        "help": "Insert key with a value of default if key is not in the dictionary.\n\nReturn the value for key if key is in the dictionary, else default.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "nodeclass",
            "role_doc",
            "role_video",
            "Context",
            "ConfigParser"
        ],
        "prefix_kv": "setdefault: ()",
        "prefix_py": "setdefault=()"
    },
    "update": {
        "name": "update",
        "type": "method_descriptor",
        "help": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "defaultdict",
            "ObservableDict",
            "Context",
            "DampedScrollEffect",
            "ConfigParser"
        ],
        "prefix_kv": "update: ()",
        "prefix_py": "update=()"
    },
    "RecycleLayoutManagerBehavior": {
        "name": "RecycleLayoutManagerBehavior",
        "type": "type",
        "import": "from kivy.uix.recyclelayout import RecycleLayoutManagerBehavior",
        "help": "A RecycleLayoutManagerBehavior is responsible for positioning views into\nthe :attr:`RecycleView.data` within a :class:`RecycleView`. It adds new\nviews into the data when it becomes visible to the user, and removes them\nwhen they leave the visible area.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleLayoutManagerBehavior: ",
        "prefix_py": "RecycleLayoutManagerBehavior="
    },
    "LayoutChangeException": {
        "name": "LayoutChangeException",
        "type": "type",
        "import": "from kivy.uix.recycleview import LayoutChangeException",
        "help": "Common base class for all non-exit exceptions.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "LayoutChangeException: ",
        "prefix_py": "LayoutChangeException="
    },
    "RecycleDataAdapter": {
        "name": "RecycleDataAdapter",
        "type": "type",
        "import": "from kivy.uix.recycleview import RecycleDataAdapter",
        "help": "The class that converts data to a view.\n\n--- Internal details ---\nA view can have 3 states.\n\n    * It can be completely in sync with the data, which\n      occurs when the view is displayed. These are stored in :attr:`views`.\n    * It can be dirty, which occurs when the view is in sync with the data,\n      except for the size/pos parameters which is controlled by the layout.\n      This occurs when the view is not currently displayed but the data has\n      not changed. These views are stored in :attr:`dirty_views`.\n    * Finally the view can be dead which occurs when the data changes and\n      the view was not updated or when a view is just created. Such views\n      are typically added to the internal cache.\n\nTypically what happens is that the layout manager lays out the data\nand then asks for views, using :meth:`set_visible_views`, for some specific\ndata items that it displays.\n\nThese views are gotten from the current views, dirty or global cache. Then\ndepending on the view state :meth:`refresh_view_attrs` is called to bring\nthe view up to date with the data (except for sizing parameters). Finally,\nthe layout manager gets these views, updates their size and displays them.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleDataAdapter: ",
        "prefix_py": "RecycleDataAdapter="
    },
    "_sizing_attrs": {
        "name": "_sizing_attrs",
        "type": "set",
        "help": "set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataAdapter"
        ],
        "prefix_kv": "_sizing_attrs: {}",
        "prefix_py": "_sizing_attrs={}"
    },
    "create_view": {
        "name": "create_view",
        "type": "function",
        "help": "(internal) Creates and initializes the view for the data at `index`.\n\nThe returned view is synced with the data, except for the pos/size\ninformation.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self",
            "index",
            "data_item",
            "viewclass"
        ],
        "prefix_kv": "create_view: ",
        "prefix_py": "create_view=()"
    },
    "dirty_views": {
        "name": "dirty_views",
        "type": "defaultdict",
        "help": "defaultdict(default_factory=None, /, [...]) --> dict with default factory\n\nThe default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataAdapter"
        ],
        "prefix_kv": "dirty_views",
        "prefix_py": "dirty_views."
    },
    "get_view": {
        "name": "get_view",
        "type": "function",
        "help": "(internal) Returns a view instance for the data at `index`\n\nIt looks through the various caches and finally creates a view if it\ndoesn't exist. The returned view is synced with the data, except for\nthe pos/size information.\n\nIf found in the cache it's removed from the source\nbefore returning. It doesn't check the current views.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self",
            "index",
            "data_item",
            "viewclass"
        ],
        "prefix_kv": "get_view: ",
        "prefix_py": "get_view=()"
    },
    "get_visible_view": {
        "name": "get_visible_view",
        "type": "function",
        "help": "Returns the currently visible view associated with ``index``.\n\nIf no view is currently displayed for ``index`` it returns ``None``.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self",
            "index"
        ],
        "prefix_kv": "get_visible_view: ",
        "prefix_py": "get_visible_view=()"
    },
    "invalidate": {
        "name": "invalidate",
        "type": "function",
        "help": "Moves all the current views into the global cache.\n\nAs opposed to making a view dirty where the view is in sync with the\ndata except for sizing information, this will completely disconnect the\nview from the data, as it is assumed the data has gone out of sync with\nthe view.\n\nThis is typically called when the data changes.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "invalidate: ",
        "prefix_py": "invalidate=()"
    },
    "make_view_dirty": {
        "name": "make_view_dirty",
        "type": "function",
        "help": "(internal) Used to flag this view as dirty, ready to be used for\nothers. See :meth:`make_views_dirty`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self",
            "view",
            "index"
        ],
        "prefix_kv": "make_view_dirty: ",
        "prefix_py": "make_view_dirty=()"
    },
    "make_views_dirty": {
        "name": "make_views_dirty",
        "type": "function",
        "help": "Makes all the current views dirty.\n\nDirty views are still in sync with the corresponding data. However, the\nsize information may go out of sync. Therefore a dirty view can be\nreused by the same index by just updating the sizing information.\n\nOnce the underlying data of this index changes, the view should be\nremoved from the dirty views and moved to the global cache with\n:meth:`invalidate`.\n\nThis is typically called when the layout manager needs to re-layout all\nthe data.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "make_views_dirty: ",
        "prefix_py": "make_views_dirty=()"
    },
    "refresh_view_attrs": {
        "name": "refresh_view_attrs",
        "type": "function",
        "help": "(internal) Syncs the view and brings it up to date with the data.\n\nThis method calls :meth:`RecycleDataViewBehavior.refresh_view_attrs`\nif the view inherits from :class:`RecycleDataViewBehavior`. See that\nmethod for more details.\n\n.. note::\n    Any sizing and position info is skipped when syncing with the data.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataAdapter",
            "RecycleDataViewBehavior",
            "RecycleKVIDsDataViewBehavior"
        ],
        "parametters": [
            "self",
            "index",
            "data_item",
            "view"
        ],
        "prefix_kv": "refresh_view_attrs: ",
        "prefix_py": "refresh_view_attrs=()"
    },
    "views": {
        "name": "views",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataAdapter"
        ],
        "prefix_kv": "views: {}",
        "prefix_py": "views={}"
    },
    "RecycleDataModel": {
        "name": "RecycleDataModel",
        "type": "type",
        "import": "from kivy.uix.recycleview import RecycleDataModel",
        "help": "An implementation of :class:`RecycleDataModelBehavior` that keeps the\ndata in a indexable list. See :attr:`data`.\n\nWhen data changes this class currently dispatches `on_data_changed`  with\none of the following additional keyword arguments.\n\n`none`: no keyword argument\n    With no additional argument it means a generic data change.\n`removed`: a slice or integer\n    The value is a slice or integer indicating the indices removed.\n`appended`: a slice\n    The slice in :attr:`data` indicating the first and last new items\n    (i.e. the slice pointing to the new items added at the end).\n`inserted`: a integer\n    The index in :attr:`data` where a new data item was inserted.\n`modified`: a slice\n    The slice with the indices where the data has been modified.\n    This currently does not allow changing of size etc.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleDataModel: ",
        "prefix_py": "RecycleDataModel="
    },
    "_last_len": {
        "name": "_last_len",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataModel"
        ],
        "prefix_kv": "_last_len: ",
        "prefix_py": "_last_len="
    },
    "_on_data_callback": {
        "name": "_on_data_callback",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataModel"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_on_data_callback: ",
        "prefix_py": "_on_data_callback=()"
    },
    "data": {
        "name": "data",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataModel",
            "RecycleView"
        ],
        "prefix_kv": "data: ()",
        "prefix_py": "data=()"
    },
    "observable_dict": {
        "name": "observable_dict",
        "type": "property",
        "help": "A dictionary instance, which when modified will trigger a `data` and\nconsequently an `on_data_changed` dispatch.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleDataModel"
        ],
        "prefix_kv": "observable_dict: ",
        "prefix_py": "observable_dict="
    },
    "on_data_changed": {
        "name": "on_data_changed",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleDataModel",
            "RecycleDataModelBehavior"
        ],
        "parametters": [
            "self",
            "largs",
            "kwargs"
        ],
        "prefix_kv": "on_data_changed: ",
        "prefix_py": "on_data_changed=()"
    },
    "RecycleDataModelBehavior": {
        "name": "RecycleDataModelBehavior",
        "type": "type",
        "import": "from kivy.uix.recycleview import RecycleDataModelBehavior",
        "help": ":class:`RecycleDataModelBehavior` is the base class for the models\nthat describes and provides the data for the\n:class:`~kivy.uix.recycleview.RecycleViewBehavior`.\n\n:Events:\n    `on_data_changed`:\n        Fired when the data changes. The event may dispatch\n        keyword arguments specific to each implementation of the data\n        model.\n        When dispatched, the event and keyword arguments are forwarded to\n        :meth:`~kivy.uix.recycleview.RecycleViewBehavior.refresh_from_data`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleDataModelBehavior: ",
        "prefix_py": "RecycleDataModelBehavior="
    },
    "RecycleView": {
        "name": "RecycleView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.recycleview import RecycleView",
        "help": "RecycleView is a flexible view for providing a limited window\ninto a large data set.\n\nSee the module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleView:\n    ",
        "prefix_py": "RecycleView()"
    },
    "_convert_sv_to_lm": {
        "name": "_convert_sv_to_lm",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "_convert_sv_to_lm: ",
        "prefix_py": "_convert_sv_to_lm=()"
    },
    "_data_model": {
        "name": "_data_model",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "_data_model: ",
        "prefix_py": "_data_model=()"
    },
    "_dispatch_prop_on_source": {
        "name": "_dispatch_prop_on_source",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "prop_name",
            "largs"
        ],
        "prefix_kv": "_dispatch_prop_on_source: ",
        "prefix_py": "_dispatch_prop_on_source=()"
    },
    "_get_data": {
        "name": "_get_data",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_data: ",
        "prefix_py": "_get_data=()"
    },
    "_get_data_model": {
        "name": "_get_data_model",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_data_model: ",
        "prefix_py": "_get_data_model=()"
    },
    "_get_key_viewclass": {
        "name": "_get_key_viewclass",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_key_viewclass: ",
        "prefix_py": "_get_key_viewclass=()"
    },
    "_get_layout_manager": {
        "name": "_get_layout_manager",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_layout_manager: ",
        "prefix_py": "_get_layout_manager=()"
    },
    "_get_view_adapter": {
        "name": "_get_view_adapter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_view_adapter: ",
        "prefix_py": "_get_view_adapter=()"
    },
    "_get_viewclass": {
        "name": "_get_viewclass",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_viewclass: ",
        "prefix_py": "_get_viewclass=()"
    },
    "_layout_manager": {
        "name": "_layout_manager",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "_layout_manager: ",
        "prefix_py": "_layout_manager=()"
    },
    "_refresh_flags": {
        "name": "_refresh_flags",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "_refresh_flags: {}",
        "prefix_py": "_refresh_flags={}"
    },
    "_refresh_trigger": {
        "name": "_refresh_trigger",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "_refresh_trigger: ",
        "prefix_py": "_refresh_trigger=()"
    },
    "_set_data": {
        "name": "_set_data",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_data: ",
        "prefix_py": "_set_data=()"
    },
    "_set_data_model": {
        "name": "_set_data_model",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_data_model: ",
        "prefix_py": "_set_data_model=()"
    },
    "_set_key_viewclass": {
        "name": "_set_key_viewclass",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_key_viewclass: ",
        "prefix_py": "_set_key_viewclass=()"
    },
    "_set_layout_manager": {
        "name": "_set_layout_manager",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_layout_manager: ",
        "prefix_py": "_set_layout_manager=()"
    },
    "_set_view_adapter": {
        "name": "_set_view_adapter",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_view_adapter: ",
        "prefix_py": "_set_view_adapter=()"
    },
    "_set_viewclass": {
        "name": "_set_viewclass",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_viewclass: ",
        "prefix_py": "_set_viewclass=()"
    },
    "_view_adapter": {
        "name": "_view_adapter",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "_view_adapter: ",
        "prefix_py": "_view_adapter=()"
    },
    "data_model": {
        "name": "data_model",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "data_model",
        "prefix_py": "data_model."
    },
    "get_viewport": {
        "name": "get_viewport",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_viewport: ",
        "prefix_py": "get_viewport=()"
    },
    "layout_manager": {
        "name": "layout_manager",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "layout_manager",
        "prefix_py": "layout_manager."
    },
    "refresh_from_data": {
        "name": "refresh_from_data",
        "type": "function",
        "help": "This should be called when data changes. Data changes typically\nindicate that everything should be recomputed since the source data\nchanged.\n\nThis method is automatically bound to the\n:attr:`~RecycleDataModelBehavior.on_data_changed` method of the\n:class:`~RecycleDataModelBehavior` class and\ntherefore responds to and accepts the keyword arguments of that event.\n\nIt can be called manually to trigger an update.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "largs",
            "kwargs"
        ],
        "prefix_kv": "refresh_from_data: ",
        "prefix_py": "refresh_from_data=()"
    },
    "refresh_from_layout": {
        "name": "refresh_from_layout",
        "type": "function",
        "help": "This should be called when the layout changes or needs to change. It is\ntypically called when a layout parameter has changed and therefore the\nlayout needs to be recomputed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "largs",
            "kwargs"
        ],
        "prefix_kv": "refresh_from_layout: ",
        "prefix_py": "refresh_from_layout=()"
    },
    "refresh_from_viewport": {
        "name": "refresh_from_viewport",
        "type": "function",
        "help": "This should be called when the viewport changes and the displayed data\nmust be updated. Neither the data nor the layout will be recomputed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "refresh_from_viewport: ",
        "prefix_py": "refresh_from_viewport=()"
    },
    "refresh_views": {
        "name": "refresh_views",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "refresh_views: ",
        "prefix_py": "refresh_views=()"
    },
    "restore_viewport": {
        "name": "restore_viewport",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "restore_viewport: ",
        "prefix_py": "restore_viewport=()"
    },
    "save_viewport": {
        "name": "save_viewport",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "save_viewport: ",
        "prefix_py": "save_viewport=()"
    },
    "view_adapter": {
        "name": "view_adapter",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RecycleView",
            "RecycleViewBehavior"
        ],
        "prefix_kv": "view_adapter",
        "prefix_py": "view_adapter."
    },
    "RecycleViewBehavior": {
        "name": "RecycleViewBehavior",
        "type": "type",
        "import": "from kivy.uix.recycleview import RecycleViewBehavior",
        "help": "RecycleViewBehavior provides a behavioral model upon which the\n:class:`RecycleView` is built. Together, they offer an extensible and\nflexible way to produce views with limited windows over large data sets.\n\nSee the module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleViewBehavior: ",
        "prefix_py": "RecycleViewBehavior="
    },
    "ObservableDict": {
        "name": "ObservableDict",
        "type": "type",
        "import": "from kivy.uix.recycleview.datamodel import ObservableDict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ObservableDict: ",
        "prefix_py": "ObservableDict="
    },
    "_weak_return": {
        "name": "_weak_return",
        "type": "cython_function_or_method",
        "help": "ObservableDict._weak_return(self, item)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "ObservableDict"
        ],
        "prefix_kv": "_weak_return",
        "prefix_py": "_weak_return."
    },
    "LayoutSelectionBehavior": {
        "name": "LayoutSelectionBehavior",
        "type": "type",
        "import": "from kivy.uix.recycleview.layout import LayoutSelectionBehavior",
        "help": "The :class:`LayoutSelectionBehavior` can be combined with\n:class:`RecycleLayoutManagerBehavior` to allow its derived classes\nselection behaviors similarly to how\n:class:`~kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior`\ncan be used to add selection behaviors to normal layout.\n\n:class:`RecycleLayoutManagerBehavior` manages its children\ndifferently than normal layouts or widgets so this class adapts\n:class:`~kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior`\nbased selection to work with :class:`RecycleLayoutManagerBehavior` as well.\n\nSimilarly to\n:class:`~kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior`,\none can select using the keyboard or touch, which calls :meth:`select_node`\nor :meth:`deselect_node`, or one can call these methods directly. When a\nitem is selected or deselected :meth:`apply_selection` is called. See\n:meth:`apply_selection`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "LayoutSelectionBehavior: ",
        "prefix_py": "LayoutSelectionBehavior="
    },
    "_nodes_map": {
        "name": "_nodes_map",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_nodes_map: {}",
        "prefix_py": "_nodes_map={}"
    },
    "_selectable_nodes": {
        "name": "_selectable_nodes",
        "type": "list",
        "help": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "_selectable_nodes: ()",
        "prefix_py": "_selectable_nodes=()"
    },
    "apply_selection": {
        "name": "apply_selection",
        "type": "function",
        "help": "Applies the selection to the view. This is called internally when\na view is displayed and it needs to be shown as selected or as not\nselected.\n\nIt is called when :meth:`select_node` or :meth:`deselect_node` is\ncalled or when a view needs to be refreshed. Its function is purely to\nupdate the view to reflect the selection state. So the function may be\ncalled multiple times even if the selection state may not have changed.\n\nIf the view is a instance of\n:class:`~kivy.uix.recycleview.views.RecycleDataViewBehavior`, its\n:meth:`~kivy.uix.recycleview.views.RecycleDataViewBehavior.apply_selection` method will be called every time the view needs to refresh\nthe selection state. Otherwise, the this method is responsible\nfor applying the selection.\n\n:Parameters:\n\n    `index`: int\n        The index of the data item that is associated with the view.\n    `view`: widget\n        The widget that is the view of this data item.\n    `is_selected`: bool\n        Whether the item is selected.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "LayoutSelectionBehavior",
            "RecycleDataViewBehavior",
            "RecycleKVIDsDataViewBehavior"
        ],
        "parametters": [
            "self",
            "index",
            "view",
            "is_selected"
        ],
        "prefix_kv": "apply_selection: ",
        "prefix_py": "apply_selection=()"
    },
    "key_selection": {
        "name": "key_selection",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "LayoutSelectionBehavior"
        ],
        "prefix_kv": "key_selection: ''",
        "prefix_py": "key_selection=''"
    },
    "RecycleDataViewBehavior": {
        "name": "RecycleDataViewBehavior",
        "type": "type",
        "import": "from kivy.uix.recycleview.layout import RecycleDataViewBehavior",
        "help": "A optional base class for data views (:attr:`RecycleView`.viewclass).\nIf a view inherits from this class, the class's functions will be called\nwhen the view needs to be updated due to a data change or layout update.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleDataViewBehavior: ",
        "prefix_py": "RecycleDataViewBehavior="
    },
    "RecycleKVIDsDataViewBehavior": {
        "name": "RecycleKVIDsDataViewBehavior",
        "type": "type",
        "import": "from kivy.uix.recycleview.views import RecycleKVIDsDataViewBehavior",
        "help": "Similar to :class:`RecycleDataViewBehavior`, except that the data keys\ncan signify properties of an object named with an id in the root KV rule.\n\nE.g. given a KV rule::\n\n    <MyRule@RecycleKVIDsDataViewBehavior+BoxLayout>:\n        Label:\n            id: name\n        Label:\n            id: value\n\nThen setting the data list with\n``rv.data = [{'name.text': 'Kivy user', 'value.text': '12'}]`` would\nautomatically set the corresponding labels.\n\nSo, if the key doesn't have a period, the named property of the root widget\nwill be set to the corresponding value. If there is a period, the named\nproperty of the widget with the id listed before the period will be set to\nthe corresponding value.\n\n.. versionadded:: 2.0.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RecycleKVIDsDataViewBehavior: ",
        "prefix_py": "RecycleKVIDsDataViewBehavior="
    },
    "Directive": {
        "name": "Directive",
        "type": "type",
        "import": "from kivy.uix.rst import Directive",
        "help": "Base class for reStructuredText directives.\n\nThe following attributes may be set by subclasses.  They are\ninterpreted by the directive parser (which runs the directive\nclass):\n\n- `required_arguments`: The number of required arguments (default:\n  0).\n\n- `optional_arguments`: The number of optional arguments (default:\n  0).\n\n- `final_argument_whitespace`: A boolean, indicating if the final\n  argument may contain whitespace (default: False).\n\n- `option_spec`: A dictionary, mapping known option names to\n  conversion functions such as `int` or `float` (default: {}, no\n  options).  Several conversion functions are defined in the\n  directives/__init__.py module.\n\n  Option conversion functions take a single parameter, the option\n  argument (a string or ``None``), validate it and/or convert it\n  to the appropriate form.  Conversion functions may raise\n  `ValueError` and `TypeError` exceptions.\n\n- `has_content`: A boolean; True if content is allowed.  Client\n  code must handle the case where content is required but not\n  supplied (an empty content list will be supplied).\n\nArguments are normally single whitespace-separated words.  The\nfinal argument may contain whitespace and/or newlines if\n`final_argument_whitespace` is True.\n\nIf the form of the arguments is more complex, specify only one\nargument (either required or optional) and set\n`final_argument_whitespace` to True; the client code must do any\ncontext-sensitive parsing.\n\nWhen a directive implementation is being run, the directive class\nis instantiated, and the `run()` method is executed.  During\ninstantiation, the following instance variables are set:\n\n- ``name`` is the directive type or name (string).\n\n- ``arguments`` is the list of positional arguments (strings).\n\n- ``options`` is a dictionary mapping option names (strings) to\n  values (type depends on option conversion functions; see\n  `option_spec` above).\n\n- ``content`` is a list of strings, the directive content line by line.\n\n- ``lineno`` is the absolute line number of the first line\n  of the directive.\n\n- ``content_offset`` is the line offset of the first line\n  of the content from the beginning of the current input.\n  Used when initiating a nested parse.\n\n- ``block_text`` is a string containing the entire directive.\n\n- ``state`` is the state which called the directive function.\n\n- ``state_machine`` is the state machine which controls the state\n  which called the directive function.\n\n- ``reporter`` is the state machine's `reporter` instance.\n\nDirective functions return a list of nodes which will be inserted\ninto the document tree at the point where the directive was\nencountered.  This can be an empty list if there is nothing to\ninsert.\n\nFor ordinary directives, the list must contain body elements or\nstructural elements.  Some directives are intended specifically\nfor substitution definitions, and must return a list of `Text`\nnodes and/or inline elements (suitable for inline insertion, in\nplace of the substitution reference).  Such directives must verify\nsubstitution definition context, typically using code like this::\n\n    if not isinstance(state, states.SubstitutionDef):\n        error = self.reporter.error(\n            'Invalid context: the \"%s\" directive can only be used '\n            'within a substitution definition.' % (name),\n            nodes.literal_block(block_text, block_text), line=lineno)\n        return [error]",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Directive: ",
        "prefix_py": "Directive="
    },
    "add_name": {
        "name": "add_name",
        "type": "function",
        "help": "Append self.options['name'] to node['names'] if it exists.\n\nAlso normalize the name string and register it as explicit target.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "add_name: ",
        "prefix_py": "add_name=()"
    },
    "assert_has_content": {
        "name": "assert_has_content",
        "type": "function",
        "help": "Throw an ERROR-level DirectiveError if the directive doesn't\nhave contents.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "assert_has_content: ",
        "prefix_py": "assert_has_content=()"
    },
    "debug": {
        "name": "debug",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "message"
        ],
        "prefix_kv": "debug: ",
        "prefix_py": "debug=()"
    },
    "directive_error": {
        "name": "directive_error",
        "type": "function",
        "help": "Return a DirectiveError suitable for being thrown as an exception.\n\nCall \"raise self.directive_error(level, message)\" from within\na directive implementation to return one single system message\nat level `level`, which automatically gets the directive block\nand the line number added.\n\nPreferably use the `debug`, `info`, `warning`, `error`, or `severe`\nwrapper methods, e.g. ``self.error(message)`` to generate an\nERROR-level directive error.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "level",
            "message"
        ],
        "prefix_kv": "directive_error: ",
        "prefix_py": "directive_error=()"
    },
    "final_argument_whitespace": {
        "name": "final_argument_whitespace",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "final_argument_whitespace: True",
        "prefix_py": "final_argument_whitespace=True"
    },
    "has_content": {
        "name": "has_content",
        "type": "bool",
        "help": "bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "has_content: True",
        "prefix_py": "has_content=True"
    },
    "info": {
        "name": "info",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "message"
        ],
        "prefix_kv": "info: ",
        "prefix_py": "info=()"
    },
    "option_spec": {
        "name": "option_spec",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "option_spec: ",
        "prefix_py": "option_spec=()"
    },
    "optional_arguments": {
        "name": "optional_arguments",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "optional_arguments: ",
        "prefix_py": "optional_arguments="
    },
    "required_arguments": {
        "name": "required_arguments",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "prefix_kv": "required_arguments: ",
        "prefix_py": "required_arguments="
    },
    "run": {
        "name": "run",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "run: ",
        "prefix_py": "run=()"
    },
    "severe": {
        "name": "severe",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "message"
        ],
        "prefix_kv": "severe: ",
        "prefix_py": "severe=()"
    },
    "warning": {
        "name": "warning",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Directive",
            "VideoDirective"
        ],
        "parametters": [
            "self",
            "message"
        ],
        "prefix_kv": "warning: ",
        "prefix_py": "warning=()"
    },
    "RstAsyncImage": {
        "name": "RstAsyncImage",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstAsyncImage",
        "help": "Asynchronous Image class. See the module documentation for more\ninformation.\n\n.. note::\n\n    The AsyncImage is a specialized form of the Image class. You may\n    want to refer to the :mod:`~kivy.loader` documentation and in\n    particular, the :class:`~kivy.loader.ProxyImage` for more detail\n    on how to handle events around asynchronous image loading.\n\n.. note::\n\n    AsyncImage currently does not support properties\n    :attr:`anim_loop` and :attr:`mipmap` and setting those properties will\n    have no effect.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstAsyncImage:\n    ",
        "prefix_py": "RstAsyncImage()"
    },
    "RstBlockQuote": {
        "name": "RstBlockQuote",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstBlockQuote",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstBlockQuote:\n    ",
        "prefix_py": "RstBlockQuote()"
    },
    "RstDefinition": {
        "name": "RstDefinition",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstDefinition",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstDefinition:\n    ",
        "prefix_py": "RstDefinition()"
    },
    "document": {
        "name": "document",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDefinition",
            "RstDefinitionList",
            "RstDefinitionSpace",
            "RstFieldName",
            "RstFootName",
            "RstListBullet",
            "RstParagraph",
            "RstTerm",
            "RstTitle",
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "document: ",
        "prefix_py": "document="
    },
    "RstDefinitionList": {
        "name": "RstDefinitionList",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstDefinitionList",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstDefinitionList:\n    ",
        "prefix_py": "RstDefinitionList()"
    },
    "RstDefinitionSpace": {
        "name": "RstDefinitionSpace",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstDefinitionSpace",
        "help": "Widget class. See module documentation for more information.\n\n:Events:\n    `on_touch_down`: `(touch, )`\n        Fired when a new touch event occurs. `touch` is the touch object.\n    `on_touch_move`: `(touch, )`\n        Fired when an existing touch moves. `touch` is the touch object.\n    `on_touch_up`: `(touch, )`\n        Fired when an existing touch disappears. `touch` is the touch\n        object.\n    `on_kv_post`: `(base_widget, )`\n        Fired after all the kv rules associated with the widget\n        and all other widgets that are in any of those rules have had\n        all their kv rules applied. `base_widget` is the base-most widget\n        whose instantiation triggered the kv rules (i.e. the widget\n        instantiated from Python, e.g. ``MyWidget()``).\n\n        .. versionchanged:: 1.11.0\n\n.. warning::\n    Adding a `__del__` method to a class derived from Widget with Python\n    prior to 3.4 will disable automatic garbage collection for instances\n    of that class. This is because the Widget class creates reference\n    cycles, thereby `preventing garbage collection\n    <https://docs.python.org/2/library/gc.html#gc.garbage>`_.\n\n.. versionchanged:: 1.0.9\n    Everything related to event properties has been moved to the\n    :class:`~kivy.event.EventDispatcher`. Event properties can now be used\n    when constructing a simple class without subclassing :class:`Widget`.\n\n.. versionchanged:: 1.5.0\n    The constructor now accepts on_* arguments to automatically bind\n    callbacks to properties or events, as in the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstDefinitionSpace:\n    ",
        "prefix_py": "RstDefinitionSpace()"
    },
    "RstDocument": {
        "name": "RstDocument",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstDocument",
        "help": "Base widget used to store an Rst document. See module documentation for\nmore information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstDocument:\n    ",
        "prefix_py": "RstDocument()"
    },
    "_get_bgc": {
        "name": "_get_bgc",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_bgc: ",
        "prefix_py": "_get_bgc=()"
    },
    "_load_from_text": {
        "name": "_load_from_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_load_from_text: ",
        "prefix_py": "_load_from_text=()"
    },
    "_set_bgc": {
        "name": "_set_bgc",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_set_bgc: ",
        "prefix_py": "_set_bgc=()"
    },
    "add_anchors": {
        "name": "add_anchors",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "add_anchors: ",
        "prefix_py": "add_anchors=()"
    },
    "anchors_widgets": {
        "name": "anchors_widgets",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "anchors_widgets: ()",
        "prefix_py": "anchors_widgets=()"
    },
    "base_font_size": {
        "name": "base_font_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "base_font_size: ",
        "prefix_py": "base_font_size="
    },
    "colors": {
        "name": "colors",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "colors: {}",
        "prefix_py": "colors={}"
    },
    "document_root": {
        "name": "document_root",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "document_root: ''",
        "prefix_py": "document_root=''"
    },
    "goto": {
        "name": "goto",
        "type": "function",
        "help": "Scroll to the reference. If it's not found, nothing will be done.\n\nFor this text::\n\n    .. _myref:\n\n    This is something I always wanted.\n\nYou can do::\n\n    from kivy.clock import Clock\n    from functools import partial\n\n    doc = RstDocument(...)\n    Clock.schedule_once(partial(doc.goto, 'myref'), 0.1)\n\n.. note::\n\n    It is preferable to delay the call of the goto if you just loaded\n    the document because the layout might not be finished or the\n    size of the RstDocument has not yet been determined. In\n    either case, the calculation of the scrolling would be\n    wrong.\n\n    You can, however, do a direct call if the document is already\n    loaded.\n\n.. versionadded:: 1.3.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "ref",
            "largs"
        ],
        "prefix_kv": "goto: ",
        "prefix_py": "goto=()"
    },
    "on_source": {
        "name": "on_source",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument",
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_source: ",
        "prefix_py": "on_source=()"
    },
    "on_text": {
        "name": "on_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_text: ",
        "prefix_py": "on_text=()"
    },
    "preload": {
        "name": "preload",
        "type": "function",
        "help": "Preload a rst file to get its toctree and its title.\n\nThe result will be stored in :attr:`toctrees` with the ``filename`` as\nkey.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "filename",
            "encoding",
            "errors"
        ],
        "prefix_kv": "preload: ",
        "prefix_py": "preload=()"
    },
    "refs_assoc": {
        "name": "refs_assoc",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "refs_assoc: {}",
        "prefix_py": "refs_assoc={}"
    },
    "resolve_path": {
        "name": "resolve_path",
        "type": "function",
        "help": "Get the path for this filename. If the filename doesn't exist,\nit returns the document_root + filename.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstDocument"
        ],
        "parametters": [
            "self",
            "filename"
        ],
        "prefix_kv": "resolve_path: ",
        "prefix_py": "resolve_path=()"
    },
    "scatter": {
        "name": "scatter",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "scatter: ",
        "prefix_py": "scatter="
    },
    "show_errors": {
        "name": "show_errors",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "show_errors: True",
        "prefix_py": "show_errors=True"
    },
    "source_encoding": {
        "name": "source_encoding",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "source_encoding: ''",
        "prefix_py": "source_encoding=''"
    },
    "source_error": {
        "name": "source_error",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "source_error: ''",
        "prefix_py": "source_error=''"
    },
    "toctrees": {
        "name": "toctrees",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "toctrees: {}",
        "prefix_py": "toctrees={}"
    },
    "underline_color": {
        "name": "underline_color",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstDocument"
        ],
        "prefix_kv": "underline_color: ''",
        "prefix_py": "underline_color=''"
    },
    "RstEmptySpace": {
        "name": "RstEmptySpace",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstEmptySpace",
        "help": "Widget class. See module documentation for more information.\n\n:Events:\n    `on_touch_down`: `(touch, )`\n        Fired when a new touch event occurs. `touch` is the touch object.\n    `on_touch_move`: `(touch, )`\n        Fired when an existing touch moves. `touch` is the touch object.\n    `on_touch_up`: `(touch, )`\n        Fired when an existing touch disappears. `touch` is the touch\n        object.\n    `on_kv_post`: `(base_widget, )`\n        Fired after all the kv rules associated with the widget\n        and all other widgets that are in any of those rules have had\n        all their kv rules applied. `base_widget` is the base-most widget\n        whose instantiation triggered the kv rules (i.e. the widget\n        instantiated from Python, e.g. ``MyWidget()``).\n\n        .. versionchanged:: 1.11.0\n\n.. warning::\n    Adding a `__del__` method to a class derived from Widget with Python\n    prior to 3.4 will disable automatic garbage collection for instances\n    of that class. This is because the Widget class creates reference\n    cycles, thereby `preventing garbage collection\n    <https://docs.python.org/2/library/gc.html#gc.garbage>`_.\n\n.. versionchanged:: 1.0.9\n    Everything related to event properties has been moved to the\n    :class:`~kivy.event.EventDispatcher`. Event properties can now be used\n    when constructing a simple class without subclassing :class:`Widget`.\n\n.. versionchanged:: 1.5.0\n    The constructor now accepts on_* arguments to automatically bind\n    callbacks to properties or events, as in the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstEmptySpace:\n    ",
        "prefix_py": "RstEmptySpace()"
    },
    "RstEntry": {
        "name": "RstEntry",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstEntry",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstEntry:\n    ",
        "prefix_py": "RstEntry()"
    },
    "RstFieldBody": {
        "name": "RstFieldBody",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstFieldBody",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstFieldBody:\n    ",
        "prefix_py": "RstFieldBody()"
    },
    "RstFieldList": {
        "name": "RstFieldList",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstFieldList",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstFieldList:\n    ",
        "prefix_py": "RstFieldList()"
    },
    "RstFieldName": {
        "name": "RstFieldName",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstFieldName",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstFieldName:\n    ",
        "prefix_py": "RstFieldName()"
    },
    "RstFootName": {
        "name": "RstFootName",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstFootName",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstFootName:\n    ",
        "prefix_py": "RstFootName()"
    },
    "RstFootnote": {
        "name": "RstFootnote",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstFootnote",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstFootnote:\n    ",
        "prefix_py": "RstFootnote()"
    },
    "RstGridLayout": {
        "name": "RstGridLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstGridLayout",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstGridLayout:\n    ",
        "prefix_py": "RstGridLayout()"
    },
    "RstImage": {
        "name": "RstImage",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstImage",
        "help": "Image class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstImage:\n    ",
        "prefix_py": "RstImage()"
    },
    "RstList": {
        "name": "RstList",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstList",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstList:\n    ",
        "prefix_py": "RstList()"
    },
    "RstListBullet": {
        "name": "RstListBullet",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstListBullet",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstListBullet:\n    ",
        "prefix_py": "RstListBullet()"
    },
    "RstListItem": {
        "name": "RstListItem",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstListItem",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstListItem:\n    ",
        "prefix_py": "RstListItem()"
    },
    "RstLiteralBlock": {
        "name": "RstLiteralBlock",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstLiteralBlock",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstLiteralBlock:\n    ",
        "prefix_py": "RstLiteralBlock()"
    },
    "RstNote": {
        "name": "RstNote",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstNote",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstNote:\n    ",
        "prefix_py": "RstNote()"
    },
    "RstParagraph": {
        "name": "RstParagraph",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstParagraph",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstParagraph:\n    ",
        "prefix_py": "RstParagraph()"
    },
    "mx": {
        "name": "mx",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstParagraph"
        ],
        "prefix_kv": "mx: ",
        "prefix_py": "mx="
    },
    "my": {
        "name": "my",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstParagraph"
        ],
        "prefix_kv": "my: ",
        "prefix_py": "my="
    },
    "RstSystemMessage": {
        "name": "RstSystemMessage",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstSystemMessage",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstSystemMessage:\n    ",
        "prefix_py": "RstSystemMessage()"
    },
    "RstTable": {
        "name": "RstTable",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstTable",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstTable:\n    ",
        "prefix_py": "RstTable()"
    },
    "RstTerm": {
        "name": "RstTerm",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstTerm",
        "help": "Anchor layout class. See the module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstTerm:\n    ",
        "prefix_py": "RstTerm()"
    },
    "RstTitle": {
        "name": "RstTitle",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstTitle",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstTitle:\n    ",
        "prefix_py": "RstTitle()"
    },
    "section": {
        "name": "section",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstTitle",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "prefix_kv": "section: ",
        "prefix_py": "section="
    },
    "RstTransition": {
        "name": "RstTransition",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstTransition",
        "help": "Widget class. See module documentation for more information.\n\n:Events:\n    `on_touch_down`: `(touch, )`\n        Fired when a new touch event occurs. `touch` is the touch object.\n    `on_touch_move`: `(touch, )`\n        Fired when an existing touch moves. `touch` is the touch object.\n    `on_touch_up`: `(touch, )`\n        Fired when an existing touch disappears. `touch` is the touch\n        object.\n    `on_kv_post`: `(base_widget, )`\n        Fired after all the kv rules associated with the widget\n        and all other widgets that are in any of those rules have had\n        all their kv rules applied. `base_widget` is the base-most widget\n        whose instantiation triggered the kv rules (i.e. the widget\n        instantiated from Python, e.g. ``MyWidget()``).\n\n        .. versionchanged:: 1.11.0\n\n.. warning::\n    Adding a `__del__` method to a class derived from Widget with Python\n    prior to 3.4 will disable automatic garbage collection for instances\n    of that class. This is because the Widget class creates reference\n    cycles, thereby `preventing garbage collection\n    <https://docs.python.org/2/library/gc.html#gc.garbage>`_.\n\n.. versionchanged:: 1.0.9\n    Everything related to event properties has been moved to the\n    :class:`~kivy.event.EventDispatcher`. Event properties can now be used\n    when constructing a simple class without subclassing :class:`Widget`.\n\n.. versionchanged:: 1.5.0\n    The constructor now accepts on_* arguments to automatically bind\n    callbacks to properties or events, as in the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstTransition:\n    ",
        "prefix_py": "RstTransition()"
    },
    "RstVideoPlayer": {
        "name": "RstVideoPlayer",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstVideoPlayer",
        "help": "VideoPlayer class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstVideoPlayer:\n    ",
        "prefix_py": "RstVideoPlayer()"
    },
    "_do_video_load": {
        "name": "_do_video_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "Video"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_do_video_load: ",
        "prefix_py": "_do_video_load=()"
    },
    "_load_annotations": {
        "name": "_load_annotations",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "annotations"
        ],
        "prefix_kv": "_load_annotations: ",
        "prefix_py": "_load_annotations=()"
    },
    "_load_thumbnail": {
        "name": "_load_thumbnail",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "thumbnail"
        ],
        "prefix_kv": "_load_thumbnail: ",
        "prefix_py": "_load_thumbnail=()"
    },
    "_play_started": {
        "name": "_play_started",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_play_started: ",
        "prefix_py": "_play_started=()"
    },
    "_set_state": {
        "name": "_set_state",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_set_state: ",
        "prefix_py": "_set_state=()"
    },
    "_trigger_video_load": {
        "name": "_trigger_video_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "Video"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_trigger_video_load: ",
        "prefix_py": "_trigger_video_load=()"
    },
    "_try_load_default_annotations": {
        "name": "_try_load_default_annotations",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_try_load_default_annotations: ",
        "prefix_py": "_try_load_default_annotations=()"
    },
    "_try_load_default_thumbnail": {
        "name": "_try_load_default_thumbnail",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_try_load_default_thumbnail: ",
        "prefix_py": "_try_load_default_thumbnail=()"
    },
    "_update_annotations": {
        "name": "_update_annotations",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_annotations: ",
        "prefix_py": "_update_annotations=()"
    },
    "_update_thumbnail": {
        "name": "_update_thumbnail",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_update_thumbnail: ",
        "prefix_py": "_update_thumbnail=()"
    },
    "_video_load_ev": {
        "name": "_video_load_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "_video_load_ev: ",
        "prefix_py": "_video_load_ev=()"
    },
    "allow_fullscreen": {
        "name": "allow_fullscreen",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "allow_fullscreen: True",
        "prefix_py": "allow_fullscreen=True"
    },
    "annotations": {
        "name": "annotations",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "annotations: ''",
        "prefix_py": "annotations=''"
    },
    "fullscreen": {
        "name": "fullscreen",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "fullscreen: True",
        "prefix_py": "fullscreen=True"
    },
    "image_loading": {
        "name": "image_loading",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_loading: ''",
        "prefix_py": "image_loading=''"
    },
    "image_overlay_play": {
        "name": "image_overlay_play",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_overlay_play: ''",
        "prefix_py": "image_overlay_play=''"
    },
    "image_pause": {
        "name": "image_pause",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_pause: ''",
        "prefix_py": "image_pause=''"
    },
    "image_play": {
        "name": "image_play",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_play: ''",
        "prefix_py": "image_play=''"
    },
    "image_stop": {
        "name": "image_stop",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_stop: ''",
        "prefix_py": "image_stop=''"
    },
    "image_volumehigh": {
        "name": "image_volumehigh",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_volumehigh: ''",
        "prefix_py": "image_volumehigh=''"
    },
    "image_volumelow": {
        "name": "image_volumelow",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_volumelow: ''",
        "prefix_py": "image_volumelow=''"
    },
    "image_volumemedium": {
        "name": "image_volumemedium",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_volumemedium: ''",
        "prefix_py": "image_volumemedium=''"
    },
    "image_volumemuted": {
        "name": "image_volumemuted",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "image_volumemuted: ''",
        "prefix_py": "image_volumemuted=''"
    },
    "on_fullscreen": {
        "name": "on_fullscreen",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_fullscreen: ",
        "prefix_py": "on_fullscreen=()"
    },
    "on_image_loading": {
        "name": "on_image_loading",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_image_loading: ",
        "prefix_py": "on_image_loading=()"
    },
    "on_image_overlay_play": {
        "name": "on_image_overlay_play",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_image_overlay_play: ",
        "prefix_py": "on_image_overlay_play=()"
    },
    "on_position": {
        "name": "on_position",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_position: ",
        "prefix_py": "on_position=()"
    },
    "on_state": {
        "name": "on_state",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "Video"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_state: ",
        "prefix_py": "on_state=()"
    },
    "on_volume": {
        "name": "on_volume",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "Video"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_volume: ",
        "prefix_py": "on_volume=()"
    },
    "position": {
        "name": "position",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "CoreVideo",
            "Video"
        ],
        "prefix_kv": "position: ",
        "prefix_py": "position="
    },
    "seek": {
        "name": "seek",
        "type": "function",
        "help": "Change the position to a percentage (strictly, a proportion)\n   of duration.\n\n:Parameters:\n    `percent`: float or int\n        Position to seek as a proportion of total duration, must\n        be between 0-1.\n    `precise`: bool, defaults to True\n        Precise seeking is slower, but seeks to exact requested\n        percent.\n\n.. warning::\n    Calling seek() before the video is loaded has no effect.\n\n.. versionadded:: 1.2.0\n\n.. versionchanged:: 1.10.1\n    The `precise` keyword argument has been added.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "CoreVideo",
            "Video",
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "percent",
            "precise"
        ],
        "prefix_kv": "seek: ",
        "prefix_py": "seek=()"
    },
    "thumbnail": {
        "name": "thumbnail",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer"
        ],
        "prefix_kv": "thumbnail: ''",
        "prefix_py": "thumbnail=''"
    },
    "volume": {
        "name": "volume",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RstVideoPlayer",
            "VideoPlayer",
            "CoreVideo",
            "Video"
        ],
        "prefix_kv": "volume: ",
        "prefix_py": "volume="
    },
    "RstWarning": {
        "name": "RstWarning",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import RstWarning",
        "help": "Grid layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RstWarning:\n    ",
        "prefix_py": "RstWarning()"
    },
    "VideoDirective": {
        "name": "VideoDirective",
        "type": "type",
        "import": "from kivy.uix.rst import VideoDirective",
        "help": "Base class for reStructuredText directives.\n\nThe following attributes may be set by subclasses.  They are\ninterpreted by the directive parser (which runs the directive\nclass):\n\n- `required_arguments`: The number of required arguments (default:\n  0).\n\n- `optional_arguments`: The number of optional arguments (default:\n  0).\n\n- `final_argument_whitespace`: A boolean, indicating if the final\n  argument may contain whitespace (default: False).\n\n- `option_spec`: A dictionary, mapping known option names to\n  conversion functions such as `int` or `float` (default: {}, no\n  options).  Several conversion functions are defined in the\n  directives/__init__.py module.\n\n  Option conversion functions take a single parameter, the option\n  argument (a string or ``None``), validate it and/or convert it\n  to the appropriate form.  Conversion functions may raise\n  `ValueError` and `TypeError` exceptions.\n\n- `has_content`: A boolean; True if content is allowed.  Client\n  code must handle the case where content is required but not\n  supplied (an empty content list will be supplied).\n\nArguments are normally single whitespace-separated words.  The\nfinal argument may contain whitespace and/or newlines if\n`final_argument_whitespace` is True.\n\nIf the form of the arguments is more complex, specify only one\nargument (either required or optional) and set\n`final_argument_whitespace` to True; the client code must do any\ncontext-sensitive parsing.\n\nWhen a directive implementation is being run, the directive class\nis instantiated, and the `run()` method is executed.  During\ninstantiation, the following instance variables are set:\n\n- ``name`` is the directive type or name (string).\n\n- ``arguments`` is the list of positional arguments (strings).\n\n- ``options`` is a dictionary mapping option names (strings) to\n  values (type depends on option conversion functions; see\n  `option_spec` above).\n\n- ``content`` is a list of strings, the directive content line by line.\n\n- ``lineno`` is the absolute line number of the first line\n  of the directive.\n\n- ``content_offset`` is the line offset of the first line\n  of the content from the beginning of the current input.\n  Used when initiating a nested parse.\n\n- ``block_text`` is a string containing the entire directive.\n\n- ``state`` is the state which called the directive function.\n\n- ``state_machine`` is the state machine which controls the state\n  which called the directive function.\n\n- ``reporter`` is the state machine's `reporter` instance.\n\nDirective functions return a list of nodes which will be inserted\ninto the document tree at the point where the directive was\nencountered.  This can be an empty list if there is nothing to\ninsert.\n\nFor ordinary directives, the list must contain body elements or\nstructural elements.  Some directives are intended specifically\nfor substitution definitions, and must return a list of `Text`\nnodes and/or inline elements (suitable for inline insertion, in\nplace of the substitution reference).  Such directives must verify\nsubstitution definition context, typically using code like this::\n\n    if not isinstance(state, states.SubstitutionDef):\n        error = self.reporter.error(\n            'Invalid context: the \"%s\" directive can only be used '\n            'within a substitution definition.' % (name),\n            nodes.literal_block(block_text, block_text), line=lineno)\n        return [error]",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoDirective: ",
        "prefix_py": "VideoDirective="
    },
    "VideoPlayer": {
        "name": "VideoPlayer",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.rst import VideoPlayer",
        "help": "VideoPlayer class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayer:\n    ",
        "prefix_py": "VideoPlayer()"
    },
    "_ToctreeVisitor": {
        "name": "_ToctreeVisitor",
        "type": "type",
        "import": "from kivy.uix.rst import _ToctreeVisitor",
        "help": "\"Visitor\" pattern [GoF95]_ abstract superclass implementation for\ndocument tree traversals.\n\nEach node class has corresponding methods, doing nothing by\ndefault; override individual methods for specific and useful\nbehaviour.  The `dispatch_visit()` method is called by\n`Node.walk()` upon entering a node.  `Node.walkabout()` also calls\nthe `dispatch_departure()` method before exiting a node.\n\nThe dispatch methods call \"``visit_`` + node class name\" or\n\"``depart_`` + node class name\", resp.\n\nThis is a base class for visitors whose ``visit_...`` & ``depart_...``\nmethods must be implemented for *all* compulsory node types encountered\n(such as for `docutils.writers.Writer` subclasses).\nUnimplemented methods will raise exceptions (except for optional nodes).\n\nFor sparse traversals, where only certain node types are of interest, use\nsubclass `SparseNodeVisitor` instead.  When (mostly or entirely) uniform\nprocessing is desired, subclass `GenericNodeVisitor`.\n\n.. [GoF95] Gamma, Helm, Johnson, Vlissides. *Design Patterns: Elements of\n   Reusable Object-Oriented Software*. Addison-Wesley, Reading, MA, USA,\n   1995.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "_ToctreeVisitor: ",
        "prefix_py": "_ToctreeVisitor="
    },
    "dispatch_departure": {
        "name": "dispatch_departure",
        "type": "function",
        "help": "Call self.\"``depart_`` + node class name\" with `node` as\nparameter.  If the ``depart_...`` method does not exist, call\nself.unknown_departure.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "dispatch_departure: ",
        "prefix_py": "dispatch_departure=()"
    },
    "dispatch_visit": {
        "name": "dispatch_visit",
        "type": "function",
        "help": "Call self.\"``visit_`` + node class name\" with `node` as\nparameter.  If the ``visit_...`` method does not exist, call\nself.unknown_visit.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "dispatch_visit: ",
        "prefix_py": "dispatch_visit=()"
    },
    "optional": {
        "name": "optional",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor"
        ],
        "prefix_kv": "optional: ",
        "prefix_py": "optional="
    },
    "push": {
        "name": "push",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor",
            "Context"
        ],
        "parametters": [
            "self",
            "tree"
        ],
        "prefix_kv": "push: ",
        "prefix_py": "push=()"
    },
    "unknown_departure": {
        "name": "unknown_departure",
        "type": "function",
        "help": "Called before exiting unknown `Node` types.\n\nRaise exception unless overridden.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "unknown_departure: ",
        "prefix_py": "unknown_departure=()"
    },
    "unknown_visit": {
        "name": "unknown_visit",
        "type": "function",
        "help": "Called when entering unknown `Node` types.\n\nRaise an exception unless overridden.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "_ToctreeVisitor",
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "unknown_visit: ",
        "prefix_py": "unknown_visit=()"
    },
    "_Visitor": {
        "name": "_Visitor",
        "type": "type",
        "import": "from kivy.uix.rst import _Visitor",
        "help": "\"Visitor\" pattern [GoF95]_ abstract superclass implementation for\ndocument tree traversals.\n\nEach node class has corresponding methods, doing nothing by\ndefault; override individual methods for specific and useful\nbehaviour.  The `dispatch_visit()` method is called by\n`Node.walk()` upon entering a node.  `Node.walkabout()` also calls\nthe `dispatch_departure()` method before exiting a node.\n\nThe dispatch methods call \"``visit_`` + node class name\" or\n\"``depart_`` + node class name\", resp.\n\nThis is a base class for visitors whose ``visit_...`` & ``depart_...``\nmethods must be implemented for *all* compulsory node types encountered\n(such as for `docutils.writers.Writer` subclasses).\nUnimplemented methods will raise exceptions (except for optional nodes).\n\nFor sparse traversals, where only certain node types are of interest, use\nsubclass `SparseNodeVisitor` instead.  When (mostly or entirely) uniform\nprocessing is desired, subclass `GenericNodeVisitor`.\n\n.. [GoF95] Gamma, Helm, Johnson, Vlissides. *Design Patterns: Elements of\n   Reusable Object-Oriented Software*. Addison-Wesley, Reading, MA, USA,\n   1995.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "_Visitor: ",
        "prefix_py": "_Visitor="
    },
    "brute_refs": {
        "name": "brute_refs",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "brute_refs: ",
        "prefix_py": "brute_refs=()"
    },
    "colorize": {
        "name": "colorize",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_Visitor"
        ],
        "parametters": [
            "self",
            "text",
            "name"
        ],
        "prefix_kv": "colorize: ",
        "prefix_py": "colorize=()"
    },
    "set_text": {
        "name": "set_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "_Visitor"
        ],
        "parametters": [
            "self",
            "node",
            "parent"
        ],
        "prefix_kv": "set_text: ",
        "prefix_py": "set_text=()"
    },
    "nodeclass": {
        "name": "nodeclass",
        "type": "type",
        "import": "from kivy.uix.rst import nodeclass",
        "help": "An element which directly contains text.\n\nIts children are all `Text` or `Inline` subclass nodes.  You can\ncheck whether an element's context is inline simply by checking whether\nits immediate parent is a `TextElement` instance (including subclasses).\nThis is handy for nodes like `image` that can appear both inline and as\nstandalone body elements.\n\nIf passing children to `__init__()`, make sure to set `text` to\n``''`` or some other suitable value.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "nodeclass: ",
        "prefix_py": "nodeclass="
    },
    "_document": {
        "name": "_document",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "_document: ",
        "prefix_py": "_document=()"
    },
    "_dom_node": {
        "name": "_dom_node",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "domroot"
        ],
        "prefix_kv": "_dom_node: ",
        "prefix_py": "_dom_node=()"
    },
    "_fast_findall": {
        "name": "_fast_findall",
        "type": "function",
        "help": "Return iterator that only supports instance checks.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "cls"
        ],
        "prefix_kv": "_fast_findall: ",
        "prefix_py": "_fast_findall=()"
    },
    "_superfast_findall": {
        "name": "_superfast_findall",
        "type": "function",
        "help": "Return iterator that doesn't check for a condition.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_superfast_findall: ",
        "prefix_py": "_superfast_findall=()"
    },
    "append_attr_list": {
        "name": "append_attr_list",
        "type": "function",
        "help": "For each element in values, if it does not exist in self[attr], append\nit.\n\nNOTE: Requires self[attr] and values to be sequence type and the\nformer should specifically be a list.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "values"
        ],
        "prefix_kv": "append_attr_list: ",
        "prefix_py": "append_attr_list=()"
    },
    "asdom": {
        "name": "asdom",
        "type": "function",
        "help": "Return a DOM **fragment** representation of this Node.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dom"
        ],
        "prefix_kv": "asdom: ",
        "prefix_py": "asdom=()"
    },
    "astext": {
        "name": "astext",
        "type": "function",
        "help": "Return a string representation of this Node.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "astext: ",
        "prefix_py": "astext=()"
    },
    "attlist": {
        "name": "attlist",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "attlist: ",
        "prefix_py": "attlist=()"
    },
    "basic_attributes": {
        "name": "basic_attributes",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "basic_attributes: ",
        "prefix_py": "basic_attributes="
    },
    "child_text_separator": {
        "name": "child_text_separator",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "child_text_separator: ''",
        "prefix_py": "child_text_separator=''"
    },
    "coerce_append_attr_list": {
        "name": "coerce_append_attr_list",
        "type": "function",
        "help": "First, convert both self[attr] and value to a non-string sequence\ntype; if either is not already a sequence, convert it to a list of one\nelement.  Then call append_attr_list.\n\nNOTE: self[attr] and value both must not be None.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value"
        ],
        "prefix_kv": "coerce_append_attr_list: ",
        "prefix_py": "coerce_append_attr_list=()"
    },
    "copy_attr_coerce": {
        "name": "copy_attr_coerce",
        "type": "function",
        "help": "If attr is an attribute of self and either self[attr] or value is a\nlist, convert all non-sequence values to a sequence of 1 element and\nthen concatenate the two sequence, setting the result to self[attr].\nIf both self[attr] and value are non-sequences and replace is True or\nself[attr] is None, replace self[attr] with value. Otherwise, do\nnothing.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value",
            "replace"
        ],
        "prefix_kv": "copy_attr_coerce: ",
        "prefix_py": "copy_attr_coerce=()"
    },
    "copy_attr_concatenate": {
        "name": "copy_attr_concatenate",
        "type": "function",
        "help": "If attr is an attribute of self and both self[attr] and value are\nlists, concatenate the two sequences, setting the result to\nself[attr].  If either self[attr] or value are non-sequences and\nreplace is True or self[attr] is None, replace self[attr] with value.\nOtherwise, do nothing.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value",
            "replace"
        ],
        "prefix_kv": "copy_attr_concatenate: ",
        "prefix_py": "copy_attr_concatenate=()"
    },
    "copy_attr_consistent": {
        "name": "copy_attr_consistent",
        "type": "function",
        "help": "If replace is True or self[attr] is None, replace self[attr] with\nvalue.  Otherwise, do nothing.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value",
            "replace"
        ],
        "prefix_kv": "copy_attr_consistent: ",
        "prefix_py": "copy_attr_consistent=()"
    },
    "copy_attr_convert": {
        "name": "copy_attr_convert",
        "type": "function",
        "help": "If attr is an attribute of self, set self[attr] to\n[self[attr], value], otherwise set self[attr] to value.\n\nNOTE: replace is not used by this function and is kept only for\n      compatibility with the other copy functions.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value",
            "replace"
        ],
        "prefix_kv": "copy_attr_convert: ",
        "prefix_py": "copy_attr_convert=()"
    },
    "deepcopy": {
        "name": "deepcopy",
        "type": "function",
        "help": "Return a deep copy of self (also copying children).",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "deepcopy: ",
        "prefix_py": "deepcopy=()"
    },
    "delattr": {
        "name": "delattr",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr"
        ],
        "prefix_kv": "delattr: ",
        "prefix_py": "delattr=()"
    },
    "emptytag": {
        "name": "emptytag",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "emptytag: ",
        "prefix_py": "emptytag=()"
    },
    "endtag": {
        "name": "endtag",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "endtag: ",
        "prefix_py": "endtag=()"
    },
    "findall": {
        "name": "findall",
        "type": "function",
        "help": "Return an iterator yielding nodes following `self`:\n\n* self (if `include_self` is true)\n* all descendants in tree traversal order (if `descend` is true)\n* the following siblings (if `siblings` is true) and their\n  descendants (if also `descend` is true)\n* the following siblings of the parent (if `ascend` is true) and\n  their descendants (if also `descend` is true), and so on.\n\nIf `condition` is not None, the iterator yields only nodes\nfor which ``condition(node)`` is true.  If `condition` is a\nnode class ``cls``, it is equivalent to a function consisting\nof ``return isinstance(node, cls)``.\n\nIf `ascend` is true, assume `siblings` to be true as well.\n\nIf the tree structure is modified during iteration, the result\nis undefined.\n\nFor example, given the following tree::\n\n    <paragraph>\n        <emphasis>      <--- emphasis.traverse() and\n            <strong>    <--- strong.traverse() are called.\n                Foo\n            Bar\n        <reference name=\"Baz\" refid=\"baz\">\n            Baz\n\nThen tuple(emphasis.traverse()) equals ::\n\n    (<emphasis>, <strong>, <#text: Foo>, <#text: Bar>)\n\nand list(strong.traverse(ascend=True) equals ::\n\n    [<strong>, <#text: Foo>, <#text: Bar>, <reference>, <#text: Baz>]",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "condition",
            "include_self",
            "descend",
            "siblings",
            "ascend"
        ],
        "prefix_kv": "findall: ",
        "prefix_py": "findall=()"
    },
    "first_child_matching_class": {
        "name": "first_child_matching_class",
        "type": "function",
        "help": "Return the index of the first child whose class exactly matches.\n\nParameters:\n\n- `childclass`: A `Node` subclass to search for, or a tuple of `Node`\n  classes. If a tuple, any of the classes may match.\n- `start`: Initial index to check.\n- `end`: Initial index to *not* check.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "childclass",
            "start",
            "end"
        ],
        "prefix_kv": "first_child_matching_class: ",
        "prefix_py": "first_child_matching_class=()"
    },
    "first_child_not_matching_class": {
        "name": "first_child_not_matching_class",
        "type": "function",
        "help": "Return the index of the first child whose class does *not* match.\n\nParameters:\n\n- `childclass`: A `Node` subclass to skip, or a tuple of `Node`\n  classes. If a tuple, none of the classes may match.\n- `start`: Initial index to check.\n- `end`: Initial index to *not* check.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "childclass",
            "start",
            "end"
        ],
        "prefix_kv": "first_child_not_matching_class: ",
        "prefix_py": "first_child_not_matching_class=()"
    },
    "get_language_code": {
        "name": "get_language_code",
        "type": "function",
        "help": "Return node's language tag.\n\nLook iteratively in self and parents for a class argument\nstarting with ``language-`` and return the remainder of it\n(which should be a `BCP49` language tag) or the `fallback`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "fallback"
        ],
        "prefix_kv": "get_language_code: ",
        "prefix_py": "get_language_code=()"
    },
    "has_key": {
        "name": "has_key",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr"
        ],
        "prefix_kv": "has_key: ",
        "prefix_py": "has_key=()"
    },
    "hasattr": {
        "name": "hasattr",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr"
        ],
        "prefix_kv": "hasattr: ",
        "prefix_py": "hasattr=()"
    },
    "is_not_default": {
        "name": "is_not_default",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "key"
        ],
        "prefix_kv": "is_not_default: ",
        "prefix_py": "is_not_default=()"
    },
    "is_not_known_attribute": {
        "name": "is_not_known_attribute",
        "type": "method",
        "help": "Returns True if and only if the given attribute is NOT recognized by\nthis class.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "is_not_known_attribute: ",
        "prefix_py": "is_not_known_attribute="
    },
    "is_not_list_attribute": {
        "name": "is_not_list_attribute",
        "type": "method",
        "help": "Returns True if and only if the given attribute is NOT one of the\nbasic list attributes defined for all Elements.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "is_not_list_attribute: ",
        "prefix_py": "is_not_list_attribute="
    },
    "known_attributes": {
        "name": "known_attributes",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "known_attributes: ",
        "prefix_py": "known_attributes="
    },
    "line": {
        "name": "line",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "line: ",
        "prefix_py": "line=()"
    },
    "list_attributes": {
        "name": "list_attributes",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "list_attributes: ",
        "prefix_py": "list_attributes="
    },
    "local_attributes": {
        "name": "local_attributes",
        "type": "tuple",
        "help": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "local_attributes: ",
        "prefix_py": "local_attributes="
    },
    "next_node": {
        "name": "next_node",
        "type": "function",
        "help": "Return the first node in the iterator returned by findall(),\nor None if the iterable is empty.\n\nParameter list is the same as of traverse.  Note that `include_self`\ndefaults to False, though.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "condition",
            "include_self",
            "descend",
            "siblings",
            "ascend"
        ],
        "prefix_kv": "next_node: ",
        "prefix_py": "next_node=()"
    },
    "non_default_attributes": {
        "name": "non_default_attributes",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "non_default_attributes: ",
        "prefix_py": "non_default_attributes=()"
    },
    "note_referenced_by": {
        "name": "note_referenced_by",
        "type": "function",
        "help": "Note that this Element has been referenced by its name\n`name` or id `id`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "name",
            "id"
        ],
        "prefix_kv": "note_referenced_by: ",
        "prefix_py": "note_referenced_by=()"
    },
    "pformat": {
        "name": "pformat",
        "type": "function",
        "help": "Return an indented pseudo-XML representation, for test purposes.\n\nOverride in subclasses.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "indent",
            "level"
        ],
        "prefix_kv": "pformat: ",
        "prefix_py": "pformat=()"
    },
    "previous_sibling": {
        "name": "previous_sibling",
        "type": "function",
        "help": "Return preceding sibling node or ``None``.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "previous_sibling: ",
        "prefix_py": "previous_sibling=()"
    },
    "replace_attr": {
        "name": "replace_attr",
        "type": "function",
        "help": "If self[attr] does not exist or force is True or omitted, set\nself[attr] to value, otherwise do nothing.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "attr",
            "value",
            "force"
        ],
        "prefix_kv": "replace_attr: ",
        "prefix_py": "replace_attr=()"
    },
    "replace_self": {
        "name": "replace_self",
        "type": "function",
        "help": "Replace `self` node with `new`, where `new` is a node or a\nlist of nodes.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "new"
        ],
        "prefix_kv": "replace_self: ",
        "prefix_py": "replace_self=()"
    },
    "set_class": {
        "name": "set_class",
        "type": "function",
        "help": "Add a new class to the \"classes\" attribute.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "name"
        ],
        "prefix_kv": "set_class: ",
        "prefix_py": "set_class=()"
    },
    "setup_child": {
        "name": "setup_child",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "child"
        ],
        "prefix_kv": "setup_child: ",
        "prefix_py": "setup_child=()"
    },
    "shortrepr": {
        "name": "shortrepr",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "shortrepr: ",
        "prefix_py": "shortrepr=()"
    },
    "starttag": {
        "name": "starttag",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "quoteattr"
        ],
        "prefix_kv": "starttag: ",
        "prefix_py": "starttag=()"
    },
    "tagname": {
        "name": "tagname",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "prefix_kv": "tagname: ",
        "prefix_py": "tagname=()"
    },
    "traverse": {
        "name": "traverse",
        "type": "function",
        "help": "Return list of nodes following `self`.\n\nFor looping, Node.findall() is faster and more memory efficient.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "condition",
            "include_self",
            "descend",
            "siblings",
            "ascend"
        ],
        "prefix_kv": "traverse: ",
        "prefix_py": "traverse=()"
    },
    "update_all_atts": {
        "name": "update_all_atts",
        "type": "function",
        "help": "Updates all attributes from node or dictionary `dict_`.\n\nAppends the basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') and then, for all other attributes in\ndict_, updates the same attribute in self.  When attributes with the\nsame identifier appear in both self and dict_, the two values are\nmerged based on the value of update_fun.  Generally, when replace is\nTrue, the values in self are replaced or merged with the values in\ndict_; otherwise, the values in self may be preserved or merged.  When\nand_source is True, the 'source' attribute is included in the copy.\n\nNOTE: When replace is False, and self contains a 'source' attribute,\n      'source' is not replaced even when dict_ has a 'source'\n      attribute, though it may still be merged into a list depending\n      on the value of update_fun.\nNOTE: It is easier to call the update-specific methods then to pass\n      the update_fun method to this function.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_",
            "update_fun",
            "replace",
            "and_source"
        ],
        "prefix_kv": "update_all_atts: ",
        "prefix_py": "update_all_atts=()"
    },
    "update_all_atts_coercion": {
        "name": "update_all_atts_coercion",
        "type": "function",
        "help": "Updates all attributes from node or dictionary `dict_`.\n\nAppends the basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') and then, for all other attributes in\ndict_, updates the same attribute in self.  When attributes with the\nsame identifier appear in both self and dict_ whose values are both\nnot lists and replace is True, the values in self are replaced with\nthe values in dict_; if either of the values from self and dict_ for\nthe given identifier are of list type, then first any non-lists are\nconverted to 1-element lists and then the two lists are concatenated\nand the result stored in self; otherwise, the values in self are\npreserved.  When and_source is True, the 'source' attribute is\nincluded in the copy.\n\nNOTE: When replace is False, and self contains a 'source' attribute,\n      'source' is not replaced even when dict_ has a 'source'\n      attribute, though it may still be merged into a list depending\n      on the value of update_fun.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_",
            "replace",
            "and_source"
        ],
        "prefix_kv": "update_all_atts_coercion: ",
        "prefix_py": "update_all_atts_coercion=()"
    },
    "update_all_atts_concatenating": {
        "name": "update_all_atts_concatenating",
        "type": "function",
        "help": "Updates all attributes from node or dictionary `dict_`.\n\nAppends the basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') and then, for all other attributes in\ndict_, updates the same attribute in self.  When attributes with the\nsame identifier appear in both self and dict_ whose values aren't each\nlists and replace is True, the values in self are replaced with the\nvalues in dict_; if the values from self and dict_ for the given\nidentifier are both of list type, then the two lists are concatenated\nand the result stored in self; otherwise, the values in self are\npreserved.  When and_source is True, the 'source' attribute is\nincluded in the copy.\n\nNOTE: When replace is False, and self contains a 'source' attribute,\n      'source' is not replaced even when dict_ has a 'source'\n      attribute, though it may still be merged into a list depending\n      on the value of update_fun.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_",
            "replace",
            "and_source"
        ],
        "prefix_kv": "update_all_atts_concatenating: ",
        "prefix_py": "update_all_atts_concatenating=()"
    },
    "update_all_atts_consistantly": {
        "name": "update_all_atts_consistantly",
        "type": "function",
        "help": "Updates all attributes from node or dictionary `dict_`.\n\nAppends the basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') and then, for all other attributes in\ndict_, updates the same attribute in self.  When attributes with the\nsame identifier appear in both self and dict_ and replace is True, the\nvalues in self are replaced with the values in dict_; otherwise, the\nvalues in self are preserved.  When and_source is True, the 'source'\nattribute is included in the copy.\n\nNOTE: When replace is False, and self contains a 'source' attribute,\n      'source' is not replaced even when dict_ has a 'source'\n      attribute, though it may still be merged into a list depending\n      on the value of update_fun.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_",
            "replace",
            "and_source"
        ],
        "prefix_kv": "update_all_atts_consistantly: ",
        "prefix_py": "update_all_atts_consistantly=()"
    },
    "update_all_atts_convert": {
        "name": "update_all_atts_convert",
        "type": "function",
        "help": "Updates all attributes from node or dictionary `dict_`.\n\nAppends the basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') and then, for all other attributes in\ndict_, updates the same attribute in self.  When attributes with the\nsame identifier appear in both self and dict_ then first any non-lists\nare converted to 1-element lists and then the two lists are\nconcatenated and the result stored in self; otherwise, the values in\nself are preserved.  When and_source is True, the 'source' attribute\nis included in the copy.\n\nNOTE: When replace is False, and self contains a 'source' attribute,\n      'source' is not replaced even when dict_ has a 'source'\n      attribute, though it may still be merged into a list depending\n      on the value of update_fun.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_",
            "and_source"
        ],
        "prefix_kv": "update_all_atts_convert: ",
        "prefix_py": "update_all_atts_convert=()"
    },
    "update_basic_atts": {
        "name": "update_basic_atts",
        "type": "function",
        "help": "Update basic attributes ('ids', 'names', 'classes',\n'dupnames', but not 'source') from node or dictionary `dict_`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "dict_"
        ],
        "prefix_kv": "update_basic_atts: ",
        "prefix_py": "update_basic_atts=()"
    },
    "walkabout": {
        "name": "walkabout",
        "type": "function",
        "help": "Perform a tree traversal similarly to `Node.walk()` (which\nsee), except also call the `dispatch_departure()` method\nbefore exiting each node.\n\nParameter `visitor`: A `NodeVisitor` object, containing a\n``visit`` and ``depart`` implementation for each `Node`\nsubclass encountered.\n\nReturn true if we should stop the traversal.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "nodeclass",
            "role_doc",
            "role_video"
        ],
        "parametters": [
            "self",
            "visitor"
        ],
        "prefix_kv": "walkabout: ",
        "prefix_py": "walkabout=()"
    },
    "role_doc": {
        "name": "role_doc",
        "type": "type",
        "import": "from kivy.uix.rst import role_doc",
        "help": "An element which directly contains text.\n\nIts children are all `Text` or `Inline` subclass nodes.  You can\ncheck whether an element's context is inline simply by checking whether\nits immediate parent is a `TextElement` instance (including subclasses).\nThis is handy for nodes like `image` that can appear both inline and as\nstandalone body elements.\n\nIf passing children to `__init__()`, make sure to set `text` to\n``''`` or some other suitable value.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "role_doc: ",
        "prefix_py": "role_doc="
    },
    "role_video": {
        "name": "role_video",
        "type": "type",
        "import": "from kivy.uix.rst import role_video",
        "help": "An element which directly contains text.\n\nIts children are all `Text` or `Inline` subclass nodes.  You can\ncheck whether an element's context is inline simply by checking whether\nits immediate parent is a `TextElement` instance (including subclasses).\nThis is handy for nodes like `image` that can appear both inline and as\nstandalone body elements.\n\nIf passing children to `__init__()`, make sure to set `text` to\n``''`` or some other suitable value.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "role_video: ",
        "prefix_py": "role_video="
    },
    "Context": {
        "name": "Context",
        "type": "type",
        "import": "from kivy.uix.sandbox import Context",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Context: ",
        "prefix_py": "Context="
    },
    "ExceptionManagerBase": {
        "name": "ExceptionManagerBase",
        "type": "type",
        "import": "from kivy.uix.sandbox import ExceptionManagerBase",
        "help": "ExceptionManager manages exceptions handlers.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ExceptionManagerBase: ",
        "prefix_py": "ExceptionManagerBase="
    },
    "PASS": {
        "name": "PASS",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ExceptionManagerBase",
            "SandboxExceptionManager"
        ],
        "prefix_kv": "PASS: ",
        "prefix_py": "PASS="
    },
    "RAISE": {
        "name": "RAISE",
        "type": "int",
        "help": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.__int__().  For floating point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ExceptionManagerBase",
            "SandboxExceptionManager"
        ],
        "prefix_kv": "RAISE: ",
        "prefix_py": "RAISE="
    },
    "add_handler": {
        "name": "add_handler",
        "type": "function",
        "help": "Add a new exception handler to the stack.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ExceptionManagerBase",
            "SandboxExceptionManager"
        ],
        "parametters": [
            "self",
            "cls"
        ],
        "prefix_kv": "add_handler: ",
        "prefix_py": "add_handler=()"
    },
    "handle_exception": {
        "name": "handle_exception",
        "type": "function",
        "help": "Called when an exception occurred in the :func:`runTouchApp`\nmain loop.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ExceptionManagerBase",
            "SandboxExceptionManager"
        ],
        "parametters": [
            "self",
            "inst"
        ],
        "prefix_kv": "handle_exception: ",
        "prefix_py": "handle_exception=()"
    },
    "remove_handler": {
        "name": "remove_handler",
        "type": "function",
        "help": "Remove the exception handler from the stack.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ExceptionManagerBase",
            "SandboxExceptionManager"
        ],
        "parametters": [
            "self",
            "cls"
        ],
        "prefix_kv": "remove_handler: ",
        "prefix_py": "remove_handler=()"
    },
    "Sandbox": {
        "name": "Sandbox",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.sandbox import Sandbox",
        "help": "Sandbox widget, used to trap all the exceptions raised by child\nwidgets.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Sandbox:\n    ",
        "prefix_py": "Sandbox()"
    },
    "_call_draw": {
        "name": "_call_draw",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Sandbox"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_call_draw: ",
        "prefix_py": "_call_draw=()"
    },
    "_clock_sandbox": {
        "name": "_clock_sandbox",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Sandbox"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_clock_sandbox: ",
        "prefix_py": "_clock_sandbox=()"
    },
    "_clock_sandbox_draw": {
        "name": "_clock_sandbox_draw",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Sandbox"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_clock_sandbox_draw: ",
        "prefix_py": "_clock_sandbox_draw=()"
    },
    "on_context_created": {
        "name": "on_context_created",
        "type": "function",
        "help": "Override this method in order to load your kv file or do anything\nelse with the newly created context.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Sandbox"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_context_created: ",
        "prefix_py": "on_context_created=()"
    },
    "on_exception": {
        "name": "on_exception",
        "type": "function",
        "help": "Override this method in order to catch all the exceptions from\nchildren.\n\nIf you return True, it will not reraise the exception.\nIf you return False, the exception will be raised to the parent.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Sandbox"
        ],
        "parametters": [
            "self",
            "exception",
            "_traceback"
        ],
        "prefix_kv": "on_exception: ",
        "prefix_py": "on_exception=()"
    },
    "SandboxContent": {
        "name": "SandboxContent",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.sandbox import SandboxContent",
        "help": "RelativeLayout class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SandboxContent:\n    ",
        "prefix_py": "SandboxContent()"
    },
    "SandboxExceptionManager": {
        "name": "SandboxExceptionManager",
        "type": "type",
        "import": "from kivy.uix.sandbox import SandboxExceptionManager",
        "help": "ExceptionManager manages exceptions handlers.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SandboxExceptionManager: ",
        "prefix_py": "SandboxExceptionManager="
    },
    "Matrix": {
        "name": "Matrix",
        "type": "type",
        "import": "from kivy.uix.scatter import Matrix",
        "help": "Matrix()\n\nOptimized matrix class for OpenGL::\n\n    >>> from kivy.graphics.transformation import Matrix\n    >>> m = Matrix()\n    >>> print(m)\n    [[ 1.000000 0.000000 0.000000 0.000000 ]\n    [ 0.000000 1.000000 0.000000 0.000000 ]\n    [ 0.000000 0.000000 1.000000 0.000000 ]\n    [ 0.000000 0.000000 0.000000 1.000000 ]]\n\n    [ 0   1   2   3]\n    [ 4   5   6   7]\n    [ 8   9  10  11]\n    [ 12  13  14  15]",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Matrix: ",
        "prefix_py": "Matrix="
    },
    "inverse": {
        "name": "inverse",
        "type": "cython_function_or_method",
        "help": "Matrix.inverse(self) -> Matrix\nReturn the inverse of the matrix as a new Matrix.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "inverse",
        "prefix_py": "inverse."
    },
    "look_at": {
        "name": "look_at",
        "type": "cython_function_or_method",
        "help": "Matrix.look_at(self, double eyex, double eyey, double eyez, double centerx, double centery, double centerz, double upx, double upy, double upz)\nReturns a new lookat Matrix (similar to\n        `gluLookAt <http://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml>`_).\n\n        :Parameters:\n            `eyex`: float\n                Eyes X co-ordinate\n            `eyey`: float\n                Eyes Y co-ordinate\n            `eyez`: float\n                Eyes Z co-ordinate\n            `centerx`: float\n                The X position of the reference point\n            `centery`: float\n                The Y position of the reference point\n            `centerz`: float\n                The Z position of the reference point\n            `upx`: float\n                The X value up vector.\n            `upy`: float\n                The Y value up vector.\n            `upz`: float\n                The Z value up vector.\n\n        .. versionadded:: 1.6.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "look_at",
        "prefix_py": "look_at."
    },
    "multiply": {
        "name": "multiply",
        "type": "cython_function_or_method",
        "help": "Matrix.multiply(mb, Matrix ma) -> Matrix\nMultiply the given matrix with self (from the left)\n        i.e. we premultiply the given matrix by the current matrix and return\n        the result (not inplace)::\n\n            m.multiply(n) -> n * m\n\n        :Parameters:\n            `ma`: Matrix\n                The matrix to multiply by\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "multiply",
        "prefix_py": "multiply."
    },
    "normal_matrix": {
        "name": "normal_matrix",
        "type": "cython_function_or_method",
        "help": "Matrix.normal_matrix(self) -> Matrix\nComputes the normal matrix, which is the inverse transpose\n        of the top left 3x3 modelview matrix used to transform normals\n        into eye/camera space.\n\n        .. versionadded:: 1.6.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "normal_matrix",
        "prefix_py": "normal_matrix."
    },
    "perspective": {
        "name": "perspective",
        "type": "cython_function_or_method",
        "help": "Matrix.perspective(self, double fovy, double aspect, double zNear, double zFar) -> Matrix\nCreates a perspective matrix (inplace).\n\n        :Parameters:\n            `fovy`: float\n                \"Field Of View\" angle\n            `aspect`: float\n                Aspect ratio\n            `zNear`: float\n                Near clipping plane\n            `zFar`: float\n                Far clippin plane\n\n        .. versionadded:: 1.6.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "perspective",
        "prefix_py": "perspective."
    },
    "project": {
        "name": "project",
        "type": "cython_function_or_method",
        "help": "Matrix.project(self, double objx, double objy, double objz, Matrix model, Matrix proj, double vx, double vy, double vw, double vh)\nProject a point from 3d space into a 2d viewport.\n\n        :Parameters:\n            `objx`: float\n                Points X co-ordinate\n            `objy`: float\n                Points Y co-ordinate\n            `objz`: float\n                Points Z co-ordinate\n            `model`: Matrix\n                The model matrix\n            `proj`: Matrix\n                The projection matrix\n            `vx`: float\n                Viewports X co-ordinate\n            `vy`: float\n                Viewports y co-ordinate\n            `vw`: float\n                Viewports width\n            `vh`: float\n                Viewports height\n\n        .. versionadded:: 1.7.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "project",
        "prefix_py": "project."
    },
    "tolist": {
        "name": "tolist",
        "type": "cython_function_or_method",
        "help": "Matrix.tolist(self)\nRetrieve the value of the current matrix in numpy format.\n        for example m.tolist() will return::\n\n            [[1.000000, 0.000000, 0.000000, 0.000000],\n            [0.000000, 1.000000, 0.000000, 0.000000],\n            [0.000000, 0.000000, 1.000000, 0.000000],\n            [0.000000, 0.000000, 0.000000, 1.000000]]\n\n        you can use this format to plug the result straight into numpy\n        in this way numpy.array(m.tolist())\n\n        .. versionadded:: 1.9.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "tolist",
        "prefix_py": "tolist."
    },
    "transform_point": {
        "name": "transform_point",
        "type": "cython_function_or_method",
        "help": "Matrix.transform_point(self, double x, double y, double z, t=None) -> tuple\nTransforms the point by the matrix and returns the transformed point\n        as a ``(x, y, z)`` tuple. If the point is a vector ``v``, the returned\n        values is ``v2 = matrix * v``.\n        \n        If ``t`` is provided, it multiplies it with the last column of the matrix\n        and returns the transformed ``(x, y, z, t)``.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "transform_point",
        "prefix_py": "transform_point."
    },
    "transpose": {
        "name": "transpose",
        "type": "cython_function_or_method",
        "help": "Matrix.transpose(self) -> Matrix\nReturn the transposed matrix as a new Matrix.\n\n        .. versionadded:: 1.6.0\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "transpose",
        "prefix_py": "transpose."
    },
    "view_clip": {
        "name": "view_clip",
        "type": "cython_function_or_method",
        "help": "Matrix.view_clip(self, double left, double right, double bottom, double top, double near, double far, int perspective) -> Matrix\nCreate a clip matrix (inplace).\n\n        :Parameters:\n            `left`: float\n                Co-ordinate\n            `right`: float\n                Co-ordinate\n            `bottom`: float\n                Co-ordinate\n            `top`: float\n                Co-ordinate\n            `near`: float\n                Co-ordinate\n            `far`: float\n                Co-ordinate\n            `perpective`: int\n                Co-ordinate\n\n        .. versionchanged:: 1.6.0\n            Enable support for perspective parameter.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Matrix"
        ],
        "prefix_kv": "view_clip",
        "prefix_py": "view_clip."
    },
    "ScatterPlane": {
        "name": "ScatterPlane",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.scatter import ScatterPlane",
        "help": "This is essentially an unbounded Scatter widget. It's a convenience\nclass to make it easier to handle infinite planes.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScatterPlane:\n    ",
        "prefix_py": "ScatterPlane()"
    },
    "ScatterLayout": {
        "name": "ScatterLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.scatterlayout import ScatterLayout",
        "help": "ScatterLayout class, see module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScatterLayout:\n    ",
        "prefix_py": "ScatterLayout()"
    },
    "update_size": {
        "name": "update_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ScatterLayout"
        ],
        "parametters": [
            "self",
            "instance",
            "size"
        ],
        "prefix_kv": "update_size: ",
        "prefix_py": "update_size=()"
    },
    "ScatterPlaneLayout": {
        "name": "ScatterPlaneLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.scatterlayout import ScatterPlaneLayout",
        "help": "ScatterPlaneLayout class, see module documentation for more information.\n\nSimilar to ScatterLayout, but based on ScatterPlane - so the input is not\nbounded.\n\n.. versionadded:: 1.9.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScatterPlaneLayout:\n    ",
        "prefix_py": "ScatterPlaneLayout()"
    },
    "AnimationTransition": {
        "name": "AnimationTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import AnimationTransition",
        "help": "Collection of animation functions to be used with the Animation object.\nEasing Functions ported to Kivy from the Clutter Project\nhttps://developer.gnome.org/clutter/stable/ClutterAlpha.html\n\nThe `progress` parameter in each animation function is in the range 0-1.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "AnimationTransition: ",
        "prefix_py": "AnimationTransition="
    },
    "_in_bounce_internal": {
        "name": "_in_bounce_internal",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "t",
            "d"
        ],
        "prefix_kv": "_in_bounce_internal: ",
        "prefix_py": "_in_bounce_internal=()"
    },
    "_out_bounce_internal": {
        "name": "_out_bounce_internal",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "t",
            "d"
        ],
        "prefix_kv": "_out_bounce_internal: ",
        "prefix_py": "_out_bounce_internal=()"
    },
    "in_back": {
        "name": "in_back",
        "type": "function",
        "help": ".. image:: images/anim_in_back.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_back: ",
        "prefix_py": "in_back=()"
    },
    "in_bounce": {
        "name": "in_bounce",
        "type": "function",
        "help": ".. image:: images/anim_in_bounce.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_bounce: ",
        "prefix_py": "in_bounce=()"
    },
    "in_circ": {
        "name": "in_circ",
        "type": "function",
        "help": ".. image:: images/anim_in_circ.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_circ: ",
        "prefix_py": "in_circ=()"
    },
    "in_cubic": {
        "name": "in_cubic",
        "type": "function",
        "help": ".. image:: images/anim_in_cubic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_cubic: ",
        "prefix_py": "in_cubic=()"
    },
    "in_elastic": {
        "name": "in_elastic",
        "type": "function",
        "help": ".. image:: images/anim_in_elastic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_elastic: ",
        "prefix_py": "in_elastic=()"
    },
    "in_expo": {
        "name": "in_expo",
        "type": "function",
        "help": ".. image:: images/anim_in_expo.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_expo: ",
        "prefix_py": "in_expo=()"
    },
    "in_out_back": {
        "name": "in_out_back",
        "type": "function",
        "help": ".. image:: images/anim_in_out_back.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_back: ",
        "prefix_py": "in_out_back=()"
    },
    "in_out_bounce": {
        "name": "in_out_bounce",
        "type": "function",
        "help": ".. image:: images/anim_in_out_bounce.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_bounce: ",
        "prefix_py": "in_out_bounce=()"
    },
    "in_out_circ": {
        "name": "in_out_circ",
        "type": "function",
        "help": ".. image:: images/anim_in_out_circ.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_circ: ",
        "prefix_py": "in_out_circ=()"
    },
    "in_out_cubic": {
        "name": "in_out_cubic",
        "type": "function",
        "help": ".. image:: images/anim_in_out_cubic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_cubic: ",
        "prefix_py": "in_out_cubic=()"
    },
    "in_out_elastic": {
        "name": "in_out_elastic",
        "type": "function",
        "help": ".. image:: images/anim_in_out_elastic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_elastic: ",
        "prefix_py": "in_out_elastic=()"
    },
    "in_out_expo": {
        "name": "in_out_expo",
        "type": "function",
        "help": ".. image:: images/anim_in_out_expo.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_expo: ",
        "prefix_py": "in_out_expo=()"
    },
    "in_out_quad": {
        "name": "in_out_quad",
        "type": "function",
        "help": ".. image:: images/anim_in_out_quad.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_quad: ",
        "prefix_py": "in_out_quad=()"
    },
    "in_out_quart": {
        "name": "in_out_quart",
        "type": "function",
        "help": ".. image:: images/anim_in_out_quart.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_quart: ",
        "prefix_py": "in_out_quart=()"
    },
    "in_out_quint": {
        "name": "in_out_quint",
        "type": "function",
        "help": ".. image:: images/anim_in_out_quint.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_quint: ",
        "prefix_py": "in_out_quint=()"
    },
    "in_out_sine": {
        "name": "in_out_sine",
        "type": "function",
        "help": ".. image:: images/anim_in_out_sine.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_out_sine: ",
        "prefix_py": "in_out_sine=()"
    },
    "in_quad": {
        "name": "in_quad",
        "type": "function",
        "help": ".. image:: images/anim_in_quad.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_quad: ",
        "prefix_py": "in_quad=()"
    },
    "in_quart": {
        "name": "in_quart",
        "type": "function",
        "help": ".. image:: images/anim_in_quart.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_quart: ",
        "prefix_py": "in_quart=()"
    },
    "in_quint": {
        "name": "in_quint",
        "type": "function",
        "help": ".. image:: images/anim_in_quint.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_quint: ",
        "prefix_py": "in_quint=()"
    },
    "in_sine": {
        "name": "in_sine",
        "type": "function",
        "help": ".. image:: images/anim_in_sine.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "in_sine: ",
        "prefix_py": "in_sine=()"
    },
    "linear": {
        "name": "linear",
        "type": "function",
        "help": ".. image:: images/anim_linear.png",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "linear: ",
        "prefix_py": "linear=()"
    },
    "out_back": {
        "name": "out_back",
        "type": "function",
        "help": ".. image:: images/anim_out_back.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_back: ",
        "prefix_py": "out_back=()"
    },
    "out_bounce": {
        "name": "out_bounce",
        "type": "function",
        "help": ".. image:: images/anim_out_bounce.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_bounce: ",
        "prefix_py": "out_bounce=()"
    },
    "out_circ": {
        "name": "out_circ",
        "type": "function",
        "help": ".. image:: images/anim_out_circ.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_circ: ",
        "prefix_py": "out_circ=()"
    },
    "out_cubic": {
        "name": "out_cubic",
        "type": "function",
        "help": ".. image:: images/anim_out_cubic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_cubic: ",
        "prefix_py": "out_cubic=()"
    },
    "out_elastic": {
        "name": "out_elastic",
        "type": "function",
        "help": ".. image:: images/anim_out_elastic.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_elastic: ",
        "prefix_py": "out_elastic=()"
    },
    "out_expo": {
        "name": "out_expo",
        "type": "function",
        "help": ".. image:: images/anim_out_expo.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_expo: ",
        "prefix_py": "out_expo=()"
    },
    "out_quad": {
        "name": "out_quad",
        "type": "function",
        "help": ".. image:: images/anim_out_quad.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_quad: ",
        "prefix_py": "out_quad=()"
    },
    "out_quart": {
        "name": "out_quart",
        "type": "function",
        "help": ".. image:: images/anim_out_quart.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_quart: ",
        "prefix_py": "out_quart=()"
    },
    "out_quint": {
        "name": "out_quint",
        "type": "function",
        "help": ".. image:: images/anim_out_quint.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_quint: ",
        "prefix_py": "out_quint=()"
    },
    "out_sine": {
        "name": "out_sine",
        "type": "function",
        "help": ".. image:: images/anim_out_sine.png\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "AnimationTransition"
        ],
        "parametters": [
            "progress"
        ],
        "prefix_kv": "out_sine: ",
        "prefix_py": "out_sine=()"
    },
    "BindTexture": {
        "name": "BindTexture",
        "type": "type",
        "import": "from kivy.uix.screenmanager import BindTexture",
        "help": "BindTexture(**kwargs)\nBindTexture Graphic instruction.\n    The BindTexture Instruction will bind a texture and enable\n    GL_TEXTURE_2D for subsequent drawing.\n\n    :Parameters:\n        `texture`: Texture\n            Specifies the texture to bind to the given index.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BindTexture: ",
        "prefix_py": "BindTexture="
    },
    "Callback": {
        "name": "Callback",
        "type": "type",
        "import": "from kivy.uix.screenmanager import Callback",
        "help": "Callback(callback=None, **kwargs)\n.. versionadded:: 1.0.4\n\n    A Callback is an instruction that will be called when the drawing\n    operation is performed. When adding instructions to a canvas, you can do\n    this::\n\n        with self.canvas:\n            Color(1, 1, 1)\n            Rectangle(pos=self.pos, size=self.size)\n            Callback(self.my_callback)\n\n    The definition of the callback must be::\n\n        def my_callback(self, instr):\n            print('I have been called!')\n\n    .. warning::\n\n        Note that if you perform many and/or costly calls to callbacks, you\n        might potentially slow down the rendering performance significantly.\n\n    The updating of your canvas does not occur until something new happens.\n    From your callback, you can ask for an update::\n\n        with self.canvas:\n            self.cb = Callback(self.my_callback)\n        # then later in the code\n        self.cb.ask_update()\n\n    If you use the Callback class to call rendering methods of another\n    toolkit, you will have issues with the OpenGL context. The OpenGL state may\n    have been manipulated by the other toolkit, and as soon as program flow\n    returns to Kivy, it will just break. You can have glitches, crashes, black\n    holes might occur, etc.\n    To avoid that, you can activate the :attr:`reset_context` option. It will\n    reset the OpenGL context state to make Kivy's rendering correct after the\n    call to your callback.\n\n    .. warning::\n\n        The :attr:`reset_context` is not a full OpenGL reset. If you have issues\n        regarding that, please contact us.\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Callback: ",
        "prefix_py": "Callback="
    },
    "callback": {
        "name": "callback",
        "type": "getset_descriptor",
        "help": "Property for getting/setting func.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Callback",
            "VKeyboard"
        ],
        "prefix_kv": "callback: ",
        "prefix_py": "callback="
    },
    "reset_context": {
        "name": "reset_context",
        "type": "getset_descriptor",
        "help": "Set this to True if you want to reset the OpenGL context for Kivy\nafter the callback has been called.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Callback"
        ],
        "prefix_kv": "reset_context: ",
        "prefix_py": "reset_context="
    },
    "CardTransition": {
        "name": "CardTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import CardTransition",
        "help": "Card transition that looks similar to Android 4.x application drawer\ninterface animation.\n\nIt supports 4 directions like SlideTransition: left, right, up and down,\nand two modes, pop and push. If push mode is activated, the previous\nscreen does not move, and the new one slides in from the given direction.\nIf the pop mode is activated, the previous screen slides out, when the new\nscreen is already on the position of the ScreenManager.\n\n.. versionadded:: 1.10",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CardTransition: ",
        "prefix_py": "CardTransition="
    },
    "_on_complete": {
        "name": "_on_complete",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_on_complete: ",
        "prefix_py": "_on_complete=()"
    },
    "_on_progress": {
        "name": "_on_progress",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_on_progress: ",
        "prefix_py": "_on_progress=()"
    },
    "add_screen": {
        "name": "add_screen",
        "type": "function",
        "help": "(internal) Used to add a screen to the :class:`ScreenManager`.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "screen"
        ],
        "prefix_kv": "add_screen: ",
        "prefix_py": "add_screen=()"
    },
    "is_active": {
        "name": "is_active",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "prefix_kv": "is_active: True",
        "prefix_py": "is_active=True"
    },
    "remove_screen": {
        "name": "remove_screen",
        "type": "function",
        "help": "(internal) Used to remove a screen from the :class:`ScreenManager`.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "screen"
        ],
        "prefix_kv": "remove_screen: ",
        "prefix_py": "remove_screen=()"
    },
    "screen_in": {
        "name": "screen_in",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "prefix_kv": "screen_in: ",
        "prefix_py": "screen_in="
    },
    "screen_out": {
        "name": "screen_out",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CardTransition",
            "FadeTransition",
            "FallOutTransition",
            "NoTransition",
            "RiseInTransition",
            "ShaderTransition",
            "SlideTransition",
            "SwapTransition",
            "TransitionBase",
            "WipeTransition"
        ],
        "prefix_kv": "screen_out: ",
        "prefix_py": "screen_out="
    },
    "FadeTransition": {
        "name": "FadeTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import FadeTransition",
        "help": "Fade transition, based on a fragment Shader.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FadeTransition: ",
        "prefix_py": "FadeTransition="
    },
    "FADE_TRANSITION_FS": {
        "name": "FADE_TRANSITION_FS",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FadeTransition"
        ],
        "prefix_kv": "FADE_TRANSITION_FS: ''",
        "prefix_py": "FADE_TRANSITION_FS=''"
    },
    "_remove_out_canvas": {
        "name": "_remove_out_canvas",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FadeTransition",
            "FallOutTransition",
            "RiseInTransition",
            "ShaderTransition",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_remove_out_canvas: ",
        "prefix_py": "_remove_out_canvas=()"
    },
    "clearcolor": {
        "name": "clearcolor",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FadeTransition",
            "FallOutTransition",
            "RiseInTransition",
            "ShaderTransition",
            "WipeTransition"
        ],
        "prefix_kv": "clearcolor: ",
        "prefix_py": "clearcolor=()"
    },
    "fs": {
        "name": "fs",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FadeTransition",
            "FallOutTransition",
            "RiseInTransition",
            "ShaderTransition",
            "WipeTransition"
        ],
        "prefix_kv": "fs: ''",
        "prefix_py": "fs=''"
    },
    "make_screen_fbo": {
        "name": "make_screen_fbo",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "FadeTransition",
            "FallOutTransition",
            "RiseInTransition",
            "ShaderTransition",
            "WipeTransition"
        ],
        "parametters": [
            "self",
            "screen"
        ],
        "prefix_kv": "make_screen_fbo: ",
        "prefix_py": "make_screen_fbo=()"
    },
    "vs": {
        "name": "vs",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FadeTransition",
            "FallOutTransition",
            "RiseInTransition",
            "ShaderTransition",
            "WipeTransition"
        ],
        "prefix_kv": "vs: ''",
        "prefix_py": "vs=''"
    },
    "FallOutTransition": {
        "name": "FallOutTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import FallOutTransition",
        "help": "Transition where the new screen 'falls' from the screen centre,\nbecoming smaller and more transparent until it disappears, and\nrevealing the new screen behind it. Mimics the popular/standard\nAndroid transition.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "FallOutTransition: ",
        "prefix_py": "FallOutTransition="
    },
    "FALLOUT_TRANSITION_FS": {
        "name": "FALLOUT_TRANSITION_FS",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "FallOutTransition"
        ],
        "prefix_kv": "FALLOUT_TRANSITION_FS: ''",
        "prefix_py": "FALLOUT_TRANSITION_FS=''"
    },
    "NoTransition": {
        "name": "NoTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import NoTransition",
        "help": "No transition, instantly switches to the next screen with no delay or\nanimation.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "NoTransition: ",
        "prefix_py": "NoTransition="
    },
    "RiseInTransition": {
        "name": "RiseInTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import RiseInTransition",
        "help": "Transition where the new screen rises from the screen centre,\nbecoming larger and changing from transparent to opaque until it\nfills the screen. Mimics the popular/standard Android transition.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "RiseInTransition: ",
        "prefix_py": "RiseInTransition="
    },
    "RISEIN_TRANSITION_FS": {
        "name": "RISEIN_TRANSITION_FS",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "RiseInTransition"
        ],
        "prefix_kv": "RISEIN_TRANSITION_FS: ''",
        "prefix_py": "RISEIN_TRANSITION_FS=''"
    },
    "Scale": {
        "name": "Scale",
        "type": "type",
        "import": "from kivy.uix.screenmanager import Scale",
        "help": "Scale(*args, **kwargs)\nInstruction to create a non uniform scale transformation.\n\n    Create using three arguments::\n\n       Scale(x, y, z)   # scale the axes independently\n\n    .. versionchanged:: 2.3.0\n        Allowed kwargs to be used to supply x, y and z.\n        Removed depreciated Scale(s) in favour of Scale(x, y, z).\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Scale: ",
        "prefix_py": "Scale="
    },
    "origin": {
        "name": "origin",
        "type": "getset_descriptor",
        "help": "Origin of the scale.\n\n.. versionadded:: 1.9.0\n\nThe format of the origin can be either (x, y) or (x, y, z).",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Scale"
        ],
        "prefix_kv": "origin: ",
        "prefix_py": "origin="
    },
    "ScreenManagerException": {
        "name": "ScreenManagerException",
        "type": "type",
        "import": "from kivy.uix.screenmanager import ScreenManagerException",
        "help": "Exception for the :class:`ScreenManager`.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ScreenManagerException: ",
        "prefix_py": "ScreenManagerException="
    },
    "ShaderTransition": {
        "name": "ShaderTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import ShaderTransition",
        "help": "Transition class that uses a Shader for animating the transition between\n2 screens. By default, this class doesn't assign any fragment/vertex\nshader. If you want to create your own fragment shader for the transition,\nyou need to declare the header yourself and include the \"t\", \"tex_in\" and\n\"tex_out\" uniform::\n\n    # Create your own transition. This shader implements a \"fading\"\n    # transition.\n    fs = \"\"\"$HEADER\n        uniform float t;\n        uniform sampler2D tex_in;\n        uniform sampler2D tex_out;\n\n        void main(void) {\n            vec4 cin = texture2D(tex_in, tex_coord0);\n            vec4 cout = texture2D(tex_out, tex_coord0);\n            gl_FragColor = mix(cout, cin, t);\n        }\n    \"\"\"\n\n    # And create your transition\n    tr = ShaderTransition(fs=fs)\n    sm = ScreenManager(transition=tr)",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ShaderTransition: ",
        "prefix_py": "ShaderTransition="
    },
    "SlideTransition": {
        "name": "SlideTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import SlideTransition",
        "help": "Slide Transition, can be used to show a new screen from any direction:\nleft, right, up or down.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SlideTransition: ",
        "prefix_py": "SlideTransition="
    },
    "SwapTransition": {
        "name": "SwapTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import SwapTransition",
        "help": "Swap transition that looks like iOS transition when a new window\nappears on the screen.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SwapTransition: ",
        "prefix_py": "SwapTransition="
    },
    "update_scale": {
        "name": "update_scale",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SwapTransition"
        ],
        "parametters": [
            "self",
            "screen",
            "center"
        ],
        "prefix_kv": "update_scale: ",
        "prefix_py": "update_scale=()"
    },
    "TransitionBase": {
        "name": "TransitionBase",
        "type": "type",
        "import": "from kivy.uix.screenmanager import TransitionBase",
        "help": "TransitionBase is used to animate 2 screens within the\n:class:`ScreenManager`. This class acts as a base for other\nimplementations like the :class:`SlideTransition` and\n:class:`SwapTransition`.\n\n:Events:\n    `on_progress`: Transition object, progression float\n        Fired during the animation of the transition.\n    `on_complete`: Transition object\n        Fired when the transition is finished.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TransitionBase: ",
        "prefix_py": "TransitionBase="
    },
    "WipeTransition": {
        "name": "WipeTransition",
        "type": "type",
        "import": "from kivy.uix.screenmanager import WipeTransition",
        "help": "Wipe transition, based on a fragment Shader.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "WipeTransition: ",
        "prefix_py": "WipeTransition="
    },
    "WIPE_TRANSITION_FS": {
        "name": "WIPE_TRANSITION_FS",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "WipeTransition"
        ],
        "prefix_kv": "WIPE_TRANSITION_FS: ''",
        "prefix_py": "WIPE_TRANSITION_FS=''"
    },
    "DampedScrollEffect": {
        "name": "DampedScrollEffect",
        "type": "type",
        "import": "from kivy.uix.scrollview import DampedScrollEffect",
        "help": "DampedScrollEffect class. See the module documentation for more\ninformation.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "DampedScrollEffect: ",
        "prefix_py": "DampedScrollEffect="
    },
    "apply_distance": {
        "name": "apply_distance",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "DampedScrollEffect"
        ],
        "parametters": [
            "self",
            "distance"
        ],
        "prefix_kv": "apply_distance: ",
        "prefix_py": "apply_distance=()"
    },
    "displacement": {
        "name": "displacement",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "displacement: ",
        "prefix_py": "displacement="
    },
    "drag_threshold": {
        "name": "drag_threshold",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "drag_threshold: ",
        "prefix_py": "drag_threshold="
    },
    "edge_damping": {
        "name": "edge_damping",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "edge_damping: ",
        "prefix_py": "edge_damping="
    },
    "friction": {
        "name": "friction",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "friction: ",
        "prefix_py": "friction="
    },
    "is_manual": {
        "name": "is_manual",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "is_manual: True",
        "prefix_py": "is_manual=True"
    },
    "max_history": {
        "name": "max_history",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "max_history: ",
        "prefix_py": "max_history="
    },
    "min_distance": {
        "name": "min_distance",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "min_distance: ",
        "prefix_py": "min_distance="
    },
    "min_overscroll": {
        "name": "min_overscroll",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "min_overscroll: ",
        "prefix_py": "min_overscroll="
    },
    "min_velocity": {
        "name": "min_velocity",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "min_velocity: ",
        "prefix_py": "min_velocity="
    },
    "on_overscroll": {
        "name": "on_overscroll",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "DampedScrollEffect"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_overscroll: ",
        "prefix_py": "on_overscroll=()"
    },
    "on_value": {
        "name": "on_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "DampedScrollEffect",
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_value: ",
        "prefix_py": "on_value=()"
    },
    "overscroll": {
        "name": "overscroll",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "overscroll: ",
        "prefix_py": "overscroll="
    },
    "reset": {
        "name": "reset",
        "type": "function",
        "help": "(internal) Reset the value and the velocity to the `pos`.\nMostly used when the bounds are checked.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "DampedScrollEffect"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "reset: ",
        "prefix_py": "reset=()"
    },
    "round_value": {
        "name": "round_value",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "round_value: True",
        "prefix_py": "round_value=True"
    },
    "scroll": {
        "name": "scroll",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "scroll: ",
        "prefix_py": "scroll="
    },
    "spring_constant": {
        "name": "spring_constant",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "spring_constant: ",
        "prefix_py": "spring_constant="
    },
    "std_dt": {
        "name": "std_dt",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "std_dt: ",
        "prefix_py": "std_dt="
    },
    "target_widget": {
        "name": "target_widget",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "target_widget: ",
        "prefix_py": "target_widget="
    },
    "update_velocity": {
        "name": "update_velocity",
        "type": "function",
        "help": "(internal) Update the velocity according to the frametime and\nfriction.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "DampedScrollEffect"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "update_velocity: ",
        "prefix_py": "update_velocity=()"
    },
    "velocity": {
        "name": "velocity",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "DampedScrollEffect"
        ],
        "prefix_kv": "velocity: ",
        "prefix_py": "velocity="
    },
    "ConfigParser": {
        "name": "ConfigParser",
        "type": "ABCMeta",
        "import": "from kivy.uix.settings import ConfigParser",
        "help": "Enhanced ConfigParser class that supports the addition of default\nsections and default values.\n\nBy default, the kivy ConfigParser instance, :attr:`~kivy.config.Config`,\nis named `'kivy'` and the ConfigParser instance used by the\n:meth:`App.build_settings <~kivy.app.App.build_settings>` method is named\n`'app'`.\n\n:Parameters:\n    `name`: string\n        The name of the instance. See :attr:`name`. Defaults to `''`.\n\n.. versionchanged:: 1.9.0\n    Each ConfigParser can now be :attr:`named <name>`. You can get the\n    ConfigParser associated with a name using :meth:`get_configparser`.\n    In addition, you can now control the config values with\n    :class:`~kivy.properties.ConfigParserProperty`.\n\n.. versionadded:: 1.0.7",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ConfigParser: ",
        "prefix_py": "ConfigParser=()"
    },
    "BOOLEAN_STATES": {
        "name": "BOOLEAN_STATES",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "BOOLEAN_STATES: {}",
        "prefix_py": "BOOLEAN_STATES={}"
    },
    "NONSPACECRE": {
        "name": "NONSPACECRE",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "NONSPACECRE: ",
        "prefix_py": "NONSPACECRE=()"
    },
    "OPTCRE": {
        "name": "OPTCRE",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "OPTCRE: ",
        "prefix_py": "OPTCRE=()"
    },
    "OPTCRE_NV": {
        "name": "OPTCRE_NV",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "OPTCRE_NV: ",
        "prefix_py": "OPTCRE_NV=()"
    },
    "SECTCRE": {
        "name": "SECTCRE",
        "type": "Pattern",
        "help": "Compiled regular expression object.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "SECTCRE: ",
        "prefix_py": "SECTCRE=()"
    },
    "_DEFAULT_INTERPOLATION": {
        "name": "_DEFAULT_INTERPOLATION",
        "type": "Interpolation",
        "help": "Dummy interpolation that passes the value through with no changes.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_DEFAULT_INTERPOLATION: ",
        "prefix_py": "_DEFAULT_INTERPOLATION=()"
    },
    "_MutableMapping__marker": {
        "name": "_MutableMapping__marker",
        "type": "object",
        "help": "The base class of the class hierarchy.\n\nWhen called, it accepts no arguments and returns a new featureless\ninstance that has no instance attributes and cannot be given any.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_MutableMapping__marker",
        "prefix_py": "_MutableMapping__marker."
    },
    "_OPT_NV_TMPL": {
        "name": "_OPT_NV_TMPL",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_OPT_NV_TMPL: ''",
        "prefix_py": "_OPT_NV_TMPL=''"
    },
    "_OPT_TMPL": {
        "name": "_OPT_TMPL",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_OPT_TMPL: ''",
        "prefix_py": "_OPT_TMPL=''"
    },
    "_SECT_TMPL": {
        "name": "_SECT_TMPL",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_SECT_TMPL: ''",
        "prefix_py": "_SECT_TMPL=''"
    },
    "_abc_impl": {
        "name": "_abc_impl",
        "type": "_abc_data",
        "help": "Internal state held by ABC machinery.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_abc_impl",
        "prefix_py": "_abc_impl."
    },
    "_convert_to_boolean": {
        "name": "_convert_to_boolean",
        "type": "function",
        "help": "Return a boolean value translating from other types if necessary.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "value"
        ],
        "prefix_kv": "_convert_to_boolean: ",
        "prefix_py": "_convert_to_boolean=()"
    },
    "_do_callbacks": {
        "name": "_do_callbacks",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "key",
            "value"
        ],
        "prefix_kv": "_do_callbacks: ",
        "prefix_py": "_do_callbacks=()"
    },
    "_get": {
        "name": "_get",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "conv",
            "option",
            "kwargs"
        ],
        "prefix_kv": "_get: ",
        "prefix_py": "_get=()"
    },
    "_get_conv": {
        "name": "_get_conv",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "conv",
            "raw",
            "vars",
            "fallback",
            "kwargs"
        ],
        "prefix_kv": "_get_conv: ",
        "prefix_py": "_get_conv=()"
    },
    "_handle_error": {
        "name": "_handle_error",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "exc",
            "fpname",
            "lineno",
            "line"
        ],
        "prefix_kv": "_handle_error: ",
        "prefix_py": "_handle_error=()"
    },
    "_join_multiline_values": {
        "name": "_join_multiline_values",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_join_multiline_values: ",
        "prefix_py": "_join_multiline_values=()"
    },
    "_name": {
        "name": "_name",
        "type": "str",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_name: ''",
        "prefix_py": "_name=''"
    },
    "_named_configs": {
        "name": "_named_configs",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "_named_configs: {}",
        "prefix_py": "_named_configs={}"
    },
    "_read": {
        "name": "_read",
        "type": "function",
        "help": "Parse a sectioned configuration file.\n\nEach section in a configuration file contains a header, indicated by\na name in square brackets (`[]`), plus key/value options, indicated by\n`name` and `value` delimited with a specific substring (`=` or `:` by\ndefault).\n\nValues can span multiple lines, as long as they are indented deeper\nthan the first line of the value. Depending on the parser's mode, blank\nlines may be treated as parts of multiline values or ignored.\n\nConfiguration files may include comments, prefixed by specific\ncharacters (`#` and `;` by default). Comments may appear on their own\nin an otherwise empty line or may be entered in lines holding values or\nsection names. Please note that comments get stripped off when reading configuration files.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "fp",
            "fpname"
        ],
        "prefix_kv": "_read: ",
        "prefix_py": "_read=()"
    },
    "_read_defaults": {
        "name": "_read_defaults",
        "type": "function",
        "help": "Read the defaults passed in the initializer.\nNote: values can be non-string.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "defaults"
        ],
        "prefix_kv": "_read_defaults: ",
        "prefix_py": "_read_defaults=()"
    },
    "_register_named_property": {
        "name": "_register_named_property",
        "type": "function",
        "help": "Called by the ConfigParserProperty to register a property which\nwas created with a config name instead of a config object.\n\nWhen a ConfigParser with this name is later created, the properties\nare then notified that this parser now exists so they can use it.\nIf the parser already exists, the property is notified here. See\n:meth:`~kivy.properties.ConfigParserProperty.set_config`.\n\n:Parameters:\n    `name`: a non-empty string\n        The name of the ConfigParser that is associated with the\n        property. See :attr:`name`.\n    `widget_ref`: 2-tuple.\n        The first element is a reference to the widget containing the\n        property, the second element is the name of the property. E.g.:\n\n            class House(Widget):\n                address = ConfigParserProperty('', 'info', 'street',\n                    'directory')\n\n        Then, the first element is a ref to a House instance, and the\n        second is `'address'`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "name",
            "widget_ref",
            "largs"
        ],
        "prefix_kv": "_register_named_property: ",
        "prefix_py": "_register_named_property=()"
    },
    "_unify_values": {
        "name": "_unify_values",
        "type": "function",
        "help": "Create a sequence of lookups with 'vars' taking priority over\nthe 'section' which takes priority over the DEFAULTSECT.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "vars"
        ],
        "prefix_kv": "_unify_values: ",
        "prefix_py": "_unify_values=()"
    },
    "_validate_value_types": {
        "name": "_validate_value_types",
        "type": "function",
        "help": "Raises a TypeError for non-string values.\n\nThe only legal non-string value if we allow valueless\noptions is None, so we need to check if the value is a\nstring if:\n- we do not allow valueless options, or\n- we allow valueless options but the value is not None\n\nFor compatibility reasons this method is not used in classic set()\nfor RawConfigParsers. It is invoked in every case for mapping protocol\naccess and in ConfigParser.set().",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "value"
        ],
        "prefix_kv": "_validate_value_types: ",
        "prefix_py": "_validate_value_types=()"
    },
    "_write_section": {
        "name": "_write_section",
        "type": "function",
        "help": "Write a single section to the specified `fp`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "fp",
            "section_name",
            "section_items",
            "delimiter"
        ],
        "prefix_kv": "_write_section: ",
        "prefix_py": "_write_section=()"
    },
    "add_callback": {
        "name": "add_callback",
        "type": "function",
        "help": "Add a callback to be called when a specific section or key has\nchanged. If you don't specify a section or key, it will call the\ncallback for all section/key changes.\n\nCallbacks will receive 3 arguments: the section, key and value.\n\n.. versionadded:: 1.4.1",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "callback",
            "section",
            "key"
        ],
        "prefix_kv": "add_callback: ",
        "prefix_py": "add_callback=()"
    },
    "add_section": {
        "name": "add_section",
        "type": "function",
        "help": "Create a new section in the configuration.\n\nRaise DuplicateSectionError if a section by the specified name\nalready exists. Raise ValueError if name is DEFAULT.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section"
        ],
        "prefix_kv": "add_section: ",
        "prefix_py": "add_section=()"
    },
    "adddefaultsection": {
        "name": "adddefaultsection",
        "type": "function",
        "help": "Add a section if the section is missing.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section"
        ],
        "prefix_kv": "adddefaultsection: ",
        "prefix_py": "adddefaultsection=()"
    },
    "converters": {
        "name": "converters",
        "type": "property",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ConfigParser"
        ],
        "prefix_kv": "converters: ",
        "prefix_py": "converters="
    },
    "defaults": {
        "name": "defaults",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "defaults: ",
        "prefix_py": "defaults=()"
    },
    "get_configparser": {
        "name": "get_configparser",
        "type": "function",
        "help": "Returns the :class:`ConfigParser` instance whose name is `name`, or\nNone if not found.\n\n:Parameters:\n    `name`: string\n        The name of the :class:`ConfigParser` instance to return.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "name"
        ],
        "prefix_kv": "get_configparser: ",
        "prefix_py": "get_configparser=()"
    },
    "getboolean": {
        "name": "getboolean",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "raw",
            "vars",
            "fallback",
            "kwargs"
        ],
        "prefix_kv": "getboolean: ",
        "prefix_py": "getboolean=()"
    },
    "getdefault": {
        "name": "getdefault",
        "type": "function",
        "help": "Get the value of an option in the specified section. If not found,\nit will return the default value.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "defaultvalue"
        ],
        "prefix_kv": "getdefault: ",
        "prefix_py": "getdefault=()"
    },
    "getdefaultint": {
        "name": "getdefaultint",
        "type": "function",
        "help": "Get the value of an option in the specified section. If not found,\nit will return the default value. The value will always be\nreturned as an integer.\n\n.. versionadded:: 1.6.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "defaultvalue"
        ],
        "prefix_kv": "getdefaultint: ",
        "prefix_py": "getdefaultint=()"
    },
    "getfloat": {
        "name": "getfloat",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "raw",
            "vars",
            "fallback",
            "kwargs"
        ],
        "prefix_kv": "getfloat: ",
        "prefix_py": "getfloat=()"
    },
    "getint": {
        "name": "getint",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option",
            "raw",
            "vars",
            "fallback",
            "kwargs"
        ],
        "prefix_kv": "getint: ",
        "prefix_py": "getint=()"
    },
    "has_option": {
        "name": "has_option",
        "type": "function",
        "help": "Check for the existence of a given option in a given section.\nIf the specified `section` is None or an empty string, DEFAULT is\nassumed. If the specified `section` does not exist, returns False.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option"
        ],
        "prefix_kv": "has_option: ",
        "prefix_py": "has_option=()"
    },
    "has_section": {
        "name": "has_section",
        "type": "function",
        "help": "Indicate whether the named section is present in the configuration.\n\nThe DEFAULT section is not acknowledged.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section"
        ],
        "prefix_kv": "has_section: ",
        "prefix_py": "has_section=()"
    },
    "optionxform": {
        "name": "optionxform",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "optionstr"
        ],
        "prefix_kv": "optionxform: ",
        "prefix_py": "optionxform=()"
    },
    "read": {
        "name": "read",
        "type": "function",
        "help": "Read only one filename. In contrast to the original ConfigParser of\nPython, this one is able to read only one file at a time. The last\nread file will be used for the :meth:`write` method.\n\n.. versionchanged:: 1.9.0\n    :meth:`read` now calls the callbacks if read changed any values.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "filename"
        ],
        "prefix_kv": "read: ",
        "prefix_py": "read=()"
    },
    "read_dict": {
        "name": "read_dict",
        "type": "function",
        "help": "Read configuration from a dictionary.\n\nKeys are section names, values are dictionaries with keys and values\nthat should be present in the section. If the used dictionary type\npreserves order, sections and their keys will be added in order.\n\nAll types held in the dictionary are converted to strings during\nreading, including section names, option names and keys.\n\nOptional second argument is the `source` specifying the name of the\ndictionary being read.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "dictionary",
            "source"
        ],
        "prefix_kv": "read_dict: ",
        "prefix_py": "read_dict=()"
    },
    "read_file": {
        "name": "read_file",
        "type": "function",
        "help": "Like read() but the argument must be a file-like object.\n\nThe `f` argument must be iterable, returning one line at a time.\nOptional second argument is the `source` specifying the name of the\nfile being read. If not given, it is taken from f.name. If `f` has no\n`name` attribute, `<???>` is used.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "f",
            "source"
        ],
        "prefix_kv": "read_file: ",
        "prefix_py": "read_file=()"
    },
    "read_string": {
        "name": "read_string",
        "type": "function",
        "help": "Read configuration from a given string.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "string",
            "source"
        ],
        "prefix_kv": "read_string: ",
        "prefix_py": "read_string=()"
    },
    "remove_callback": {
        "name": "remove_callback",
        "type": "function",
        "help": "Removes a callback added with :meth:`add_callback`.\n:meth:`remove_callback` must be called with the same parameters as\n:meth:`add_callback`.\n\nRaises a `ValueError` if not found.\n\n.. versionadded:: 1.9.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "callback",
            "section",
            "key"
        ],
        "prefix_kv": "remove_callback: ",
        "prefix_py": "remove_callback=()"
    },
    "remove_option": {
        "name": "remove_option",
        "type": "function",
        "help": "Remove an option.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "option"
        ],
        "prefix_kv": "remove_option: ",
        "prefix_py": "remove_option=()"
    },
    "remove_section": {
        "name": "remove_section",
        "type": "function",
        "help": "Remove a file section.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section"
        ],
        "prefix_kv": "remove_section: ",
        "prefix_py": "remove_section=()"
    },
    "sections": {
        "name": "sections",
        "type": "function",
        "help": "Return a list of section names, excluding [DEFAULT]",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "sections: ",
        "prefix_py": "sections=()"
    },
    "setall": {
        "name": "setall",
        "type": "function",
        "help": "Sets multiple key-value pairs in a section. keyvalues should be a\ndictionary containing the key-value pairs to be set.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "keyvalues"
        ],
        "prefix_kv": "setall: ",
        "prefix_py": "setall=()"
    },
    "setdefaults": {
        "name": "setdefaults",
        "type": "function",
        "help": "Set multiple key-value defaults in a section. keyvalues should be\na dictionary containing the new key-value defaults.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "section",
            "keyvalues"
        ],
        "prefix_kv": "setdefaults: ",
        "prefix_py": "setdefaults=()"
    },
    "update_config": {
        "name": "update_config",
        "type": "function",
        "help": "Upgrade the configuration based on a new default config file.\nOverwrite any existing values if overwrite is True.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self",
            "filename",
            "overwrite"
        ],
        "prefix_kv": "update_config: ",
        "prefix_py": "update_config=()"
    },
    "write": {
        "name": "write",
        "type": "function",
        "help": "Write the configuration to the last file opened using the\n:meth:`read` method.\n\nReturn True if the write finished successfully, False otherwise.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ConfigParser"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "write: ",
        "prefix_py": "write=()"
    },
    "ContentPanel": {
        "name": "ContentPanel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import ContentPanel",
        "help": "A class for displaying settings panels. It displays a single\nsettings panel at a time, taking up the full size and shape of the\nContentPanel. It is used by :class:`InterfaceWithSidebar` and\n:class:`InterfaceWithSpinner` to display settings.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "ContentPanel:\n    ",
        "prefix_py": "ContentPanel()"
    },
    "add_panel": {
        "name": "add_panel",
        "type": "function",
        "help": "This method is used by Settings to add new panels for possible\ndisplay. Any replacement for ContentPanel *must* implement\nthis method.\n\n:Parameters:\n    `panel`: :class:`SettingsPanel`\n        It should be stored and displayed when requested.\n    `name`:\n        The name of the panel as a string. It may be used to represent\n        the panel.\n    `uid`:\n        A unique int identifying the panel. It should be stored and\n        used to identify panels when switching.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ContentPanel",
            "InterfaceWithNoMenu",
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "panel",
            "name",
            "uid"
        ],
        "prefix_kv": "add_panel: ",
        "prefix_py": "add_panel=()"
    },
    "current_panel": {
        "name": "current_panel",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "current_panel: ",
        "prefix_py": "current_panel="
    },
    "current_uid": {
        "name": "current_uid",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "current_uid: ",
        "prefix_py": "current_uid="
    },
    "on_current_uid": {
        "name": "on_current_uid",
        "type": "function",
        "help": "The uid of the currently displayed panel. Changing this will\nautomatically change the displayed panel.\n\n:Parameters:\n    `uid`:\n        A panel uid. It should be used to retrieve and display\n        a settings panel that has previously been added with\n        :meth:`add_panel`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_current_uid: ",
        "prefix_py": "on_current_uid=()"
    },
    "panels": {
        "name": "panels",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "ContentPanel",
            "InterfaceWithNoMenu"
        ],
        "prefix_kv": "panels: {}",
        "prefix_py": "panels={}"
    },
    "InterfaceWithNoMenu": {
        "name": "InterfaceWithNoMenu",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import InterfaceWithNoMenu",
        "help": "The interface widget used by :class:`SettingsWithNoMenu`. It\nstores and displays a single settings panel.\n\nThis widget is considered internal and is not documented. See the\n:class:`ContentPanel` for information on defining your own content\nwidget.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InterfaceWithNoMenu:\n    ",
        "prefix_py": "InterfaceWithNoMenu()"
    },
    "InterfaceWithSidebar": {
        "name": "InterfaceWithSidebar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import InterfaceWithSidebar",
        "help": "The default Settings interface class. It displays a sidebar menu\nwith names of available settings panels, which may be used to switch\nwhich one is currently displayed.\n\nSee :meth:`~InterfaceWithSidebar.add_panel` for information on the\nmethod you must implement if creating your own interface.\n\nThis class also dispatches an event 'on_close', which is triggered\nwhen the sidebar menu's close button is released. If creating your\nown interface widget, it should also dispatch such an event which\nwill automatically be caught by :class:`Settings` and used to\ntrigger its own 'on_close' event.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InterfaceWithSidebar:\n    ",
        "prefix_py": "InterfaceWithSidebar()"
    },
    "menu": {
        "name": "menu",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "SettingSidebarLabel"
        ],
        "prefix_kv": "menu: ",
        "prefix_py": "menu="
    },
    "on_close": {
        "name": "on_close",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "InterfaceWithSidebar",
            "InterfaceWithSpinner",
            "InterfaceWithTabbedPanel",
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_close: ",
        "prefix_py": "on_close=()"
    },
    "InterfaceWithSpinner": {
        "name": "InterfaceWithSpinner",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import InterfaceWithSpinner",
        "help": "A settings interface that displays a spinner at the top for\nswitching between panels.\n\nThe workings of this class are considered internal and are not\ndocumented. See :meth:`InterfaceWithSidebar` for\ninformation on implementing your own interface class.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InterfaceWithSpinner:\n    ",
        "prefix_py": "InterfaceWithSpinner()"
    },
    "InterfaceWithTabbedPanel": {
        "name": "InterfaceWithTabbedPanel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import InterfaceWithTabbedPanel",
        "help": "The content widget used by :class:`SettingsWithTabbedPanel`. It\nstores and displays Settings panels in tabs of a TabbedPanel.\n\nThis widget is considered internal and is not documented. See\n:class:`InterfaceWithSidebar` for information on defining your own\ninterface widget.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "InterfaceWithTabbedPanel:\n    ",
        "prefix_py": "InterfaceWithTabbedPanel()"
    },
    "close_button": {
        "name": "close_button",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "InterfaceWithTabbedPanel",
            "MenuSidebar",
            "MenuSpinner"
        ],
        "prefix_kv": "close_button: ",
        "prefix_py": "close_button="
    },
    "tabbedpanel": {
        "name": "tabbedpanel",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "InterfaceWithTabbedPanel"
        ],
        "prefix_kv": "tabbedpanel: ",
        "prefix_py": "tabbedpanel="
    },
    "MenuSidebar": {
        "name": "MenuSidebar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import MenuSidebar",
        "help": "The menu used by :class:`InterfaceWithSidebar`. It provides a\nsidebar with an entry for each settings panel, which the user may\nclick to select.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "MenuSidebar:\n    ",
        "prefix_py": "MenuSidebar()"
    },
    "add_item": {
        "name": "add_item",
        "type": "function",
        "help": "This method is used to add new panels to the menu.\n\n:Parameters:\n    `name`:\n        The name (a string) of the panel. It should be used\n        to represent the panel in the menu.\n    `uid`:\n        The name (an int) of the panel. It should be used internally\n        to represent the panel and used to set self.selected_uid when\n        the panel is changed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "MenuSidebar",
            "MenuSpinner"
        ],
        "parametters": [
            "self",
            "name",
            "uid"
        ],
        "prefix_kv": "add_item: ",
        "prefix_py": "add_item=()"
    },
    "buttons_layout": {
        "name": "buttons_layout",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "MenuSidebar"
        ],
        "prefix_kv": "buttons_layout: ",
        "prefix_py": "buttons_layout="
    },
    "on_selected_uid": {
        "name": "on_selected_uid",
        "type": "function",
        "help": "(internal) unselects any currently selected menu buttons, unless\nthey represent the current panel.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "MenuSidebar"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_selected_uid: ",
        "prefix_py": "on_selected_uid=()"
    },
    "selected_uid": {
        "name": "selected_uid",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "MenuSidebar",
            "MenuSpinner"
        ],
        "prefix_kv": "selected_uid: ",
        "prefix_py": "selected_uid="
    },
    "MenuSpinner": {
        "name": "MenuSpinner",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import MenuSpinner",
        "help": "The menu class used by :class:`SettingsWithSpinner`. It provides a\nsidebar with an entry for each settings panel.\n\nThis widget is considered internal and is not documented. See\n:class:`MenuSidebar` for information on menus and creating your own menu\nclass.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "MenuSpinner:\n    ",
        "prefix_py": "MenuSpinner()"
    },
    "on_spinner_text": {
        "name": "on_spinner_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "MenuSpinner"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_spinner_text: ",
        "prefix_py": "on_spinner_text=()"
    },
    "panel_names": {
        "name": "panel_names",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "MenuSpinner"
        ],
        "prefix_kv": "panel_names: {}",
        "prefix_py": "panel_names={}"
    },
    "spinner": {
        "name": "spinner",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "MenuSpinner"
        ],
        "prefix_kv": "spinner: ",
        "prefix_py": "spinner="
    },
    "spinner_text": {
        "name": "spinner_text",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "MenuSpinner"
        ],
        "prefix_kv": "spinner_text: ''",
        "prefix_py": "spinner_text=''"
    },
    "SettingBoolean": {
        "name": "SettingBoolean",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingBoolean",
        "help": "Implementation of a boolean setting on top of a :class:`SettingItem`.\nIt is visualized with a :class:`~kivy.uix.switch.Switch` widget.\nBy default, 0 and 1 are used for values: you can change them by setting\n:attr:`values`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingBoolean:\n    ",
        "prefix_py": "SettingBoolean()"
    },
    "desc": {
        "name": "desc",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "prefix_kv": "desc: ''",
        "prefix_py": "desc=''"
    },
    "key": {
        "name": "key",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "prefix_kv": "key: ''",
        "prefix_py": "key=''"
    },
    "panel": {
        "name": "panel",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString",
            "SettingTitle"
        ],
        "prefix_kv": "panel: ",
        "prefix_py": "panel="
    },
    "selected_alpha": {
        "name": "selected_alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingBoolean",
            "SettingColor",
            "SettingItem",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "prefix_kv": "selected_alpha: ",
        "prefix_py": "selected_alpha="
    },
    "SettingColor": {
        "name": "SettingColor",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingColor",
        "help": "Implementation of a color setting on top of a :class:`SettingItem`.\nIt is visualized with a :class:`~kivy.uix.label.Label` widget and a\ncolored canvas rectangle that, when clicked, will open a\n:class:`~kivy.uix.popup.Popup` with a\n:class:`~kivy.uix.colorpicker.ColorPicker` so the user can choose a color.\n\n.. versionadded:: 2.0.1",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingColor:\n    ",
        "prefix_py": "SettingColor()"
    },
    "_create_popup": {
        "name": "_create_popup",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingColor",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "_create_popup: ",
        "prefix_py": "_create_popup=()"
    },
    "_dismiss": {
        "name": "_dismiss",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingColor",
            "SettingNumeric",
            "SettingPath",
            "SettingString"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_dismiss: ",
        "prefix_py": "_dismiss=()"
    },
    "_validate": {
        "name": "_validate",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingColor",
            "SettingNumeric",
            "SettingPath",
            "SettingString"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "_validate: ",
        "prefix_py": "_validate=()"
    },
    "on_panel": {
        "name": "on_panel",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingColor",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_panel: ",
        "prefix_py": "on_panel=()"
    },
    "popup": {
        "name": "popup",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingColor",
            "SettingNumeric",
            "SettingOptions",
            "SettingPath",
            "SettingString"
        ],
        "prefix_kv": "popup: ",
        "prefix_py": "popup="
    },
    "SettingItem": {
        "name": "SettingItem",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingItem",
        "help": "Base class for individual settings (within a panel). This class cannot\nbe used directly; it is used for implementing the other setting classes.\nIt builds a row with a title/description (left) and a setting control\n(right).\n\nLook at :class:`SettingBoolean`, :class:`SettingNumeric` and\n:class:`SettingOptions` for usage examples.\n\n:Events:\n    `on_release`\n        Fired when the item is touched and then released.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingItem:\n    ",
        "prefix_py": "SettingItem()"
    },
    "SettingNumeric": {
        "name": "SettingNumeric",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingNumeric",
        "help": "Implementation of a numeric setting on top of a :class:`SettingString`.\nIt is visualized with a :class:`~kivy.uix.label.Label` widget that, when\nclicked, will open a :class:`~kivy.uix.popup.Popup` with a\n:class:`~kivy.uix.textinput.Textinput` so the user can enter a custom\nvalue.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingNumeric:\n    ",
        "prefix_py": "SettingNumeric()"
    },
    "textinput": {
        "name": "textinput",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingNumeric",
            "SettingPath",
            "SettingString",
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "textinput: ",
        "prefix_py": "textinput="
    },
    "SettingOptions": {
        "name": "SettingOptions",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingOptions",
        "help": "Implementation of an option list on top of a :class:`SettingItem`.\nIt is visualized with a :class:`~kivy.uix.label.Label` widget that, when\nclicked, will open a :class:`~kivy.uix.popup.Popup` with a\nlist of options from which the user can select.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingOptions:\n    ",
        "prefix_py": "SettingOptions()"
    },
    "_set_option": {
        "name": "_set_option",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingOptions"
        ],
        "parametters": [
            "self",
            "instance"
        ],
        "prefix_kv": "_set_option: ",
        "prefix_py": "_set_option=()"
    },
    "SettingPath": {
        "name": "SettingPath",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingPath",
        "help": "Implementation of a Path setting on top of a :class:`SettingItem`.\nIt is visualized with a :class:`~kivy.uix.label.Label` widget that, when\nclicked, will open a :class:`~kivy.uix.popup.Popup` with a\n:class:`~kivy.uix.filechooser.FileChooserListView` so the user can enter\na custom value.\n\n.. versionadded:: 1.1.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingPath:\n    ",
        "prefix_py": "SettingPath()"
    },
    "SettingSidebarLabel": {
        "name": "SettingSidebarLabel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingSidebarLabel",
        "help": "Label class, see module documentation for more information.\n\n:Events:\n    `on_ref_press`\n        Fired when the user clicks on a word referenced with a\n        ``[ref]`` tag in a text markup.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingSidebarLabel:\n    ",
        "prefix_py": "SettingSidebarLabel()"
    },
    "selected": {
        "name": "selected",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingSidebarLabel"
        ],
        "prefix_kv": "selected: True",
        "prefix_py": "selected=True"
    },
    "SettingSpacer": {
        "name": "SettingSpacer",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingSpacer",
        "help": "Widget class. See module documentation for more information.\n\n:Events:\n    `on_touch_down`: `(touch, )`\n        Fired when a new touch event occurs. `touch` is the touch object.\n    `on_touch_move`: `(touch, )`\n        Fired when an existing touch moves. `touch` is the touch object.\n    `on_touch_up`: `(touch, )`\n        Fired when an existing touch disappears. `touch` is the touch\n        object.\n    `on_kv_post`: `(base_widget, )`\n        Fired after all the kv rules associated with the widget\n        and all other widgets that are in any of those rules have had\n        all their kv rules applied. `base_widget` is the base-most widget\n        whose instantiation triggered the kv rules (i.e. the widget\n        instantiated from Python, e.g. ``MyWidget()``).\n\n        .. versionchanged:: 1.11.0\n\n.. warning::\n    Adding a `__del__` method to a class derived from Widget with Python\n    prior to 3.4 will disable automatic garbage collection for instances\n    of that class. This is because the Widget class creates reference\n    cycles, thereby `preventing garbage collection\n    <https://docs.python.org/2/library/gc.html#gc.garbage>`_.\n\n.. versionchanged:: 1.0.9\n    Everything related to event properties has been moved to the\n    :class:`~kivy.event.EventDispatcher`. Event properties can now be used\n    when constructing a simple class without subclassing :class:`Widget`.\n\n.. versionchanged:: 1.5.0\n    The constructor now accepts on_* arguments to automatically bind\n    callbacks to properties or events, as in the Kv language.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingSpacer:\n    ",
        "prefix_py": "SettingSpacer()"
    },
    "SettingString": {
        "name": "SettingString",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingString",
        "help": "Implementation of a string setting on top of a :class:`SettingItem`.\nIt is visualized with a :class:`~kivy.uix.label.Label` widget that, when\nclicked, will open a :class:`~kivy.uix.popup.Popup` with a\n:class:`~kivy.uix.textinput.Textinput` so the user can enter a custom\nvalue.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingString:\n    ",
        "prefix_py": "SettingString()"
    },
    "SettingTitle": {
        "name": "SettingTitle",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingTitle",
        "help": "A simple title label, used to organize the settings in sections.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingTitle:\n    ",
        "prefix_py": "SettingTitle()"
    },
    "Settings": {
        "name": "Settings",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import Settings",
        "help": "Settings UI. Check module documentation for more information on how\nto use this class.\n\n:Events:\n    `on_config_change`: ConfigParser instance, section, key, value\n        Fired when the section's key-value pair of a ConfigParser changes.\n\n        .. warning:\n\n            value will be str/unicode type, regardless of the setting\n            type (numeric, boolean, etc)\n    `on_close`\n        Fired by the default panel when the Close button is pressed.\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Settings:\n    ",
        "prefix_py": "Settings()"
    },
    "add_interface": {
        "name": "add_interface",
        "type": "function",
        "help": "(Internal) creates an instance of :attr:`Settings.interface_cls`,\nand sets it to :attr:`~Settings.interface`. When json panels are\ncreated, they will be added to this interface which will display them\nto the user.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "add_interface: ",
        "prefix_py": "add_interface=()"
    },
    "add_json_panel": {
        "name": "add_json_panel",
        "type": "function",
        "help": "Create and add a new :class:`SettingsPanel` using the configuration\n`config` with the JSON definition `filename`. If `filename` is not set,\nthen the JSON definition is read from the `data` parameter instead.\n\nCheck the :ref:`settings_json` section in the documentation for more\ninformation about JSON format and the usage of this function.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "title",
            "config",
            "filename",
            "data"
        ],
        "prefix_kv": "add_json_panel: ",
        "prefix_py": "add_json_panel=()"
    },
    "add_kivy_panel": {
        "name": "add_kivy_panel",
        "type": "function",
        "help": "Add a panel for configuring Kivy. This panel acts directly on the\nkivy configuration. Feel free to include or exclude it in your\nconfiguration.\n\nSee :meth:`~kivy.app.App.use_kivy_settings` for information on\nenabling/disabling the automatic kivy panel.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "add_kivy_panel: ",
        "prefix_py": "add_kivy_panel=()"
    },
    "create_json_panel": {
        "name": "create_json_panel",
        "type": "function",
        "help": "Create new :class:`SettingsPanel`.\n\n.. versionadded:: 1.5.0\n\nCheck the documentation of :meth:`add_json_panel` for more information.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "title",
            "config",
            "filename",
            "data"
        ],
        "prefix_kv": "create_json_panel: ",
        "prefix_py": "create_json_panel=()"
    },
    "interface": {
        "name": "interface",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "prefix_kv": "interface: ",
        "prefix_py": "interface="
    },
    "interface_cls": {
        "name": "interface_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "prefix_kv": "interface_cls: ",
        "prefix_py": "interface_cls="
    },
    "on_config_change": {
        "name": "on_config_change",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "config",
            "section",
            "key",
            "value"
        ],
        "prefix_kv": "on_config_change: ",
        "prefix_py": "on_config_change=()"
    },
    "register_type": {
        "name": "register_type",
        "type": "function",
        "help": "Register a new type that can be used in the JSON definition.\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "Settings",
            "SettingsWithNoMenu",
            "SettingsWithSidebar",
            "SettingsWithSpinner",
            "SettingsWithTabbedPanel"
        ],
        "parametters": [
            "self",
            "tp",
            "cls"
        ],
        "prefix_kv": "register_type: ",
        "prefix_py": "register_type=()"
    },
    "SettingsPanel": {
        "name": "SettingsPanel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingsPanel",
        "help": "This class is used to construct panel settings, for use with a\n:class:`Settings` instance or subclass.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingsPanel:\n    ",
        "prefix_py": "SettingsPanel()"
    },
    "config": {
        "name": "config",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingsPanel"
        ],
        "prefix_kv": "config: ",
        "prefix_py": "config="
    },
    "get_value": {
        "name": "get_value",
        "type": "function",
        "help": "Return the value of the section/key from the :attr:`config`\nConfigParser instance. This function is used by :class:`SettingItem` to\nget the value for a given section/key.\n\nIf you don't want to use a ConfigParser instance, you might want to\noverride this function.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingsPanel"
        ],
        "parametters": [
            "self",
            "section",
            "key"
        ],
        "prefix_kv": "get_value: ",
        "prefix_py": "get_value=()"
    },
    "on_config": {
        "name": "on_config",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingsPanel"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_config: ",
        "prefix_py": "on_config=()"
    },
    "set_value": {
        "name": "set_value",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "SettingsPanel"
        ],
        "parametters": [
            "self",
            "section",
            "key",
            "value"
        ],
        "prefix_kv": "set_value: ",
        "prefix_py": "set_value=()"
    },
    "settings": {
        "name": "settings",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "SettingsPanel"
        ],
        "prefix_kv": "settings: ",
        "prefix_py": "settings="
    },
    "SettingsWithNoMenu": {
        "name": "SettingsWithNoMenu",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingsWithNoMenu",
        "help": "A settings widget that displays a single settings panel with *no*\nClose button. It will not accept more than one Settings panel. It\nis intended for use in programs with few enough settings that a\nfull panel switcher is not useful.\n\n.. warning::\n\n    This Settings panel does *not* provide a Close\n    button, and so it is impossible to leave the settings screen\n    unless you also add other behavior or override\n    :meth:`~kivy.app.App.display_settings` and\n    :meth:`~kivy.app.App.close_settings`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingsWithNoMenu:\n    ",
        "prefix_py": "SettingsWithNoMenu()"
    },
    "SettingsWithSidebar": {
        "name": "SettingsWithSidebar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingsWithSidebar",
        "help": "A settings widget that displays settings panels with a sidebar to\nswitch between them. This is the default behavior of\n:class:`Settings`, and this widget is a trivial wrapper subclass.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingsWithSidebar:\n    ",
        "prefix_py": "SettingsWithSidebar()"
    },
    "SettingsWithSpinner": {
        "name": "SettingsWithSpinner",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingsWithSpinner",
        "help": "A settings widget that displays one settings panel at a time with a\nspinner at the top to switch between them.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingsWithSpinner:\n    ",
        "prefix_py": "SettingsWithSpinner()"
    },
    "SettingsWithTabbedPanel": {
        "name": "SettingsWithTabbedPanel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import SettingsWithTabbedPanel",
        "help": "A settings widget that displays settings panels as pages in a\n:class:`~kivy.uix.tabbedpanel.TabbedPanel`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SettingsWithTabbedPanel:\n    ",
        "prefix_py": "SettingsWithTabbedPanel()"
    },
    "TabbedPanelHeader": {
        "name": "TabbedPanelHeader",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.settings import TabbedPanelHeader",
        "help": "A Base for implementing a Tabbed Panel Head. A button intended to be\nused as a Heading/Tab for a TabbedPanel widget.\n\nYou can use this TabbedPanelHeader widget to add a new tab to a\nTabbedPanel.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanelHeader:\n    ",
        "prefix_py": "TabbedPanelHeader()"
    },
    "text_type": {
        "name": "text_type",
        "type": "type",
        "import": "from kivy.uix.settings import text_type",
        "help": "str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "text_type: ",
        "prefix_py": "text_type="
    },
    "Slider": {
        "name": "Slider",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.slider import Slider",
        "help": "Class for creating a Slider widget.\n\nCheck module documentation for more details.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Slider:\n    ",
        "prefix_py": "Slider()"
    },
    "background_disabled_horizontal": {
        "name": "background_disabled_horizontal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "background_disabled_horizontal: ''",
        "prefix_py": "background_disabled_horizontal=''"
    },
    "background_disabled_vertical": {
        "name": "background_disabled_vertical",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "background_disabled_vertical: ''",
        "prefix_py": "background_disabled_vertical=''"
    },
    "background_horizontal": {
        "name": "background_horizontal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "background_horizontal: ''",
        "prefix_py": "background_horizontal=''"
    },
    "background_vertical": {
        "name": "background_vertical",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "background_vertical: ''",
        "prefix_py": "background_vertical=''"
    },
    "background_width": {
        "name": "background_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "background_width: ",
        "prefix_py": "background_width="
    },
    "border_horizontal": {
        "name": "border_horizontal",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "border_horizontal: ()",
        "prefix_py": "border_horizontal=()"
    },
    "border_vertical": {
        "name": "border_vertical",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "border_vertical: ()",
        "prefix_py": "border_vertical=()"
    },
    "cursor_disabled_image": {
        "name": "cursor_disabled_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "cursor_disabled_image: ''",
        "prefix_py": "cursor_disabled_image=''"
    },
    "cursor_height": {
        "name": "cursor_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "cursor_height: ",
        "prefix_py": "cursor_height="
    },
    "cursor_image": {
        "name": "cursor_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "cursor_image: ''",
        "prefix_py": "cursor_image=''"
    },
    "cursor_size": {
        "name": "cursor_size",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "cursor_size: ()",
        "prefix_py": "cursor_size=()"
    },
    "get_value_pos": {
        "name": "get_value_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Slider"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_value_pos: ",
        "prefix_py": "get_value_pos=()"
    },
    "on_max": {
        "name": "on_max",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Slider"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "on_max: ",
        "prefix_py": "on_max=()"
    },
    "on_min": {
        "name": "on_min",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Slider"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "on_min: ",
        "prefix_py": "on_min=()"
    },
    "range": {
        "name": "range",
        "type": "ReferenceListProperty",
        "help": "ReferenceListProperty(*largs, **kw)\nProperty that allows the creation of a tuple of other properties.\n\n    For example, if `x` and `y` are :class:`NumericProperty`\\s, we can create a\n    :class:`ReferenceListProperty` for the `pos`. If you change the value of\n    `pos`, it will automatically change the values of `x` and `y` accordingly.\n    If you read the value of `pos`, it will return a tuple with the values of\n    `x` and `y`.\n\n    For example::\n\n        class MyWidget(EventDispatcher):\n            x = NumericProperty(0)\n            y = NumericProperty(0)\n            pos = ReferenceListProperty(x, y)\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "range: ()",
        "prefix_py": "range=()"
    },
    "sensitivity": {
        "name": "sensitivity",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "sensitivity: ''",
        "prefix_py": "sensitivity=''"
    },
    "set_value_pos": {
        "name": "set_value_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Slider"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "set_value_pos: ",
        "prefix_py": "set_value_pos=()"
    },
    "step": {
        "name": "step",
        "type": "BoundedNumericProperty",
        "help": "BoundedNumericProperty(*largs, **kw)\nProperty that represents a numeric value within a minimum bound and/or\n    maximum bound -- within a numeric range.\n\n    :Parameters:\n        `default`: numeric\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            If a `min` parameter is included, this specifies the minimum\n            numeric value that will be accepted.\n            If a `max` parameter is included, this specifies the maximum\n            numeric value that will be accepted.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "step: ",
        "prefix_py": "step="
    },
    "value_pos": {
        "name": "value_pos",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "value_pos",
        "prefix_py": "value_pos."
    },
    "value_track": {
        "name": "value_track",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "value_track: True",
        "prefix_py": "value_track=True"
    },
    "value_track_color": {
        "name": "value_track_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "value_track_color: ",
        "prefix_py": "value_track_color=()"
    },
    "value_track_width": {
        "name": "value_track_width",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Slider"
        ],
        "prefix_kv": "value_track_width: ",
        "prefix_py": "value_track_width="
    },
    "SpinnerOption": {
        "name": "SpinnerOption",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.spinner import SpinnerOption",
        "help": "Special button used in the :class:`Spinner` dropdown list. By default,\nthis is just a :class:`~kivy.uix.button.Button` with a size_hint_y of None\nand a height of :meth:`48dp <kivy.metrics.dp>`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SpinnerOption:\n    ",
        "prefix_py": "SpinnerOption()"
    },
    "Splitter": {
        "name": "Splitter",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.splitter import Splitter",
        "help": "See module documentation.\n\n:Events:\n    `on_press`:\n        Fired when the splitter is pressed.\n    `on_release`:\n        Fired when the splitter is released.\n\n.. versionchanged:: 1.6.0\n    Added `on_press` and `on_release` events.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Splitter:\n    ",
        "prefix_py": "Splitter()"
    },
    "_bound_parent": {
        "name": "_bound_parent",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "_bound_parent: ",
        "prefix_py": "_bound_parent="
    },
    "_do_size": {
        "name": "_do_size",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_do_size: ",
        "prefix_py": "_do_size=()"
    },
    "_is_moving": {
        "name": "_is_moving",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "sz_frm",
            "diff",
            "pos",
            "minpos",
            "maxpos"
        ],
        "prefix_kv": "_is_moving: ",
        "prefix_py": "_is_moving=()"
    },
    "_parent_proportion": {
        "name": "_parent_proportion",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "_parent_proportion: ",
        "prefix_py": "_parent_proportion="
    },
    "_rebind_parent": {
        "name": "_rebind_parent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "new_parent"
        ],
        "prefix_kv": "_rebind_parent: ",
        "prefix_py": "_rebind_parent=()"
    },
    "keep_within_parent": {
        "name": "keep_within_parent",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "keep_within_parent: True",
        "prefix_py": "keep_within_parent=True"
    },
    "max_size": {
        "name": "max_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "max_size: ",
        "prefix_py": "max_size="
    },
    "min_size": {
        "name": "min_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "min_size: ",
        "prefix_py": "min_size="
    },
    "on_sizable_from": {
        "name": "on_sizable_from",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "sizable_from"
        ],
        "prefix_kv": "on_sizable_from: ",
        "prefix_py": "on_sizable_from=()"
    },
    "rescale_parent_proportion": {
        "name": "rescale_parent_proportion",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "rescale_parent_proportion: ",
        "prefix_py": "rescale_parent_proportion=()"
    },
    "rescale_with_parent": {
        "name": "rescale_with_parent",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "rescale_with_parent: True",
        "prefix_py": "rescale_with_parent=True"
    },
    "sizable_from": {
        "name": "sizable_from",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "sizable_from: ''",
        "prefix_py": "sizable_from=''"
    },
    "strip_cls": {
        "name": "strip_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "strip_cls: ",
        "prefix_py": "strip_cls="
    },
    "strip_down": {
        "name": "strip_down",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "touch"
        ],
        "prefix_kv": "strip_down: ",
        "prefix_py": "strip_down=()"
    },
    "strip_move": {
        "name": "strip_move",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "touch"
        ],
        "prefix_kv": "strip_move: ",
        "prefix_py": "strip_move=()"
    },
    "strip_size": {
        "name": "strip_size",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Splitter"
        ],
        "prefix_kv": "strip_size: ",
        "prefix_py": "strip_size="
    },
    "strip_up": {
        "name": "strip_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Splitter"
        ],
        "parametters": [
            "self",
            "instance",
            "touch"
        ],
        "prefix_kv": "strip_up: ",
        "prefix_py": "strip_up=()"
    },
    "SplitterStrip": {
        "name": "SplitterStrip",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.splitter import SplitterStrip",
        "help": "Class used for the graphical representation of a\n:class:`kivy.uix.splitter.SplitterStripe`.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "SplitterStrip:\n    ",
        "prefix_py": "SplitterStrip()"
    },
    "StackLayout": {
        "name": "StackLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.stacklayout import StackLayout",
        "help": "Stack layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "StackLayout:\n    ",
        "prefix_py": "StackLayout()"
    },
    "Switch": {
        "name": "Switch",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.switch import Switch",
        "help": "Switch class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Switch:\n    ",
        "prefix_py": "Switch()"
    },
    "active_norm_pos": {
        "name": "active_norm_pos",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Switch"
        ],
        "prefix_kv": "active_norm_pos: ",
        "prefix_py": "active_norm_pos="
    },
    "touch_control": {
        "name": "touch_control",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Switch"
        ],
        "prefix_kv": "touch_control: ",
        "prefix_py": "touch_control="
    },
    "touch_distance": {
        "name": "touch_distance",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Switch"
        ],
        "prefix_kv": "touch_distance: ",
        "prefix_py": "touch_distance="
    },
    "StripLayout": {
        "name": "StripLayout",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.tabbedpanel import StripLayout",
        "help": "The main layout that is used to house the entire tabbedpanel strip\nincluding the blank areas in case the tabs don't cover the entire\nwidth/height.\n\n.. versionadded:: 1.8.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "StripLayout:\n    ",
        "prefix_py": "StripLayout()"
    },
    "TabbedPanel": {
        "name": "TabbedPanel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.tabbedpanel import TabbedPanel",
        "help": "The TabbedPanel class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanel:\n    ",
        "prefix_py": "TabbedPanel()"
    },
    "_current_tab": {
        "name": "_current_tab",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "_current_tab: ",
        "prefix_py": "_current_tab="
    },
    "_default_tab": {
        "name": "_default_tab",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "_default_tab: ",
        "prefix_py": "_default_tab="
    },
    "_load_default_tab_content": {
        "name": "_load_default_tab_content",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_load_default_tab_content: ",
        "prefix_py": "_load_default_tab_content=()"
    },
    "_reposition_tabs": {
        "name": "_reposition_tabs",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_reposition_tabs: ",
        "prefix_py": "_reposition_tabs=()"
    },
    "_setup_default_tab": {
        "name": "_setup_default_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_setup_default_tab: ",
        "prefix_py": "_setup_default_tab=()"
    },
    "_switch_to_first_tab": {
        "name": "_switch_to_first_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_switch_to_first_tab: ",
        "prefix_py": "_switch_to_first_tab=()"
    },
    "_update_scrollview": {
        "name": "_update_scrollview",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "scrl_v",
            "l"
        ],
        "prefix_kv": "_update_scrollview: ",
        "prefix_py": "_update_scrollview=()"
    },
    "_update_tab_ev": {
        "name": "_update_tab_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "_update_tab_ev: ",
        "prefix_py": "_update_tab_ev=()"
    },
    "_update_tab_width": {
        "name": "_update_tab_width",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_update_tab_width: ",
        "prefix_py": "_update_tab_width=()"
    },
    "_update_tabs": {
        "name": "_update_tabs",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_update_tabs: ",
        "prefix_py": "_update_tabs=()"
    },
    "_update_tabs_ev": {
        "name": "_update_tabs_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "_update_tabs_ev: ",
        "prefix_py": "_update_tabs_ev=()"
    },
    "_update_top": {
        "name": "_update_top",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_update_top: ",
        "prefix_py": "_update_top=()"
    },
    "_update_top_ev": {
        "name": "_update_top_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "_update_top_ev: ",
        "prefix_py": "_update_top_ev=()"
    },
    "_updt_top": {
        "name": "_updt_top",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "sctr",
            "top",
            "scrl_v_width",
            "args"
        ],
        "prefix_kv": "_updt_top: ",
        "prefix_py": "_updt_top=()"
    },
    "background_disabled_image": {
        "name": "background_disabled_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "background_disabled_image: ''",
        "prefix_py": "background_disabled_image=''"
    },
    "clear_tabs": {
        "name": "clear_tabs",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "clear_tabs: ",
        "prefix_py": "clear_tabs=()"
    },
    "current_tab": {
        "name": "current_tab",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "current_tab",
        "prefix_py": "current_tab."
    },
    "default_tab": {
        "name": "default_tab",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "default_tab",
        "prefix_py": "default_tab."
    },
    "default_tab_cls": {
        "name": "default_tab_cls",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "default_tab_cls: ",
        "prefix_py": "default_tab_cls="
    },
    "default_tab_content": {
        "name": "default_tab_content",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "default_tab_content",
        "prefix_py": "default_tab_content."
    },
    "default_tab_text": {
        "name": "default_tab_text",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "default_tab_text: ''",
        "prefix_py": "default_tab_text=''"
    },
    "do_default_tab": {
        "name": "do_default_tab",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "do_default_tab: True",
        "prefix_py": "do_default_tab=True"
    },
    "get_current_tab": {
        "name": "get_current_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_current_tab: ",
        "prefix_py": "get_current_tab=()"
    },
    "get_def_tab": {
        "name": "get_def_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_def_tab: ",
        "prefix_py": "get_def_tab=()"
    },
    "get_def_tab_content": {
        "name": "get_def_tab_content",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_def_tab_content: ",
        "prefix_py": "get_def_tab_content=()"
    },
    "get_tab_list": {
        "name": "get_tab_list",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_tab_list: ",
        "prefix_py": "get_tab_list=()"
    },
    "on_default_tab_text": {
        "name": "on_default_tab_text",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "on_default_tab_text: ",
        "prefix_py": "on_default_tab_text=()"
    },
    "on_do_default_tab": {
        "name": "on_do_default_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_do_default_tab: ",
        "prefix_py": "on_do_default_tab=()"
    },
    "on_strip_border": {
        "name": "on_strip_border",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_strip_border: ",
        "prefix_py": "on_strip_border=()"
    },
    "on_strip_image": {
        "name": "on_strip_image",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_strip_image: ",
        "prefix_py": "on_strip_image=()"
    },
    "on_tab_height": {
        "name": "on_tab_height",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_tab_height: ",
        "prefix_py": "on_tab_height=()"
    },
    "on_tab_pos": {
        "name": "on_tab_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_tab_pos: ",
        "prefix_py": "on_tab_pos=()"
    },
    "on_tab_width": {
        "name": "on_tab_width",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "on_tab_width: ",
        "prefix_py": "on_tab_width=()"
    },
    "set_def_tab": {
        "name": "set_def_tab",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "new_tab"
        ],
        "prefix_kv": "set_def_tab: ",
        "prefix_py": "set_def_tab=()"
    },
    "set_def_tab_content": {
        "name": "set_def_tab_content",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TabbedPanel"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "set_def_tab_content: ",
        "prefix_py": "set_def_tab_content=()"
    },
    "strip_border": {
        "name": "strip_border",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "strip_border: ()",
        "prefix_py": "strip_border=()"
    },
    "strip_image": {
        "name": "strip_image",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "strip_image: ''",
        "prefix_py": "strip_image=''"
    },
    "tab_height": {
        "name": "tab_height",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "tab_height: ",
        "prefix_py": "tab_height="
    },
    "tab_list": {
        "name": "tab_list",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "tab_list",
        "prefix_py": "tab_list."
    },
    "tab_pos": {
        "name": "tab_pos",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanel"
        ],
        "prefix_kv": "tab_pos: ''",
        "prefix_py": "tab_pos=''"
    },
    "TabbedPanelContent": {
        "name": "TabbedPanelContent",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.tabbedpanel import TabbedPanelContent",
        "help": "The TabbedPanelContent class.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanelContent:\n    ",
        "prefix_py": "TabbedPanelContent()"
    },
    "TabbedPanelException": {
        "name": "TabbedPanelException",
        "type": "type",
        "import": "from kivy.uix.tabbedpanel import TabbedPanelException",
        "help": "The TabbedPanelException class.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanelException: ",
        "prefix_py": "TabbedPanelException="
    },
    "TabbedPanelItem": {
        "name": "TabbedPanelItem",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.tabbedpanel import TabbedPanelItem",
        "help": "This is a convenience class that provides a header of type\nTabbedPanelHeader and links it with the content automatically. Thus\nfacilitating you to simply do the following in kv language:\n\n.. code-block:: kv\n\n    <TabbedPanel>:\n        # ...other settings\n        TabbedPanelItem:\n            BoxLayout:\n                Label:\n                    text: 'Second tab content area'\n                Button:\n                    text: 'Button that does nothing'\n\n.. versionadded:: 1.5.0",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanelItem:\n    ",
        "prefix_py": "TabbedPanelItem()"
    },
    "TabbedPanelStrip": {
        "name": "TabbedPanelStrip",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.tabbedpanel import TabbedPanelStrip",
        "help": "A strip intended to be used as background for Heading/Tab.\nThis does not cover the blank areas in case the tabs don't cover\nthe entire width/height of the TabbedPanel(use :class:`StripLayout`\nfor that).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TabbedPanelStrip:\n    ",
        "prefix_py": "TabbedPanelStrip()"
    },
    "tabbed_panel": {
        "name": "tabbed_panel",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TabbedPanelStrip"
        ],
        "prefix_kv": "tabbed_panel: ",
        "prefix_py": "tabbed_panel="
    },
    "Selector": {
        "name": "Selector",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.textinput import Selector",
        "help": "Default template for the selection Handles\n\nIn order to customize the look of the Selection Handles,\nyou should adjust its template like so ::\n\n    <Selector>\n        color: 1, 0, 1, 1",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Selector:\n    ",
        "prefix_py": "Selector()"
    },
    "target": {
        "name": "target",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Selector",
            "Texture",
            "VKeyboard"
        ],
        "prefix_kv": "target: ",
        "prefix_py": "target="
    },
    "transform_touch": {
        "name": "transform_touch",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Selector",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "transform_touch: ",
        "prefix_py": "transform_touch=()"
    },
    "update_transform": {
        "name": "update_transform",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Selector",
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "cb"
        ],
        "prefix_kv": "update_transform: ",
        "prefix_py": "update_transform=()"
    },
    "window": {
        "name": "window",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Selector"
        ],
        "prefix_kv": "window: ",
        "prefix_py": "window="
    },
    "TextInputCutCopyPaste": {
        "name": "TextInputCutCopyPaste",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.textinput import TextInputCutCopyPaste",
        "help": "Bubble class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TextInputCutCopyPaste:\n    ",
        "prefix_py": "TextInputCutCopyPaste()"
    },
    "_check_parent": {
        "name": "_check_parent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "dt"
        ],
        "prefix_kv": "_check_parent: ",
        "prefix_py": "_check_parent=()"
    },
    "_check_parent_ev": {
        "name": "_check_parent_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "_check_parent_ev: ",
        "prefix_py": "_check_parent_ev=()"
    },
    "but_copy": {
        "name": "but_copy",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "but_copy: ",
        "prefix_py": "but_copy="
    },
    "but_cut": {
        "name": "but_cut",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "but_cut: ",
        "prefix_py": "but_cut="
    },
    "but_paste": {
        "name": "but_paste",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "but_paste: ",
        "prefix_py": "but_paste="
    },
    "but_selectall": {
        "name": "but_selectall",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "prefix_kv": "but_selectall: ",
        "prefix_py": "but_selectall="
    },
    "do": {
        "name": "do",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "action"
        ],
        "prefix_kv": "do: ",
        "prefix_py": "do=()"
    },
    "hide": {
        "name": "hide",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "hide: ",
        "prefix_py": "hide=()"
    },
    "on_parent": {
        "name": "on_parent",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TextInputCutCopyPaste"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_parent: ",
        "prefix_py": "on_parent=()"
    },
    "on_textinput": {
        "name": "on_textinput",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TextInputCutCopyPaste",
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_textinput: ",
        "prefix_py": "on_textinput=()"
    },
    "Texture": {
        "name": "Texture",
        "type": "type",
        "import": "from kivy.uix.textinput import Texture",
        "help": "Texture(width, height, target, texid=0, colorfmt=u'rgb', bufferfmt=u'ubyte', mipmap=False, source=None, callback=None, icolorfmt=u'rgb')\nHandle an OpenGL texture. This class can be used to create simple\n    textures or complex textures based on ImageData.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Texture: ",
        "prefix_py": "Texture="
    },
    "_on_proxyimage_loaded": {
        "name": "_on_proxyimage_loaded",
        "type": "cython_function_or_method",
        "help": "Texture._on_proxyimage_loaded(self, image)",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "_on_proxyimage_loaded",
        "prefix_py": "_on_proxyimage_loaded."
    },
    "_sequenced_textures": {
        "name": "_sequenced_textures",
        "type": "dict",
        "help": "dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "_sequenced_textures: {}",
        "prefix_py": "_sequenced_textures={}"
    },
    "blit_buffer": {
        "name": "blit_buffer",
        "type": "cython_function_or_method",
        "help": "Texture.blit_buffer(self, pbuffer, size=None, colorfmt=None, pos=None, bufferfmt=None, mipmap_level=0, mipmap_generation=True, int rowlength=0)\nBlit a buffer into the texture.\n\n        .. note::\n\n            Unless the canvas will be updated due to other changes,\n            :meth:`~kivy.graphics.instructions.Canvas.ask_update` should be\n            called in order to update the texture.\n\n        :Parameters:\n            `pbuffer`: bytes, or a class that implements the buffer interface (including memoryview).\n                A buffer containing the image data. It can be either a bytes\n                object or a instance of a class that implements the python\n                buffer interface, e.g. `array.array`, `bytearray`, numpy arrays\n                etc. If it's not a bytes object, the underlying buffer must\n                be contiguous, have only one dimension and must not be\n                readonly, even though the data is not modified, due to a cython\n                limitation. See module description for usage details.\n            `size`: tuple, defaults to texture size\n                Size of the image (width, height)\n            `colorfmt`: str, defaults to 'rgb'\n                Image format, can be one of 'rgb', 'rgba', 'bgr', 'bgra',\n                'luminance' or 'luminance_alpha'.\n            `pos`: tuple, defaults to (0, 0)\n                Position to blit in the texture.\n            `bufferfmt`: str, defaults to 'ubyte'\n                Type of the data buffer, can be one of 'ubyte', 'ushort',\n                'uint', 'byte', 'short', 'int' or 'float'.\n            `mipmap_level`: int, defaults to 0\n                Indicate which mipmap level we are going to update.\n            `mipmap_generation`: bool, defaults to True\n                Indicate if we need to regenerate the mipmap from level 0.\n\n        .. versionchanged:: 1.0.7\n\n            added `mipmap_level` and `mipmap_generation`\n\n        .. versionchanged:: 1.9.0\n            `pbuffer` can now be any class instance that implements the python\n            buffer interface and / or memoryviews thereof.\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "blit_buffer",
        "prefix_py": "blit_buffer."
    },
    "blit_data": {
        "name": "blit_data",
        "type": "cython_function_or_method",
        "help": "Texture.blit_data(self, im, pos=None)\nReplace a whole texture with image data.\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "blit_data",
        "prefix_py": "blit_data."
    },
    "bufferfmt": {
        "name": "bufferfmt",
        "type": "getset_descriptor",
        "help": "Return the buffer format used in this texture (readonly).\n\n.. versionadded:: 1.2.0",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "bufferfmt: ",
        "prefix_py": "bufferfmt="
    },
    "colorfmt": {
        "name": "colorfmt",
        "type": "getset_descriptor",
        "help": "Return the color format used in this texture (readonly).\n\n.. versionadded:: 1.0.7",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "colorfmt: ",
        "prefix_py": "colorfmt="
    },
    "create": {
        "name": "create",
        "type": "cython_function_or_method",
        "help": "texture_create(size=None, colorfmt=None, bufferfmt=None, mipmap=False, callback=None, icolorfmt=None)\nCreate a texture based on size.\n\n    :Parameters:\n        `size`: tuple, defaults to (128, 128)\n            Size of the texture.\n        `colorfmt`: str, defaults to 'rgba'\n            Color format of the texture. Can be 'rgba' or 'rgb',\n            'luminance' or 'luminance_alpha'. On desktop, additional values are\n            available: 'red', 'rg'.\n        `icolorfmt`: str, defaults to the value of `colorfmt`\n            Internal format storage of the texture. Can be 'rgba' or 'rgb',\n            'luminance' or 'luminance_alpha'. On desktop, additional values are\n            available: 'r8', 'rg8', 'rgba8'.\n        `bufferfmt`: str, defaults to 'ubyte'\n            Internal buffer format of the texture. Can be 'ubyte', 'ushort',\n            'uint', 'bute', 'short', 'int' or 'float'.\n        `mipmap`: bool, defaults to False\n            If True, it will automatically generate the mipmap texture.\n        `callback`: callable(), defaults to False\n            If a function is provided, it will be called when data is\n            needed in the texture.\n\n    .. versionchanged:: 1.7.0\n        :attr:`callback` has been added\n    ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "create",
        "prefix_py": "create."
    },
    "create_from_data": {
        "name": "create_from_data",
        "type": "cython_function_or_method",
        "help": "texture_create_from_data(im, mipmap=False)\nCreate a texture from an ImageData class.\n    ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "create_from_data",
        "prefix_py": "create_from_data."
    },
    "flip_horizontal": {
        "name": "flip_horizontal",
        "type": "cython_function_or_method",
        "help": "Texture.flip_horizontal(self)\nFlip tex_coords for horizontal display.\n\n        .. versionadded:: 1.9.0\n\n        ",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "flip_horizontal",
        "prefix_py": "flip_horizontal."
    },
    "flip_vertical": {
        "name": "flip_vertical",
        "type": "cython_function_or_method",
        "help": "Texture.flip_vertical(self)\nFlip tex_coords for vertical display.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "flip_vertical",
        "prefix_py": "flip_vertical."
    },
    "get_region": {
        "name": "get_region",
        "type": "cython_function_or_method",
        "help": "Texture.get_region(self, x, y, width, height)\nReturn a part of the texture defined by the rectangular arguments\n        (x, y, width, height). Returns a :class:`TextureRegion` instance.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "get_region",
        "prefix_py": "get_region."
    },
    "id": {
        "name": "id",
        "type": "getset_descriptor",
        "help": "Return the OpenGL ID of the texture (readonly).\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "id: ",
        "prefix_py": "id="
    },
    "mag_filter": {
        "name": "mag_filter",
        "type": "getset_descriptor",
        "help": "Get/set the mag filter texture. Available values:\n\n- linear\n- nearest\n\nCheck the opengl documentation for more information about the behavior\nof these values :\nhttp://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "mag_filter: ",
        "prefix_py": "mag_filter="
    },
    "min_filter": {
        "name": "min_filter",
        "type": "getset_descriptor",
        "help": "Get/set the min filter texture. Available values:\n\n- linear\n- nearest\n- linear_mipmap_linear\n- linear_mipmap_nearest\n- nearest_mipmap_nearest\n- nearest_mipmap_linear\n\nCheck the opengl documentation for more information about the behavior\nof these values :\nhttp://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "min_filter: ",
        "prefix_py": "min_filter="
    },
    "uvpos": {
        "name": "uvpos",
        "type": "getset_descriptor",
        "help": "Get/set the UV position inside the texture.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "uvpos: ",
        "prefix_py": "uvpos="
    },
    "uvsize": {
        "name": "uvsize",
        "type": "getset_descriptor",
        "help": "Get/set the UV size inside the texture.\n\n.. warning::\n    The size can be negative if the texture is flipped.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "uvsize: ",
        "prefix_py": "uvsize="
    },
    "wrap": {
        "name": "wrap",
        "type": "getset_descriptor",
        "help": "Get/set the wrap texture. Available values:\n\n- repeat\n- mirrored_repeat\n- clamp_to_edge\n\nCheck the opengl documentation for more information about the behavior\nof these values :\nhttp://www.khronos.org/opengles/sdk/docs/man/xhtml/glTexParameter.xml.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Texture"
        ],
        "prefix_kv": "wrap: ",
        "prefix_py": "wrap="
    },
    "Transform": {
        "name": "Transform",
        "type": "type",
        "import": "from kivy.uix.textinput import Transform",
        "help": "Transform(*args, **kwargs)\nTransform class. A matrix instruction class which\n    modifies the transformation matrix.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Transform: ",
        "prefix_py": "Transform="
    },
    "TreeView": {
        "name": "TreeView",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.treeview import TreeView",
        "help": "TreeView class. See module documentation for more information.\n\n:Events:\n    `on_node_expand`: (node, )\n        Fired when a node is being expanded\n    `on_node_collapse`: (node, )\n        Fired when a node is being collapsed",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TreeView:\n    ",
        "prefix_py": "TreeView()"
    },
    "_do_initial_load": {
        "name": "_do_initial_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_do_initial_load: ",
        "prefix_py": "_do_initial_load=()"
    },
    "_do_layout_node": {
        "name": "_do_layout_node",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node",
            "level",
            "y"
        ],
        "prefix_kv": "_do_layout_node: ",
        "prefix_py": "_do_layout_node=()"
    },
    "_do_node_load": {
        "name": "_do_node_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "_do_node_load: ",
        "prefix_py": "_do_node_load=()"
    },
    "_do_open_node": {
        "name": "_do_open_node",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "_do_open_node: ",
        "prefix_py": "_do_open_node=()"
    },
    "_root": {
        "name": "_root",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "_root: ",
        "prefix_py": "_root="
    },
    "_selected_node": {
        "name": "_selected_node",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "_selected_node: ",
        "prefix_py": "_selected_node="
    },
    "add_node": {
        "name": "add_node",
        "type": "function",
        "help": "Add a new node to the tree.\n\n:Parameters:\n    `node`: instance of a :class:`TreeViewNode`\n        Node to add into the tree\n    `parent`: instance of a :class:`TreeViewNode`, defaults to None\n        Parent node to attach the new node. If `None`, it is added to\n        the :attr:`root` node.\n\n:returns:\n    the node `node`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node",
            "parent"
        ],
        "prefix_kv": "add_node: ",
        "prefix_py": "add_node=()"
    },
    "get_node_at_pos": {
        "name": "get_node_at_pos",
        "type": "function",
        "help": "Get the node at the position (x, y).\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "get_node_at_pos: ",
        "prefix_py": "get_node_at_pos=()"
    },
    "get_root": {
        "name": "get_root",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_root: ",
        "prefix_py": "get_root=()"
    },
    "get_selected_node": {
        "name": "get_selected_node",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "get_selected_node: ",
        "prefix_py": "get_selected_node=()"
    },
    "hide_root": {
        "name": "hide_root",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "hide_root: True",
        "prefix_py": "hide_root=True"
    },
    "indent_level": {
        "name": "indent_level",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "indent_level: ",
        "prefix_py": "indent_level="
    },
    "indent_start": {
        "name": "indent_start",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "indent_start: ",
        "prefix_py": "indent_start="
    },
    "iterate_all_nodes": {
        "name": "iterate_all_nodes",
        "type": "function",
        "help": "Generator to iterate over all nodes from `node` and down whether\nexpanded or not. If `node` is `None`, the generator start with\n:attr:`root`.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "iterate_all_nodes: ",
        "prefix_py": "iterate_all_nodes=()"
    },
    "iterate_open_nodes": {
        "name": "iterate_open_nodes",
        "type": "function",
        "help": "Generator to iterate over all the expended nodes starting from\n`node` and down. If `node` is `None`, the generator start with\n:attr:`root`.\n\nTo get all the open nodes::\n\n    treeview = TreeView()\n    # ... add nodes ...\n    for node in treeview.iterate_open_nodes():\n        print(node)",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "iterate_open_nodes: ",
        "prefix_py": "iterate_open_nodes=()"
    },
    "load_func": {
        "name": "load_func",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "load_func: ",
        "prefix_py": "load_func="
    },
    "on_load_func": {
        "name": "on_load_func",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_load_func: ",
        "prefix_py": "on_load_func=()"
    },
    "on_node_collapse": {
        "name": "on_node_collapse",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "on_node_collapse: ",
        "prefix_py": "on_node_collapse=()"
    },
    "on_node_expand": {
        "name": "on_node_expand",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "on_node_expand: ",
        "prefix_py": "on_node_expand=()"
    },
    "on_root_options": {
        "name": "on_root_options",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_root_options: ",
        "prefix_py": "on_root_options=()"
    },
    "remove_node": {
        "name": "remove_node",
        "type": "function",
        "help": "Removes a node from the tree.\n\n.. versionadded:: 1.0.7\n\n:Parameters:\n    `node`: instance of a :class:`TreeViewNode`\n        Node to remove from the tree. If `node` is :attr:`root`, it is\n        not removed.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "remove_node: ",
        "prefix_py": "remove_node=()"
    },
    "root": {
        "name": "root",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView",
            ""
        ],
        "prefix_kv": "root",
        "prefix_py": "root."
    },
    "root_options": {
        "name": "root_options",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "root_options: ",
        "prefix_py": "root_options="
    },
    "selected_node": {
        "name": "selected_node",
        "type": "AliasProperty",
        "help": "AliasProperty(getter, setter=None, rebind=False, watch_before_use=True, **kwargs)\nCreate a property with a custom getter and setter.\n\n    If you don't find a Property class that fits to your needs, you can make\n    your own by creating custom Python getter and setter methods.\n\n    Example from kivy/uix/widget.py where `x` and `width` are instances of\n    :class:`NumericProperty`::\n\n        def get_right(self):\n            return self.x + self.width\n        def set_right(self, value):\n            self.x = value - self.width\n        right = AliasProperty(get_right, set_right, bind=['x', 'width'])\n\n    If `x` were a non Kivy property then you have to return `True` from setter\n    to dispatch new value of `right`::\n\n        def set_right(self, value):\n            self.x = value - self.width\n            return True\n\n    Usually `bind` list should contain all Kivy properties used in getter\n    method. If you return `True` it will cause a dispatch which one should do\n    when the property value has changed, but keep in mind that the property\n    could already have dispatched the changed value if a kivy property the\n    alias property is bound was set in the setter, causing a second dispatch\n    if the setter returns `True`.\n\n    If you want to cache the value returned by getter then pass `cache=True`.\n    This way getter will only be called if new value is set or one of the\n    binded properties changes. In both cases new value of alias property will\n    be cached again.\n\n    To make property readonly pass `None` as setter. This way `AttributeError`\n    will be raised on every set attempt::\n\n        right = AliasProperty(get_right, None, bind=['x', 'width'], cache=True)\n\n    :Parameters:\n        `getter`: function\n            Function to use as a property getter.\n        `setter`: function\n            Function to use as a property setter. Callbacks bound to the\n            alias property won't be called when the property is set (e.g.\n            `right = 10`), unless the setter returns `True`.\n        `bind`: list/tuple\n            Properties to observe for changes as property name strings.\n            Changing values of this properties will dispatch value of the\n            alias property.\n        `cache`: boolean\n            If `True`, the value will be cached until one of the binded\n            elements changes or if setter returns `True`.\n        `rebind`: bool, defaults to `False`\n            See :class:`ObjectProperty` for details.\n        `watch_before_use`: bool, defaults to ``True``\n            Whether the ``bind`` properties are tracked (bound) before this\n            property is used in any way.\n\n            By default, the getter is called if the ``bind`` properties update\n            or if the property value (unless cached) is read. As an\n            optimization to speed up widget creation, when ``watch_before_use``\n            is False, we only track the bound properties once this property is\n            used in any way (i.e. it is bound, it was set/read, etc).\n\n            The property value read/set/bound will be correct as expected in\n            both cases. The difference is only that when ``False``, any side\n            effects from the ``getter`` would not occur until this property is\n            interacted with in any way because the ``getter`` won't be called\n            early.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.4.0\n        Parameter `cache` added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeView"
        ],
        "prefix_kv": "selected_node",
        "prefix_py": "selected_node."
    },
    "toggle_node": {
        "name": "toggle_node",
        "type": "function",
        "help": "Toggle the state of the node (open/collapsed).\n        ",
        "callable": true,
        "mtype": "function",
        "parent": [
            "TreeView"
        ],
        "parametters": [
            "self",
            "node"
        ],
        "prefix_kv": "toggle_node: ",
        "prefix_py": "toggle_node=()"
    },
    "TreeViewException": {
        "name": "TreeViewException",
        "type": "type",
        "import": "from kivy.uix.treeview import TreeViewException",
        "help": "Exception for errors in the :class:`TreeView`.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TreeViewException: ",
        "prefix_py": "TreeViewException="
    },
    "TreeViewLabel": {
        "name": "TreeViewLabel",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.treeview import TreeViewLabel",
        "help": "Combines a :class:`~kivy.uix.label.Label` and a :class:`TreeViewNode` to\ncreate a :class:`TreeViewLabel` that can be used as a text node in the\ntree.\n\nSee module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TreeViewLabel:\n    ",
        "prefix_py": "TreeViewLabel()"
    },
    "color_selected": {
        "name": "color_selected",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "color_selected: ",
        "prefix_py": "color_selected=()"
    },
    "even_color": {
        "name": "even_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "even_color: ",
        "prefix_py": "even_color=()"
    },
    "is_leaf": {
        "name": "is_leaf",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "is_leaf: True",
        "prefix_py": "is_leaf=True"
    },
    "is_loaded": {
        "name": "is_loaded",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "is_loaded: True",
        "prefix_py": "is_loaded=True"
    },
    "is_selected": {
        "name": "is_selected",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "is_selected: True",
        "prefix_py": "is_selected=True"
    },
    "level": {
        "name": "level",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "level: ",
        "prefix_py": "level="
    },
    "no_selection": {
        "name": "no_selection",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "no_selection: True",
        "prefix_py": "no_selection=True"
    },
    "nodes": {
        "name": "nodes",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "nodes: ()",
        "prefix_py": "nodes=()"
    },
    "odd": {
        "name": "odd",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "odd: True",
        "prefix_py": "odd=True"
    },
    "odd_color": {
        "name": "odd_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "odd_color: ",
        "prefix_py": "odd_color=()"
    },
    "parent_node": {
        "name": "parent_node",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "TreeViewLabel",
            "TreeViewNode"
        ],
        "prefix_kv": "parent_node: ",
        "prefix_py": "parent_node="
    },
    "TreeViewNode": {
        "name": "TreeViewNode",
        "type": "type",
        "import": "from kivy.uix.treeview import TreeViewNode",
        "help": "TreeViewNode class, used to build a node class for a TreeView object.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "TreeViewNode: ",
        "prefix_py": "TreeViewNode="
    },
    "CoreVideo": {
        "name": "CoreVideo",
        "type": "type",
        "import": "from kivy.uix.video import CoreVideo",
        "help": "VideoBase implementation when there is no provider.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "CoreVideo: ",
        "prefix_py": "CoreVideo="
    },
    "_async": {
        "name": "_async",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_async: ",
        "prefix_py": "_async="
    },
    "_autoplay": {
        "name": "_autoplay",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_autoplay: ",
        "prefix_py": "_autoplay="
    },
    "_buffer": {
        "name": "_buffer",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_buffer: ",
        "prefix_py": "_buffer="
    },
    "_do_eos": {
        "name": "_do_eos",
        "type": "function",
        "help": ".. versionchanged:: 1.4.0\n    Now dispatches the `on_eos` event.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "args"
        ],
        "prefix_kv": "_do_eos: ",
        "prefix_py": "_do_eos=()"
    },
    "_filename": {
        "name": "_filename",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_filename: ",
        "prefix_py": "_filename="
    },
    "_get_duration": {
        "name": "_get_duration",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_duration: ",
        "prefix_py": "_get_duration=()"
    },
    "_get_position": {
        "name": "_get_position",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_position: ",
        "prefix_py": "_get_position=()"
    },
    "_get_state": {
        "name": "_get_state",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_state: ",
        "prefix_py": "_get_state=()"
    },
    "_get_texture": {
        "name": "_get_texture",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_texture: ",
        "prefix_py": "_get_texture=()"
    },
    "_get_volume": {
        "name": "_get_volume",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_volume: ",
        "prefix_py": "_get_volume=()"
    },
    "_set_position": {
        "name": "_set_position",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "pos"
        ],
        "prefix_kv": "_set_position: ",
        "prefix_py": "_set_position=()"
    },
    "_set_volume": {
        "name": "_set_volume",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self",
            "volume"
        ],
        "prefix_kv": "_set_volume: ",
        "prefix_py": "_set_volume=()"
    },
    "_state": {
        "name": "_state",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_state: ",
        "prefix_py": "_state="
    },
    "_texture": {
        "name": "_texture",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_texture: ",
        "prefix_py": "_texture="
    },
    "_volume": {
        "name": "_volume",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_volume: ",
        "prefix_py": "_volume="
    },
    "_wantplay": {
        "name": "_wantplay",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo"
        ],
        "prefix_kv": "_wantplay: ",
        "prefix_py": "_wantplay="
    },
    "eos": {
        "name": "eos",
        "type": "member_descriptor",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "CoreVideo",
            "Video"
        ],
        "prefix_kv": "eos: ",
        "prefix_py": "eos="
    },
    "on_eos": {
        "name": "on_eos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_eos: ",
        "prefix_py": "on_eos=()"
    },
    "on_frame": {
        "name": "on_frame",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "on_frame: ",
        "prefix_py": "on_frame=()"
    },
    "pause": {
        "name": "pause",
        "type": "function",
        "help": "Pause the video\n\n.. versionadded:: 1.4.0",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "pause: ",
        "prefix_py": "pause=()"
    },
    "unload": {
        "name": "unload",
        "type": "function",
        "help": "Unload the actual video",
        "callable": true,
        "mtype": "function",
        "parent": [
            "CoreVideo",
            "Video"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "unload: ",
        "prefix_py": "unload=()"
    },
    "Video": {
        "name": "Video",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.video import Video",
        "help": "Video class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Video:\n    ",
        "prefix_py": "Video()"
    },
    "_on_eos": {
        "name": "_on_eos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Video"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_on_eos: ",
        "prefix_py": "_on_eos=()"
    },
    "_on_load": {
        "name": "_on_load",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Video"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_on_load: ",
        "prefix_py": "_on_load=()"
    },
    "_on_video_frame": {
        "name": "_on_video_frame",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "Video"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_on_video_frame: ",
        "prefix_py": "_on_video_frame=()"
    },
    "_video_load_event": {
        "name": "_video_load_event",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Video"
        ],
        "prefix_kv": "_video_load_event: ",
        "prefix_py": "_video_load_event=()"
    },
    "loaded": {
        "name": "loaded",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Video"
        ],
        "prefix_kv": "loaded: True",
        "prefix_py": "loaded=True"
    },
    "preview": {
        "name": "preview",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "Video"
        ],
        "prefix_kv": "preview: ''",
        "prefix_py": "preview=''"
    },
    "VideoPlayerAnnotation": {
        "name": "VideoPlayerAnnotation",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerAnnotation",
        "help": "Annotation class used for creating annotation labels.\n\nAdditional keys are available:\n\n* bgcolor: [r, g, b, a] - background color of the text box\n* bgsource: 'filename' - background image used for the background text box\n* border: (n, e, s, w) - border used for the background image",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerAnnotation:\n    ",
        "prefix_py": "VideoPlayerAnnotation()"
    },
    "annotation": {
        "name": "annotation",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VideoPlayerAnnotation"
        ],
        "prefix_kv": "annotation: {}",
        "prefix_py": "annotation={}"
    },
    "on_annotation": {
        "name": "on_annotation",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerAnnotation"
        ],
        "parametters": [
            "self",
            "instance",
            "ann"
        ],
        "prefix_kv": "on_annotation: ",
        "prefix_py": "on_annotation=()"
    },
    "VideoPlayerPlayPause": {
        "name": "VideoPlayerPlayPause",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerPlayPause",
        "help": "Image class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerPlayPause:\n    ",
        "prefix_py": "VideoPlayerPlayPause()"
    },
    "video": {
        "name": "video",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VideoPlayerPlayPause",
            "VideoPlayerPreview",
            "VideoPlayerProgressBar",
            "VideoPlayerStop",
            "VideoPlayerVolume"
        ],
        "prefix_kv": "video: ",
        "prefix_py": "video="
    },
    "VideoPlayerPreview": {
        "name": "VideoPlayerPreview",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerPreview",
        "help": "Float layout class. See module documentation for more information.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerPreview:\n    ",
        "prefix_py": "VideoPlayerPreview()"
    },
    "click_done": {
        "name": "click_done",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VideoPlayerPreview"
        ],
        "prefix_kv": "click_done: True",
        "prefix_py": "click_done=True"
    },
    "VideoPlayerProgressBar": {
        "name": "VideoPlayerProgressBar",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerProgressBar",
        "help": "Class for creating a progress bar widget.\n\nSee module documentation for more details.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerProgressBar:\n    ",
        "prefix_py": "VideoPlayerProgressBar()"
    },
    "_hide_bubble": {
        "name": "_hide_bubble",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_hide_bubble: ",
        "prefix_py": "_hide_bubble=()"
    },
    "_show_bubble": {
        "name": "_show_bubble",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_show_bubble: ",
        "prefix_py": "_show_bubble=()"
    },
    "_showhide_bubble": {
        "name": "_showhide_bubble",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "_showhide_bubble: ",
        "prefix_py": "_showhide_bubble=()"
    },
    "_update_bubble": {
        "name": "_update_bubble",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_update_bubble: ",
        "prefix_py": "_update_bubble=()"
    },
    "_update_seek": {
        "name": "_update_seek",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "x"
        ],
        "prefix_kv": "_update_seek: ",
        "prefix_py": "_update_seek=()"
    },
    "alpha": {
        "name": "alpha",
        "type": "NumericProperty",
        "help": "NumericProperty(defaultvalue=0, **kw)\nProperty that represents a numeric value.\n\n    It only accepts the int or float numeric data type or a string that can be\n    converted to a number as shown below. For other numeric types use ObjectProperty\n    or use errorhandler to convert it to an int/float.\n\n    It does not support numpy numbers so they must be manually converted to int/float.\n    E.g. ``widget.num = np.arange(4)[0]`` will raise an exception. Numpy arrays are not\n    supported at all, even by ObjectProperty because their comparison does not return\n    a bool. But if you must use a Kivy property, use a ObjectProperty with ``comparator``\n    set to ``np.array_equal``. E.g.::\n\n        >>> class A(EventDispatcher):\n        ...     data = ObjectProperty(comparator=np.array_equal)\n        >>> a = A()\n        >>> a.bind(data=print)\n        >>> a.data = np.arange(2)\n        <__main__.A object at 0x000001C839B50208> [0 1]\n        >>> a.data = np.arange(3)\n        <__main__.A object at 0x000001C839B50208> [0 1 2]\n\n    :Parameters:\n        `defaultvalue`: int or float, defaults to 0\n            Specifies the default value of the property.\n\n    >>> wid = Widget()\n    >>> wid.x = 42\n    >>> print(wid.x)\n    42\n    >>> wid.x = \"plop\"\n     Traceback (most recent call last):\n       File \"<stdin>\", line 1, in <module>\n       File \"properties.pyx\", line 93, in kivy.properties.Property.__set__\n       File \"properties.pyx\", line 111, in kivy.properties.Property.set\n       File \"properties.pyx\", line 159, in kivy.properties.NumericProperty.check\n     ValueError: NumericProperty accept only int/float\n\n    .. versionchanged:: 1.4.1\n        NumericProperty can now accept custom text and tuple value to indicate a\n        type, like \"in\", \"pt\", \"px\", \"cm\", \"mm\", in the format: '10pt' or (10,\n        'pt').\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "prefix_kv": "alpha: ",
        "prefix_py": "alpha="
    },
    "on_alpha": {
        "name": "on_alpha",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_alpha: ",
        "prefix_py": "on_alpha=()"
    },
    "on_video": {
        "name": "on_video",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VideoPlayerProgressBar"
        ],
        "parametters": [
            "self",
            "instance",
            "value"
        ],
        "prefix_kv": "on_video: ",
        "prefix_py": "on_video=()"
    },
    "VideoPlayerStop": {
        "name": "VideoPlayerStop",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerStop",
        "help": "Image class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerStop:\n    ",
        "prefix_py": "VideoPlayerStop()"
    },
    "VideoPlayerVolume": {
        "name": "VideoPlayerVolume",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.videoplayer import VideoPlayerVolume",
        "help": "Image class, see module documentation for more information.",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VideoPlayerVolume:\n    ",
        "prefix_py": "VideoPlayerVolume()"
    },
    "BorderImage": {
        "name": "BorderImage",
        "type": "type",
        "import": "from kivy.uix.vkeyboard import BorderImage",
        "help": "BorderImage(**kwargs)\nA 2d border image. The behavior of the border image is similar to the\n    concept of a CSS3 border-image.\n\n    :Parameters:\n        `border`: list\n            Border information in the format (bottom, right, top, left).\n            Each value is in pixels.\n\n        `auto_scale`: string\n            .. versionadded:: 1.9.1\n\n            .. versionchanged:: 1.9.2\n\n                This used to be a bool and has been changed to be a string\n                state.\n\n            Can be one of 'off', 'both', 'x_only', 'y_only', 'y_full_x_lower',\n            'x_full_y_lower', 'both_lower'.\n\n            Autoscale controls the behavior of the 9-slice.\n\n            By default the border values are preserved exactly, meaning that\n            if the total size of the object is smaller than the border values\n            you will have some 'rendering errors' where your texture appears\n            inside out. This also makes it impossible to achieve a rounded\n            button that scales larger than the size of its source texture. The\n            various options for auto_scale will let you achieve some mixes of\n            the 2 types of rendering.\n\n            'off': is the default and behaves as BorderImage did when auto_scale\n            was False before.\n\n            'both': Scales both x and y dimension borders according to the size\n            of the BorderImage, this disables the BorderImage making it render\n            the same as a regular Image.\n\n            'x_only': The Y dimension functions as the default, and the X\n            scales to the size of the BorderImage's width.\n\n            'y_only': The X dimension functions as the default, and the Y\n            scales to the size of the BorderImage's height.\n\n            'y_full_x_lower': Y scales as in 'y_only', Y scales if the\n            size of the scaled version would be smaller than the provided\n            border only.\n\n            'x_full_y_lower': X scales as in 'x_only', Y scales if the\n            size of the scaled version would be smaller than the provided\n            border only.\n\n            'both_lower': This is what auto_scale did when it was True in 1.9.1\n            Both X and Y dimensions will be scaled if the BorderImage is\n            smaller than the source.\n\n            If the BorderImage's size is less than the sum of its\n            borders, horizontally or vertically, and this property is\n            set to True, the borders will be rescaled to accommodate for\n            the smaller size.\n\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "BorderImage: ",
        "prefix_py": "BorderImage="
    },
    "auto_scale": {
        "name": "auto_scale",
        "type": "getset_descriptor",
        "help": "Property for setting if the corners are automatically scaled\nwhen the BorderImage is too small.",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BorderImage"
        ],
        "prefix_kv": "auto_scale: ",
        "prefix_py": "auto_scale="
    },
    "display_border": {
        "name": "display_border",
        "type": "getset_descriptor",
        "help": "Property for getting/setting the border display size.\n        ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "BorderImage"
        ],
        "prefix_kv": "display_border: ",
        "prefix_py": "display_border="
    },
    "Canvas": {
        "name": "Canvas",
        "type": "type",
        "import": "from kivy.uix.vkeyboard import Canvas",
        "help": "Canvas(**kwargs)\nThe important Canvas class. Use this class to add graphics or context\n    instructions that you want to be used for drawing.\n\n    .. note::\n\n        The Canvas supports Python's ``with`` statement and its enter & exit\n        semantics.\n\n    Usage of a canvas without the ``with`` statement::\n\n        self.canvas.add(Color(1., 1., 0))\n        self.canvas.add(Rectangle(size=(50, 50)))\n\n    Usage of a canvas with Python's ``with`` statement::\n\n        with self.canvas:\n            Color(1., 1., 0)\n            Rectangle(size=(50, 50))\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "Canvas: ",
        "prefix_py": "Canvas="
    },
    "VKeyboard": {
        "name": "VKeyboard",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.vkeyboard import VKeyboard",
        "help": "VKeyboard is an onscreen keyboard with multitouch support.\nIts layout is entirely customizable and you can switch between available\nlayouts using a button in the bottom right of the widget.\n\n:Events:\n    `on_key_down`: keycode, internal, modifiers\n        Fired when the keyboard received a key down event (key press).\n    `on_key_up`: keycode, internal, modifiers\n        Fired when the keyboard received a key up event (key release).",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "VKeyboard:\n    ",
        "prefix_py": "VKeyboard()"
    },
    "_get_modifiers": {
        "name": "_get_modifiers",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "_get_modifiers: ",
        "prefix_py": "_get_modifiers=()"
    },
    "_load_layout": {
        "name": "_load_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_load_layout: ",
        "prefix_py": "_load_layout=()"
    },
    "_load_layout_fn": {
        "name": "_load_layout_fn",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "fn",
            "name"
        ],
        "prefix_kv": "_load_layout_fn: ",
        "prefix_py": "_load_layout_fn=()"
    },
    "_load_layouts": {
        "name": "_load_layouts",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "_load_layouts: ",
        "prefix_py": "_load_layouts=()"
    },
    "_repeat_key": {
        "name": "_repeat_key",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "kwargs"
        ],
        "prefix_kv": "_repeat_key: ",
        "prefix_py": "_repeat_key=()"
    },
    "_repeat_key_ev": {
        "name": "_repeat_key_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "_repeat_key_ev: ",
        "prefix_py": "_repeat_key_ev=()"
    },
    "_start_repeat_key": {
        "name": "_start_repeat_key",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "kwargs"
        ],
        "prefix_kv": "_start_repeat_key: ",
        "prefix_py": "_start_repeat_key=()"
    },
    "_start_repeat_key_ev": {
        "name": "_start_repeat_key_ev",
        "type": "NoneType",
        "help": null,
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "_start_repeat_key_ev: ",
        "prefix_py": "_start_repeat_key_ev=()"
    },
    "_update_dock_mode": {
        "name": "_update_dock_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "win",
            "largs"
        ],
        "prefix_kv": "_update_dock_mode: ",
        "prefix_py": "_update_dock_mode=()"
    },
    "_update_layout_mode": {
        "name": "_update_layout_mode",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "l"
        ],
        "prefix_kv": "_update_layout_mode: ",
        "prefix_py": "_update_layout_mode=()"
    },
    "active_keys": {
        "name": "active_keys",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "active_keys: {}",
        "prefix_py": "active_keys={}"
    },
    "available_layouts": {
        "name": "available_layouts",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "available_layouts: {}",
        "prefix_py": "available_layouts={}"
    },
    "background_border": {
        "name": "background_border",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "background_border: ()",
        "prefix_py": "background_border=()"
    },
    "background_disabled": {
        "name": "background_disabled",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "background_disabled: ''",
        "prefix_py": "background_disabled=''"
    },
    "change_layout": {
        "name": "change_layout",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "change_layout: ",
        "prefix_py": "change_layout=()"
    },
    "collide_margin": {
        "name": "collide_margin",
        "type": "function",
        "help": "Do a collision test, and return True if the (x, y) is inside the\nvkeyboard margin.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "collide_margin: ",
        "prefix_py": "collide_margin=()"
    },
    "docked": {
        "name": "docked",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "docked: True",
        "prefix_py": "docked=True"
    },
    "draw_keys": {
        "name": "draw_keys",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "draw_keys: ",
        "prefix_py": "draw_keys=()"
    },
    "get_key_at_pos": {
        "name": "get_key_at_pos",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "x",
            "y"
        ],
        "prefix_kv": "get_key_at_pos: ",
        "prefix_py": "get_key_at_pos=()"
    },
    "have_capslock": {
        "name": "have_capslock",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "have_capslock: True",
        "prefix_py": "have_capslock=True"
    },
    "have_shift": {
        "name": "have_shift",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "have_shift: True",
        "prefix_py": "have_shift=True"
    },
    "have_special": {
        "name": "have_special",
        "type": "BooleanProperty",
        "help": "BooleanProperty(defaultvalue=True, **kw)\nProperty that represents only a boolean value.\n\n    :Parameters:\n        `defaultvalue`: boolean\n            Specifies the default value of the property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "have_special: True",
        "prefix_py": "have_special=True"
    },
    "key_background_color": {
        "name": "key_background_color",
        "type": "ColorProperty",
        "help": "ColorProperty(defaultvalue=0, **kw)\nProperty that represents a color. The assignment can take either:\n\n    - a collection of 3 or 4 float values between 0-1 (kivy default)\n    - a string in the format #rrggbb or #rrggbbaa\n    - a string representing color name (eg. 'red', 'yellow', 'green')\n\n    Object :obj:`~kivy.utils.colormap` is used to retrieve color from color\n    name and names definitions can be found at this\n    `link <https://www.w3.org/TR/SVG11/types.html#ColorKeywords>`_. Color can\n    be assigned in different formats, but it will be returned as\n    :class:`~kivy.properties.ObservableList` of 4 float elements with values\n    between 0-1.\n\n    :Parameters:\n        `defaultvalue`: list or string, defaults to [1.0, 1.0, 1.0, 1.0]\n            Specifies the default value of the property.\n\n    .. versionadded:: 1.10.0\n\n    .. versionchanged:: 2.0.0\n        Color value will be dispatched when set through indexing or slicing,\n        but when setting with slice you must ensure that slice has 4 components\n        with float values between 0-1.\n        Assingning color name as value is now supported.\n        Value `None` is allowed as default value for property.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_background_color: ",
        "prefix_py": "key_background_color=()"
    },
    "key_background_down": {
        "name": "key_background_down",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_background_down: ''",
        "prefix_py": "key_background_down=''"
    },
    "key_background_normal": {
        "name": "key_background_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_background_normal: ''",
        "prefix_py": "key_background_normal=''"
    },
    "key_border": {
        "name": "key_border",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_border: ()",
        "prefix_py": "key_border=()"
    },
    "key_disabled_background_normal": {
        "name": "key_disabled_background_normal",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_disabled_background_normal: ''",
        "prefix_py": "key_disabled_background_normal=''"
    },
    "key_margin": {
        "name": "key_margin",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "key_margin: ()",
        "prefix_py": "key_margin=()"
    },
    "layout_geometry": {
        "name": "layout_geometry",
        "type": "DictProperty",
        "help": "DictProperty(defaultvalue=0, rebind=False, **kw)\nProperty that represents a dict.\n\n    :Parameters:\n        `defaultvalue`: dict, defaults to {}\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            See :class:`ObjectProperty` for details.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. warning::\n\n        Similar to :class:`ListProperty`, when assigning a dict to a\n        :class:`DictProperty`, the dict stored in the property is a shallow copy of the\n        dict and not the original dict. See :class:`ListProperty` for details.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "layout_geometry: {}",
        "prefix_py": "layout_geometry={}"
    },
    "layout_mode": {
        "name": "layout_mode",
        "type": "OptionProperty",
        "help": "OptionProperty(*largs, **kw)\nProperty that represents a string from a predefined list of valid\n    options.\n\n    If the string set in the property is not in the list of valid options\n    (passed at property creation time), a ValueError exception will be raised.\n\n    :Parameters:\n        `default`: any valid type in the list of options\n            Specifies the default value of the property.\n        `\\*\\*kwargs`: a list of keyword arguments\n            Should include an `options` parameter specifying a list (not tuple)\n            of valid options.\n\n    For example::\n\n        class MyWidget(Widget):\n            state = OptionProperty(\"None\", options=[\"On\", \"Off\", \"None\"])\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "layout_mode: ''",
        "prefix_py": "layout_mode=''"
    },
    "layout_path": {
        "name": "layout_path",
        "type": "StringProperty",
        "help": "StringProperty(defaultvalue=u'', **kw)\nProperty that represents a string value.\n\n    :Parameters:\n        `defaultvalue`: string, defaults to ''\n            Specifies the default value of the property.\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "layout_path: ''",
        "prefix_py": "layout_path=''"
    },
    "margin_hint": {
        "name": "margin_hint",
        "type": "ListProperty",
        "help": "ListProperty(defaultvalue=0, **kw)\nProperty that represents a list.\n\n    :Parameters:\n        `defaultvalue`: list, defaults to []\n            Specifies the default value of the property.\n\n    .. warning::\n\n        When assigning a list to a :class:`ListProperty`, the list stored in\n        the property is a shallow copy of the list and not the original list. This can\n        be demonstrated with the following example::\n\n            >>> class MyWidget(Widget):\n            >>>     my_list = ListProperty([])\n\n            >>> widget = MyWidget()\n            >>> my_list = [1, 5, {'hi': 'hello'}]\n            >>> widget.my_list = my_list\n            >>> print(my_list is widget.my_list)\n            False\n            >>> my_list.append(10)\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'hello'}, 10] [1, 5, {'hi': 'hello'}]\n\n        However, changes to nested levels will affect the property as well,\n        since the property uses a shallow copy of my_list.\n\n            >>> my_list[2]['hi'] = 'bye'\n            >>> print(my_list, widget.my_list)\n            [1, 5, {'hi': 'bye'}, 10] [1, 5, {'hi': 'bye'}]\n\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "margin_hint: ()",
        "prefix_py": "margin_hint=()"
    },
    "on_key_up": {
        "name": "on_key_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "on_key_up: ",
        "prefix_py": "on_key_up=()"
    },
    "process_key_on": {
        "name": "process_key_on",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "process_key_on: ",
        "prefix_py": "process_key_on=()"
    },
    "process_key_up": {
        "name": "process_key_up",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "touch"
        ],
        "prefix_kv": "process_key_up: ",
        "prefix_py": "process_key_up=()"
    },
    "refresh_active_keys_layer": {
        "name": "refresh_active_keys_layer",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "refresh_active_keys_layer: ",
        "prefix_py": "refresh_active_keys_layer=()"
    },
    "refresh_keys": {
        "name": "refresh_keys",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "refresh_keys: ",
        "prefix_py": "refresh_keys=()"
    },
    "refresh_keys_hint": {
        "name": "refresh_keys_hint",
        "type": "function",
        "help": null,
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "refresh_keys_hint: ",
        "prefix_py": "refresh_keys_hint=()"
    },
    "repeat_touch": {
        "name": "repeat_touch",
        "type": "ObjectProperty",
        "help": "ObjectProperty(defaultvalue=None, rebind=False, **kw)\nProperty that represents a Python object.\n\n    :Parameters:\n        `defaultvalue`: object type\n            Specifies the default value of the property.\n        `rebind`: bool, defaults to False\n            Whether kv rules using this object as an intermediate attribute\n            in a kv rule, will update the bound property when this object\n            changes.\n\n            That is the standard behavior is that if there's a kv rule\n            ``text: self.a.b.c.d``, where ``a``, ``b``, and ``c`` are\n            properties with ``rebind`` ``False`` and ``d`` is a\n            :class:`StringProperty`. Then when the rule is applied, ``text``\n            becomes bound only to ``d``. If ``a``, ``b``, or ``c`` change,\n            ``text`` still remains bound to ``d``. Furthermore, if any of them\n            were ``None`` when the rule was initially evaluated, e.g. ``b`` was\n            ``None``; then ``text`` is bound to ``b`` and will not become bound\n            to ``d`` even when ``b`` is changed to not be ``None``.\n\n            By setting ``rebind`` to ``True``, however, the rule will be\n            re-evaluated and all the properties rebound when that intermediate\n            property changes. E.g. in the example above, whenever ``b`` changes\n            or becomes not ``None`` if it was ``None`` before, ``text`` is\n            evaluated again and becomes rebound to ``d``. The overall result is\n            that ``text`` is now bound to all the properties among ``a``,\n            ``b``, or ``c`` that have ``rebind`` set to ``True``.\n        `\\*\\*kwargs`: a list of keyword arguments\n            `baseclass`\n                If kwargs includes a `baseclass` argument, this value will be\n                used for validation: `isinstance(value, kwargs['baseclass'])`.\n\n    .. warning::\n\n        To mark the property as changed, you must reassign a new python object.\n\n    .. versionchanged:: 1.9.0\n        `rebind` has been introduced.\n\n    .. versionchanged:: 1.7.0\n\n        `baseclass` parameter added.\n    ",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "VKeyboard"
        ],
        "prefix_kv": "repeat_touch: ",
        "prefix_py": "repeat_touch="
    },
    "setup_mode": {
        "name": "setup_mode",
        "type": "function",
        "help": "Call this method when you want to readjust the keyboard according to\noptions: :attr:`docked` or not, with attached :attr:`target` or not:\n\n* If :attr:`docked` is True, it will call :meth:`setup_mode_dock`\n* If :attr:`docked` is False, it will call :meth:`setup_mode_free`\n\nFeel free to overload these methods to create new\npositioning behavior.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "setup_mode: ",
        "prefix_py": "setup_mode=()"
    },
    "setup_mode_dock": {
        "name": "setup_mode_dock",
        "type": "function",
        "help": "Setup the keyboard in docked mode.\n\nDock mode will reset the rotation, disable translation, rotation and\nscale. Scale and position will be automatically adjusted to attach the\nkeyboard to the bottom of the screen.\n\n.. note::\n    Don't call this method directly, use :meth:`setup_mode` instead.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self",
            "largs"
        ],
        "prefix_kv": "setup_mode_dock: ",
        "prefix_py": "setup_mode_dock=()"
    },
    "setup_mode_free": {
        "name": "setup_mode_free",
        "type": "function",
        "help": "Setup the keyboard in free mode.\n\nFree mode is designed to let the user control the position and\norientation of the keyboard. The only real usage is for a multiuser\nenvironment, but you might found other ways to use it.\nIf a :attr:`target` is set, it will place the vkeyboard under the\ntarget.\n\n.. note::\n    Don't call this method directly, use :meth:`setup_mode` instead.",
        "callable": true,
        "mtype": "function",
        "parent": [
            "VKeyboard"
        ],
        "parametters": [
            "self"
        ],
        "prefix_kv": "setup_mode_free: ",
        "prefix_py": "setup_mode_free=()"
    },
    "WeakProxy": {
        "name": "WeakProxy",
        "type": "type",
        "import": "from kivy.uix.widget import WeakProxy",
        "help": "WeakProxy(obj, destructor=None)\nReplacement for weakref.proxy to support comparisons\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "WeakProxy: ",
        "prefix_py": "WeakProxy="
    },
    "_WeakProxy__ref": {
        "name": "_WeakProxy__ref",
        "type": "getset_descriptor",
        "help": "_WeakProxy__ref: object",
        "callable": false,
        "mtype": "attribute",
        "parent": [
            "WeakProxy"
        ],
        "prefix_kv": "_WeakProxy__ref: ",
        "prefix_py": "_WeakProxy__ref="
    },
    "WidgetBase": {
        "name": "WidgetBase",
        "type": "WidgetMetaclass",
        "import": "from kivy.uix.widget import WidgetBase",
        "help": "EventDispatcher(**kwargs)\nGeneric event dispatcher interface.\n\n    See the module docstring for usage.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "WidgetBase:\n    ",
        "prefix_py": "WidgetBase()"
    },
    "WidgetException": {
        "name": "WidgetException",
        "type": "type",
        "import": "from kivy.uix.widget import WidgetException",
        "help": "Fired when the widget gets an exception.\n    ",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "WidgetException: ",
        "prefix_py": "WidgetException="
    },
    "WidgetMetaclass": {
        "name": "WidgetMetaclass",
        "type": "type",
        "import": "from kivy.uix.widget import WidgetMetaclass",
        "help": "Metaclass to automatically register new widgets for the\n:class:`~kivy.factory.Factory`.\n\n.. warning::\n    This metaclass is used by the Widget. Do not use it directly!",
        "mtype": "class",
        "parent": [],
        "prefix_kv": "WidgetMetaclass: ",
        "prefix_py": "WidgetMetaclass="
    },
    "mro": {
        "name": "mro",
        "type": "method_descriptor",
        "help": "Return a type's method resolution order.",
        "callable": true,
        "mtype": "attribute",
        "parent": [
            "WidgetMetaclass"
        ],
        "prefix_kv": "mro: ()",
        "prefix_py": "mro=()"
    },
    "import": {
        "help": "",
        "import": "",
        "name": "import",
        "parent": [
            ""
        ],
        "prefix_kv": "import: ",
        "prefix_py": "import=",
        "type": "",
        "mtype": ""
    },
    "include": {
        "help": "",
        "import": "",
        "name": "include",
        "parent": [
            ""
        ],
        "prefix_kv": "include: ",
        "prefix_py": "include=",
        "type": "",
        "mtype": ""
    },
    "self": {
        "help": "",
        "import": "",
        "name": "self",
        "parent": [
            ""
        ],
        "prefix_kv": "self.",
        "prefix_py": "self.",
        "type": "keyword",
        "mtype": "keyword"
    }
}